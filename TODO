							     -*- outline -*-

* Copyright (C) 2010-2013, 2015-2017 Didier Verna

This file is part of Declt.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

** Packages and symbols
- See what to do about shadowings, imports etc.
- Some sub-definitions may not pertain to the same package as the parent one
  (for example, slot names vs. class names). We should check that and document
  the sub-definition's package, when different.

** String downcasing
Abstract it so that we may provide an option for case behavior.

** Slots
Advertise fully qualified slot names when there are not in the same package as
the cass name.
Document not only direct slots, but also overloads (additional initargs etc).

** modify macros
Is there anything specific to do?

** Default values
Some standard values are not documented, e.g, standard method combination,
instance allocation, etc. We could provide a rendering option to make those
apparent.

** Methods
Specializers should link back to the respective class definitions.

** Backend
Clean up the code so that Texinfo becomes a backend with a clean
interface. This way, we could envision adding other backends.

There are several obstacles to this:
1. currently, the constructed node structure contains a mix of things to be
rendered (such as the nodes titles and sections) and this already rendered as
strings (definitions in :before-menu-contents). We would need to completely
separate the structure from its rendering so that the structure itself can be
passed along to various backends. That shouldn't be too hard tho. THe node
structure can be augmented by additional slots for, e.g., a list of
definitions to render.

2. Part of the cleanup would also be to decide on a good coding style for
fresh lines (FRESH-LINE, TERPRI, ~& and ~%).

3. Another problem that will happen is that the introduction and conclusion
material are currently allowed to contain Texinfo directives (contrary to all
other user-provided contents). This will be difficult to abstract if we
generalize the backend notion.

** Strings formatting
Provide markup support through backends (Cf. MarCL). We could already have at
least the current DWIM one, plus a raw/verbatim one.

** Pathnames
If the system definition pathname or definition sources contain funky stuff
like ./, ../ or even are symlinks, the cross-references will most probably
break. We need to work on canonical pathnames.

** Foreign definitions
Because of the way we collect our definitions (system -> packages -> symbols),
we're currently unable to document foreign definitions, that is, provided in a
file of ours but belonging to a foreign package.

In general, it's not clear whether we want to do that. In some specific cases
however, it does makes sense; when the foreign definition has something to do
with the current system for instance. In those cases, we are in fact usually
able to get a handle to the definition in question.  For instance, method
definitions for foreign generic functions (e.g. MOP extensions such as
VALIDATE-SUPERCLASS) may be retreived from classes direct methods.

Even then, the next problem is where to advertise those definitions. They are
neither internal, nor exported. Maybe we could add a section for foreign
definitions.

Other definitions potentially concerned:
-  setf expanders for which the access-fn is foreign, but the
update-fn is ours. I currently don't know how to retrieve those.

Finally, I need to check again what I'm doing with definitions found in a
package of ours, but defined elsewhere (i.e. no source, or outside the
system). Do I tag them as foreign? Do I make a difference between no source,
and foreign /source/ ?  I can't remember.

** Floating setf expanders
Setf expanders are documented when the access-fn is a (generic) function or
macro. If a setf expander is defined on a symbol that has no such definition
(which is possible), it will not currently appear anywhere. What should we do?
Probably create toplevel setf expander definitions.

** Call graphs
Cf.
sb-introspect:who-calls
sb-introspect:find-function-callees

** Source files
Currently, we can link to source files on the local machine, which is not
advisable for web installation of the reference manuals. However, if the
library provides a source control address, we could link to files in a public
repo !

** Lambda-list rendering is wrong.
In so many ways that I can't begin to describe it. We shouldn't use aesthetic
display. Keywords are not visible, case is insensitive etc. This needs to be
completely redone.
