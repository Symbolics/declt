;;; generate.cl --- Declt reference manual generation script

;; Copyright (C) 2010-2013, 2015-2022 Didier Verna

;; Author: Didier Verna <didier@didierverna.net>

;; This file is part of Declt.

;; Permission to use, copy, modify, and distribute this software for any
;; purpose with or without fee is hereby granted, provided that the above
;; copyright notice and this permission notice appear in all copies.

;; THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


;;; Commentary:



;;; Code:

(require "asdf")

(defconstant +introduction+
  "@macro declt
@t{Declt}
@end macro

@macro cl
Common Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@cindex Library
@declt{} (pronounce ``dec'let'') is a reference manual generator for
@cl{} libraries. A @declt{} manual documents one specified ASDF system
(considered as the ``main'' system), and all its local dependencies
(subsystems found in the same distribution). This is what is
collectively referred to as the @dfn{library}.

@cindex Definition
@declt{} doesn't perform any kind of static code analysis, but instead
loads the library, and then introspects the Lisp environment to discover
what ``belongs'' to it. The generated documentation includes the
description of both programmatic and ASDF components. Every such
component description is called a @dfn{definition}.

@declt{} manuals provide a detailed description of the library's
infrastructure by including definitions for every relevant ASDF
component (systems, modules, and files), and Lisp package.

Exported programmatic definitions are split from the internal ones,
which allows to separately browse either the library's public interface
or its implementation. Both sections of the manual include definitions
for constants, special variables, symbol macros, macros, @t{setf}
expanders, compiler macros, regular functions (including @t{setf} ones),
generic functions and methods (including @t{setf} ones), method
combinations, conditions, structures, classes, and types.

Programmatic definitions are as complete and exhaustive as introspection
can make them. @declt{} collects documentation strings, lambda lists
(including qualifiers and specializers where appropriate), slot
definitions (including type information, allocation type, initialization
arguments, @etc{}), definition sources, @etc{}

Every definition includes a full set of cross-references to related
ones: ASDF component dependencies, parents, and children, classes direct
methods, super- and sub-classes, slot readers and writers, @t{setf}
expanders access and update functions, @etc{}

Finally, @declt{} produces exhaustive and multiple-entry indexes to all
documented aspect of the library.

@declt{} manuals are generated in Texinfo format. From there it is
possible to produce readable / printable output in Info, HTML, PDF,
PostScript, @etc{}

The @declt{} Reference Manual, which you are currently reading,
is the primary example of documentation generated by @declt{} itself.
@ifinfo
See @xref{Top, , The Declt User Manual, declt-user},
@end ifinfo
@ifhtml
See @xref{Top, , The Declt User Manual, user},
@end ifhtml
@ifnotinfo
@ifnothtml
@xref{Top, , , user, The Declt User Manual},
@end ifnothtml
@end ifnotinfo
for a more human-readable guide to using @declt{}."
  "The reference manual's introductory text.")

(asdf:load-system :net.didierverna.declt)
(net.didierverna.declt:nickname-package)

(defvar *locations* nil)
(when (and (second sb-ext:*posix-argv*)
	   (string= (second sb-ext:*posix-argv*) "--locations"))
  (setq *locations* t))

;; ASDF doesn't understand my version numbering scheme. That will change soon,
;; but in the meantime, I have to provide my version number explicitly here.
(declt:declt :net.didierverna.declt
	     :library-name "Declt"
	     :library-version (declt:version :long)
	     :copyright-years declt:*copyright-years*
	     :license :bsd
	     :introduction +introduction+
	     :locations *locations*
	     :file-name "reference"
	     :info-name "declt-reference")

(uiop:quit)

;;; generate.cl ends here
