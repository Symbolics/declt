\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2013, 2015-2019 Didier Verna

@c Author: Didier Verna <didier@didierverna.net>

@c This file is part of Declt.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.

@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:



@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename declt-user.info
@settitle The Declt User Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 2.4 patchlevel 1 "Will Decker"
@set COPYRIGHT_DATE 2010--2013, 2015--2019
@setchapternewpage odd
@documentdescription
The Declt User Manual for version @value{VERSION}.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@macro declt
@t{Declt}
@end macro

@macro cl
Common Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro

@macro nil
@code{nil}
@end macro


@c --------------------------------
@c Manuals cross-referencing macros
@c --------------------------------

@c ---------------
@c Indexing macros
@c ---------------

@c Concept index
@c -------------

@c Configuration options
@macro coindex{name}
@vindex net.didierverna.declt.configuration
@cindex Configuration Option, @t{:\name\}
@cindex @t{:\name\}
@end macro


@c Functions index
@c ---------------

@c Function options
@macro foindex{func,opt}
@findex \func\@r{, option, }\opt\
@end macro

@c Function keys
@macro fkindex{func,key}
@findex \func\@r{, key, }\key\
@end macro


@c Variables index
@c ---------------

@c Constant variables
@macro cvindex{var}
@vindex \var\
@vindex @r{Constant, }\var\
@end macro

@c Parameter variables
@macro pvindex{var}
@vindex \var\
@vindex @r{Parameter, }\var\
@end macro


@c Data Types index
@c ----------------

@c Packages
@macro pkgindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro sysindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Declt User: (declt-user).             The Declt User Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Declt User Manual
@subtitle Documentation extractor from @cl{} to Texinfo, Version @value{VERSION}
@author Didier Verna <@email{didier@@didierverna.net}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Declt User Manual

This is the @declt{} User Manual for @declt{} version @value{VERSION}.

@menu
* Copying::                     The BSD license
* Introduction::                Declt at a glance
* Installation::                Library and documentation
* Usage::                       All the details
* Other Considerations::        And then some
* Conclusion::                  That's all folks
* Supported Platforms::         Portability, dependencies, etc.
* Indexes::                     Concepts, functions, variables and data types
* Acknowledgments::             Hall of Pride
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Installation, Copying, Top
@chapter Introduction

@declt{} (pronounce ``dec'let'') is a reference manual generator for
@cl{} libraries.  It works by loading an ASDF system and introspecting
its contents. The generated documentation contains the description of
the system itself and its local dependencies (other systems in the same
distribution): components (modules and files), packages and definitions
found in those packages.

Exported and internal definitions are listed separately. This allows the
reader to have a quick view on the library's public API. Within each
section, definitions are sorted lexicographically.

In addition to ASDF system components and packages, @declt{} documents
the following definitions: constants, special variables, symbol macros,
macros, @t{setf} expanders, compiler macros, functions (including
@t{setf} ones), generic functions and methods (including @t{setf} ones),
method combinations, conditions, structures, classes and types.

The generated documentation includes every possible bit of information
that introspecting can provide: documentation strings, lambda lists
(including qualifiers and specializers where appropriate), slots
(including type, allocation and initialization arguments), definition
source file @etc{}

Every documented item provides a full set of cross-references to related
items: ASDF component dependencies, parents and children, classes direct
methods, super and subclasses, slot readers and writers, @t{setf}
expanders access and update functions @etc{}

Finally, @declt{} produces exhaustive and multiple-entry indexes for
every documented item.

Reference manuals are generated in Texinfo format. From there it is
possible to produce readable / printable output in Info, HTML, PDF,
PostScript, @etc{}

The primary example of documentation generated by @declt{} is
@ifinfo
@ref{Top, , The Declt Reference Manual, declt-reference}.
@end ifinfo
@ifhtml
@ref{Top, , The Declt Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, The Declt Reference Manual}.
@end ifnothtml
@end ifnotinfo




@c ====================================================================
@c Installation
@c ====================================================================
@node Installation, Usage, Introduction, Top
@chapter Installation

@xref{Supported Platforms}, for information on portability or
requirements. See @declt{}'s
@url{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php#declt,homepage}
for tarballs, Git repository and online documentation. @declt{} is also
available via @url{http://www.quicklisp.org,Quicklisp}.

In order to install and load the bare Lisp library, unpack it somewhere
in the ASDF 3 source registry and type this at the REPL:
@sysindex{net.didierverna.declt}
@verbatim
(asdf:load-system :net.didierverna.declt)
@end verbatim

In addition to the bare Lisp library, the @declt{} distribution offers
documentation in the form of 2 different manuals: the User Manual (you
are reading it) and the
@ifinfo
@ref{Top, , The Declt Reference Manual, declt-reference}.
@end ifinfo
@ifhtml
@ref{Top, , The Declt Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, The Declt Reference Manual}.
@end ifnothtml
@end ifnotinfo
The latter is generated by @declt{} itself. If you want to benefit from
all those wonders, some bits of manual installation are needed. After
unpacking somewhere in the ASDF 3 source registry, please perform the
following steps, in order.

@enumerate
@item
Edit @file{make/config.make} to your specific needs.

@item
Type @command{make} to compile the documentation (user manual and
reference manual). By default, the documentation is built in info, PDF
and HTML formats. If you want other formats (DVI and PostScript are
available), type @command{make all-formats}. You can also type
individually @command{make dvi} and/or @command{make ps} in order to get
the corresponding format.

@item
Type @command{make install} to install the documentation. If you have
compiled the documentation in DVI and PostScript format, those will be
installed as well.
@end enumerate

Type @command{make uninstall} to uninstall the library.



@c ====================================================================
@c Usage
@c ====================================================================
@node Usage, Other Considerations, Installation, Top
@chapter Usage

@pkgindex{net.didierverna.declt}
@declt{} itself resides in a package called @t{net.didierverna.declt}. You
can automatically nickname this package with the following function.
@cindex Package, nicknames
@defun nickname-package [NICKNAME]
Add @var{NICKNAME} (@code{:declt} by default) to the
@code{:net.didierverna.declt} package.
@end defun

Apart from that, @declt{} has a single entry point: the @t{declt}
function.
@defun declt SYSTEM-NAME :KEY VALUE@dots{}
Generate a reference manual in Texinfo format for ASDF @var{SYSTEM-NAME}.
@end defun

@menu
* Customization::               Tweaking the generated output
* Coding Style::                Another way to influence the output
* Pretty Printing::             Things are not what they seem
* Caveats::                     Current limitations
@end menu


@c -------------
@c Customization
@c -------------
@node Customization, Coding Style, Usage, Usage
@section Customization

The @declt{} function accepts a number of keyword arguments allowing you
to customize the generated reference manual.

@menu
* Output Workarounds::          Prettifying the output
* Output Supplements::          Additional information and contents
* Output Control::              Basic output control
@end menu

@node Output Workarounds, Output Supplements, Customization, Customization
@subsection Output Workarounds
The following information is normally extracted from the system,
although you may want to tweak it for better formatting.

@table @code
@item :library-name
@fkindex{declt,library-name}
The library name, used in the reference manual title and at some other
places. It defaults to the system name, but you are encouraged to
provide a more human-readable version, such as @t{Declt} instead of
just @t{net.didierverna.declt}.
@item :tagline
@fkindex{declt,tagline}
A tagline for the library, use in the reference manual subtitle. It
defaults to the system's long name or description (one-liners only), but
see @ref{Taglines}.
@item :version
@fkindex{declt,version}
The library's version, used in the reference manual subtitle and at some
other places. It defaults to the system's version (one-liner only).
@item :contact
@fkindex{declt,contact}
The contact(s) for the library. The default is extracted from the system
definition (the @code{maintainer} and @code{author} slots, possibly also
the @code{mailto} one; onle-liners only). At least one contact is needed
because it is typeset in various places (@eg{} on the title page). If
the library doesn't provide that information, you need to provide it by
hand, as an author string or a list of such. An author string contains a
name, optionally followed by an @code{<email@@ddress>}.
@end table

@node Output Supplements, Output Control, Output Workarounds, Customization
@subsection Output Supplements
The following information is either not provided by the system, or too
difficult to extract properly (DWIM rulez not).

@table @code
@item :copyright-years
@fkindex{declt,copyright-years}
Copyright year(s) used to typeset copyright header lines. You can use
@nil{} to disable such lines. It defaults to the current year.  You may
use any kind of string here, such as @code{"2013"}, @code{"2010, 2011"},
@code{"2010--2013"} @etc{}
@item :license
@fkindex{declt,license}
@pvindex{*licenses*}
The library's license type. This information is used to insert licensing
information at several places in the manual. The default is @nil{} and
the possible other values are: @code{:mit}, @code{:boost}, @code{:bsd},
@code{:gpl} and @code{:lgpl}. The corresponding license texts are stored
in the @code{*licenses*} parameter. Please ask if you need other kinds of
licenses added to @declt{}. Note that this information is @strong{not}
currently extracted from the system's @t{license} slot, as this slot is
not well defined.
@item :introduction
@fkindex{declt,introduction}
A potential contents for an introductive chapter.
@item :conclusion
@fkindex{declt,conclusion}
A potential contents for a conclusive chapter.
@end table

Note that both the introduction and the conclusion may contain Texinfo
directives (no post-processing will occur). All other textual material
is considered raw text and will be properly escaped for Texinfo.

@node Output Control,  , Output Supplements, Customization
@subsection Output Control
The following options let you customize some basic aspects of the
generated documentation.

@table @code
@item :texi-name
@fkindex{declt,texi-name}
The basename of the Texinfo file, sans extension. It defaults to the
system name.
@item :texi-directory
@fkindex{declt,texi-directory}
The Texinfo file directory. It defaults to the current directory.
@item :info-name
@fkindex{declt,info-name}
The base name of the Info file, sans extension. It defaults to
@t{TEXI-NAME}.
@item :hyperlinks
@fkindex{declt,hyperlinks}
Whether to create hyperlinks to files or directories in the reference
manual. Note that those links being specific to the machine on which the
manual was generated, it is preferable to keep it to @nil{} for creating
reference manuals meant to be put online.
@item :declt-notice
@fkindex{declt,declt-notice}
Controls the output of a small paragraph about automatic manual
generation by @declt{}. Possible values are @nil{} (meaning don't
acknowledge @declt{}), @code{:short}, and @code{:long} (the
default). A @code{:short} paragraph advertises @declt{} with its
version number. A @code{:long} one also prints its release code name and
the generation time. I would be grateful if you kept at least the short
version in your manuals, as an acknowledgment for using @declt{}.
@end table


@c -------------
@c Coding Style
@c -------------
@node Coding Style, Pretty Printing, Customization, Usage
@section Coding Style

Some elements of your own coding style will affect the reference manuals
generated by @declt{}. This section provides some recommendations that
will make the generated output look nicer.

@menu
* Taglines::                    Influence the subtitle
* Docstrings::                  Influence the concatenation of definitions
@end menu

@node Taglines, Docstrings, Coding Style, Coding Style
@subsection Taglines

@fkindex{declt,tagline}
Unless you provide it with an explicit @code{:tagline} argument,
@code{declt} uses the system's long name or description (provided they
are one-liners)to construct a subtitle. Consequently, it is advisable to
use a single (short) line of text for these slots. The system's long
name should typically be the expansion of the system's name, if that's
an acronym, or be left to @nil{}.

@node Docstrings,  , Taglines, Coding Style
@subsection Docstrings

@declt{} tries to make the generated output look nicer in various
ways. For example, @code{setf} functions are documented right after the
corresponding reader (if any) instead of being listed under the ``S''
letter. In a similar vein, methods are documented as elements of their
respective generic function, not as toplevel definitions.

One thing that you can influence is @declt{}'s attempt at concatenating
definitions. Concatenating may occur when there are definitions for both
@code{symbol} and @code{(setf symbol)}. This happens for accessor
functions, generic functions or @code{setf} expanders. This also happens
for accessor methods. If possible, @declt{} will try to generate a
@emph{single} definition for both the reader and the writer. That is
only possible, however, if both definitions would render the same
documentation, @ie{} same package, source file and docstring.

If you don't provide a docstring, concatenation will work. If you
provide different docstrings (like ``Set the value of @dots{}'' and
``Get the value of @dots{}''), you will effectively prevent
concatenation from happening. One thing I like to do is to provide the
@emph{same} neutral docstring for readers and writers. For instance
``Access the value of @dots{}''. This way, definitions can both provide
a docstring and be concatenated together.


@c ---------------
@c Pretty Printing
@c ---------------
@node Pretty Printing, Caveats, Coding Style, Usage
@section Pretty Printing

@findex declt
@fkindex{declt,introduction}
@fkindex{declt,conclusion}
All text coming from either @cl{} or one of @code{declt}'s
initialization arguments (@code{:introduction} and @code{:conclusion}
excepted) is properly escaped for the Texinfo format, so you don't need
to worry about that.

In non-verbatim contexts, @declt{} attempts to pretty-print symbols the
names of which would otherwise be problematic. In particular, the empty
symbol (@t{||}) is denoted as the math empty set, and blank characters
(spaces, tabs, and newlines), are replaced by more explicit Unicode
symbols. Note that this means that even for Info output, a Unicode
reader is required.

@declt{} also attempts to do some pretty printing on things like
docstrings, system long description @etc{}. Currently, there's a simple
heuristic that tries to detect short lines that should probably stand on
their own (with an explicit line break). For every piece of text,
@declt{} first calculates the longest line and bases its line breaking
decision on that. In the future, it will be possible to bypass this
calculation by specifying an intended line width. Other pretty printers
will likely be made available as well.


@c -------
@c Caveats
@c -------
@node Caveats,  , Pretty Printing, Usage
@section Caveats

@declt{} currently has two main limitations that you need to understand
in order to avoid bad surprises, plus some less serious design decisions
that are still worth knowing.

@menu
* SBCL Only::                   Declt is not portable yet
* Foreign Definitions::         Not belonging to the system being documented
* Method Combinations::         Please behave
* Anchor Names::                Some characters are problematic
@end menu

@node SBCL Only, Foreign Definitions, Caveats, Caveats
@subsection SBCL Only

@sysindex{sb-introspect}
First, @declt{} is an SBCL-only library. That is because it relies on
@t{sb-introspect}. This limitation may be lifted in the future by using
equivalent API from other @cl{} implementations, but in the meantime,
this means two things.

@enumerate
@item
@declt{} can only document libraries that work with SBCL, because it
needs to load them (@pxref{Introduction}).
@item
If your ASDF system contains vendor-specific modules or components,
@declt{} will only be able to document SBCL-specific ones.
@end enumerate

Note that more generally, @declt{} only documents modules or components
that ASDF actually loads, so if your system definition contains some
form of conditional inclusion, this will affect the generated
documentation.

@node Foreign Definitions, Method Combinations, SBCL Only, Caveats
@subsection Foreign Definitions

@cindex Foreign Definition
In order to understand what a @dfn{foreign definition} is, you need to
understand how @declt{} works first. This was briefly explained in the
introduction, but here is the story again: @declt{} first loads the ASDF
system from which it retrieves modules and components, notably including
Lisp files. It then scans all live packages and collects those which
were defined within that system (@emph{i.e.} those the source of which
belong to that system). Finally, it collects all definitions for the
symbols in those packages.

That is the extent of what is documented by @declt{}. In this context, a
@dfn{foreign definition} is a definition that @declt{}'s current
information collection scheme would miss. This includes, for instance,
definitions found in one of the system's files, but belonging to a
package that was not defined in the system itself.

@declt{} currently does not document foreign definitions, although in
some cases, it is already possible to avoid missing them. In fact, the
very question of deciding on whether foreign definitions should actually
be documented is still open for discussion. See the @file{TODO} file in
the distribution for more information.


@node Method Combinations, Anchor Names, Foreign Definitions, Caveats
@subsection Method Combinations

@cindex Method Combinations
The method combination interface in @cl{} is underspecified. In
particular, although you define method combinations globally, changing
them afterwards may not affect already created generic functions. As a
result, you could in theory end up with @strong{many} different method
combinations with the same name, used in various generic functions. See
this
@url{http://www.didierverna.net/blog/index.php?post/2013/08/16/Lisp-Corner-Cases%3A-Method-Combinations,
blog entry} and this
@url{https://www.lrde.epita.fr/~didier/research/publications/papers.php#verna.18.els,article}
for more explanations.

@declt{} assumes however that you have some sanity and only define
method combinations once per name. They are documented as top level
items and generic functions using them provide cross-references.


@node Anchor Names,  , Method Combinations, Caveats
@subsection Anchor Names

Because of the Texinfo anchor syntax, some characters are very
problematic (or even completely prohibited) in anchor names. In order to
provide robust anchors, @declt{} transforms those characters into
Unicode alternatives, resembling the original ones, but not quite the
same. This is normally not a problem, but you may get bitten by this if
you ever happen to attempt a copy/paste operation from an Info anchor or
an HTML hyperlink (PDF links are fine): while the link may look like the
original Lisp symbol, some characters will actually be different. More
specifically, dots, commas, colons, parentheses, and backslashes will be
replaced by close Unicode symbols. Additionally, the ampersand is turned
upside down, so this one will be noticeable@dots{}



@c ====================================================================
@c Other Considerations
@c ====================================================================
@node Other Considerations, Conclusion, Usage, Top
@chapter Other Considerations
This section contains marginal or meta-information, orthogonal to the
library's main purpose.

@menu
* Configuration::               Preload parameters
* Version Numbering::           In case you need to conditionalize
@end menu


@c -------------
@c Configuration
@c -------------
@node Configuration, Version Numbering, Other Considerations, Other Considerations
@section Configuration
@cindex Configuration
@sysindex{net.didierverna.declt.setup}@c
@pkgindex{net.didierverna.declt.setup}@c
Some aspects of @declt{}'s behavior can be configured @emph{before} the
library system is actually loaded. @declt{} stores its user-level
configuration (along with some other setup parameters) in another ASDF
system called @samp{net.didierverna.declt.setup} (and the eponym
package). In order to configure the library (I repeat, prior to loading
it), you will typically do something like this:
@verbatim
(require "asdf")
(asdf:load-system :net.didierverna.declt.setup)
(net.didierverna.declt.setup:configure <option> <value>)
@end verbatim

@defun configure KEY VALUE
Set @var{KEY} to @var{VALUE} in the current @declt{} configuration.
@end defun

Out of curiosity, you can also inquire the current configuration for
specific options with the following function.
@defun configuration KEY
Return @var{KEY}'s value in the current @declt{} configuration.
@end defun

Currently, the following options are provided.
@table @t
@item :swank-eval-in-emacs
@coindex{swank-eval-in-emacs}
@vindex slime-enable-evaluate-in-emacs
This option is only useful if you use Slime, and mostly if you plan on
hacking @declt{} itself. The library provides indentation information
for some of its functions directly embedded in the code. This
information can be automatically transmitted to Emacs when the ASDF
system is loaded if you set this option to @code{t}. However, note that
for this to work, the Slime variable
@code{slime-enable-evaluate-in-emacs} must also be set to @code{t} in
your Emacs session. If you're interested to know how this process works,
I have described it in this
@url{http://www.didierverna.net/blog/index.php?post/2011/07/20/One-more-indentation-hack,blog
entry}.
@end table


@c -----------------
@c Version Numbering
@c -----------------
@node Version Numbering,  , Configuration, Other Considerations
@section Version Numbering

As @declt{} evolves over time, you might one day feel the need for
conditionalizing your code on the version of the library.

The first thing you can do to access the current version number of
@declt{} is use the @code{version} function.

@defun version &optional (TYPE :number)
Return the current version number of @declt{}. @var{TYPE} can be one of
@code{:number}, @code{:short} or @code{:long}. For @code{:number}, the
returned value is a fixnum. Otherwise, it is a string.
@end defun

A @declt{} version is characterized by 4 elements as described below.
@itemize
@item
@pvindex{*release-major-level*}
A major version number stored in the parameter
@code{*release-major-level*}.
@item
@pvindex{*release-minor-level*}
A minor version number, stored in the parameter
@code{*release-minor-level*}.
@item
@pvindex{*release-status*}
A release status stored in the parameter @code{*release-status*}. The
status of a release can be @code{:alpha}, @code{:beta}, @code{:rc}
(standing for ``release candidate'') or @code{:patchlevel}. These are in
effect 4 levels of expected stability.
@item
@pvindex{*release-status-level*}
A status-specific version number stored in the parameter
@code{*release-status-level*}. Status levels start at 1 (alpha 1, beta 1
and release candidate 1) except for stable versions, in which case patch
levels start at 0 (@eg{} 2.4.0).
@end itemize

@pvindex{*release-name*}
In addition to that, each version of @declt{} (in the sense
@emph{major.minor}, regardless of the status) has a name, stored in the
parameter @code{*release-name*}. The general naming theme for @declt{}
is ``Star Trek Characters''.

Here is how the @code{version} function computes its value.
@itemize
@item
A version @code{:number} is computed as @emph{major . 10000 + minor .
100 + patchlevel}, effectively leaving two digits for each level. Note
that alpha, beta and release candidate status are ignored in version
numbers (this is as if the corresponding status level was considered to
be always 0). Only stable releases have their level taken into account.
@item
A @code{:short} version will appear like this for unstable releases:
1.3a4, 2.5b8 or 4.2rc1. Remember that alpha, beta or release candidate
levels start at 1. Patchlevels for stable releases start at 0 but 0 is
ignored in the output. So for instance, version 4.3.2 will appear as-is,
while version 1.3.0 will appear as just 1.3.
@item
A @code{:long} version is expanded from the short one, and includes the
release name. For instance, 1.3 alpha 4 "Uhura", 2.5 beta 8 "Scotty",
4.2 release candidate 1 "Spock" or 4.3.2 "Counsellor Troy". As for the
short version, a patchlevel of 0 is ignored in the output: 1.3 "Uhura".
@end itemize



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Supported Platforms, Other Considerations, Top
@chapter Conclusion

So that's it I guess. You know all about @declt{} now. The next step is
to polish your own libraries so that @declt{} can extract meaningful
documentation from them.

Then, you will want to run @declt{} on all the other libraries you use,
in order to finally know how they work.

Now, go my friend. Go document the whole Lisp world!



@c ====================================================================
@c Supported Platforms
@c ====================================================================
@node Supported Platforms, Indexes, Conclusion, Top
@appendix Supported Platforms
@sysindex{sb-introspect}
@declt{} is an ASDF 3 library. It currently works with SBCL only. Other
Lisp implementations are not currently supported, as @declt{} relies on
SBCL's @t{sb-introspect} contrib. The Texinfo code that @declt{}
generates requires Makeinfo 6.7, and contains extended Unicode
characters (so even for reading Info, Unicode support is necessary).



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, Acknowledgments, Supported Platforms, Top
@appendix Indexes

@menu
* Concept Index::               Well, the concept index
* Function Index::              Well, the function index
* Variable Index::              Well, the variable index
* Data Type Index::             Well, the data type index
@end menu


@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp
@page


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn
@page


@c --------------
@c Variable Index
@c --------------
@node Variable Index, Data Type Index, Function Index, Indexes
@section Variables
@printindex vr
@page


@c ---------------
@c Data Type Index
@c ---------------
@node Data Type Index,  , Variable Index, Indexes
@section Data Types
@printindex tp



@c ====================================================================
@c Acknowledgments
@c ====================================================================
@node Acknowledgments,  , Indexes, Top
@appendix Acknowledgments
The following people have contributed bug reports or fixes, suggestions,
compiler support or any other kind of help. You have my gratitude!

@multitable @columnfractions .99
@item BR. Fenn Pocock@*
@item Sabra Crolleton@*
@item Robert Goldman@*
@item Symbolics@*
@end multitable


@bye

@c Local Variables:
@c TeX-master: t
@c End:

@c user.texi ends here
