\input texinfo

@c reference.texi --- Reference manual

@c Copyright (C) 2010-2013, 2015-2021 Didier Verna

@c This file is part of Declt.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.
@c 
@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:

@c Generated automatically by Declt version 3.0 "Montgomery Scott"
@c on Wed Mar 31 10:22:38 2021 GMT+1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename declt-reference.info
@settitle The Declt Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The Declt Reference Manual, version 3.0 "Montgomery Scott".
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@tpindex @t{\name\}
@tpindex Module, @t{\name\}
@end macro

@c Files
@macro fileindex{name}
@tpindex @t{\name\}
@tpindex File, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro expandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro combinationsubindex{name}
@findex @r{Method Combination, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Declt Reference: (declt-reference). The Declt Reference Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} 2010-2013@comma{} 2015-2021 Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Declt Reference Manual
@subtitle Documentation Extractor from Common Lisp to Texinfo, version 3.0 "Montgomery Scott"

@author Didier Verna <@email{didier@atchar{}didierverna.net}>

@page
@quotation
This manual was generated automatically by Declt 3.0 "Montgomery Scott" on Wed Mar 31 10:22:38 2021 GMT+1.
@end quotation
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Declt Reference Manual
This is the Declt Reference Manual, version 3.0 "Montgomery Scott",
generated automatically by Declt version 3.0 "Montgomery Scott"
on Wed Mar 31 10:22:38 2021 GMT+1.

@menu
* Copying:: The BSD License
* Introduction:: What Declt is all about
* Systems:: The systems documentation
* Modules:: The modules documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use@comma{} copy@comma{} modify@comma{} and distribute this software for any
purpose with or without fee is hereby granted@comma{} provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL@comma{} DIRECT@comma{} INDIRECT@comma{} OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE@comma{} DATA OR PROFITS@comma{} WHETHER IN AN
ACTION OF CONTRACT@comma{} NEGLIGENCE OR OTHER TORTIOUS ACTION@comma{} ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Systems, Copying, Top
@chapter Introduction
@macro declt
@t{Declt}
@end macro

@macro cl
Common-Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@declt{} (pronounce ``dec'let'') is a reference manual generator for
@cl{} libraries.  It works by loading an ASDF system and introspecting
its contents. The generated documentation contains the description of
the system itself and its local dependencies (other systems in the same
distribution): components (modules and files), packages and definitions
found in those packages.

Exported and internal definitions are listed separately. This allows the
reader to have a quick view on the library's public API. Within each
section, definitions are sorted lexicographically.

In addition to ASDF system components and packages, @declt{} documents
the following definitions: constants, special variables, symbol macros,
macros, @t{setf} expanders, compiler macros, functions (including
@t{setf} ones), generic functions and methods (including @t{setf} ones),
method combinations, conditions, structures, classes and types.

The generated documentation includes every possible bit of information
that introspecting can provide: documentation strings, lambda lists
(including qualifiers and specializers where appropriate), slots
(including type, allocation and initialization arguments), definition
source file @etc{}

Every documented item provides a full set of cross-references to related
items: ASDF component dependencies, parents and children, classes direct
methods, super and subclasses, slot readers and writers, @t{setf}
expanders access and update functions @etc{}

Finally, @declt{} produces exhaustive and multiple-entry indexes for
every documented item.

Reference manuals are generated in Texinfo format (compatible, but not
requiring Texinfo 5). From there it is possible to produce readable /
printable output in info, HTML, PDF, DVI and PostScript with tools such as
@command{makeinfo}, @command{texi2dvi} or @command{texi2pdf}.

The @declt{} Reference Manual, which you are currently reading,
is the primary example of documentation generated by @declt{} itself.
@ifinfo
See @xref{Top, , The Declt User Manual, declt-user},
@end ifinfo
@ifhtml
See @xref{Top, , The Declt User Manual, user},
@end ifhtml
@ifnotinfo
@ifnothtml
@xref{Top, , , user, The Declt User Manual},
@end ifnothtml
@end ifnotinfo
for a more human-readable guide to using @declt{}.



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Modules, Introduction, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The net.didierverna.declt system: The net․didierverna․declt system.
* The net.didierverna.declt.setup system: The net․didierverna․declt․setup system.
* The net.didierverna.declt.core system: The net․didierverna․declt․core system.
* The net.didierverna.declt.extract system: The net․didierverna․declt․extract system.
* The named-readtables system::
* The sb-introspect system::
@end menu


@c --------------------------------
@c The net.didierverna.declt system
@c --------------------------------
@node The net․didierverna․declt system, The net․didierverna․declt․setup system, Systems, Systems
@section @t{net.didierverna.declt}
@anchor{go to the net․didierverna․declt system}@c
@systemindex{net.didierverna.declt}@c
A reference manual generator for Common Lisp libraries
@table @strong
@item Long Name
Documentation Extractor from Common Lisp to Texinfo
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php@hashchar{}declt}
@item Source Control
@uref{https://github.com/didierverna/declt}
@item License
BSD
@item Long Description

Declt (pronounce dec'let) is a reference manual generator for Common Lisp.
It extracts and formats documentation from ASDF systems@comma{} including the system
itself@comma{} its local dependencies (subsystems)@comma{} components@comma{} packages and an
extensive list of definitions (variables@comma{} functions etc.). The formatted
documentation comes with full indexing and cross-references.@*

Reference manuals are generated in Texinfo format which can subsequently be
converted into info@comma{} HTML@comma{} DVI@comma{} PostScript or PDF.
@item Version
3.0
@item If Feature
@t{:sbcl}
@item Dependencies
@itemize @bullet
@item
@ref{go to the net․didierverna․declt․setup system, , @t{net.didierverna.declt.setup}} system
@item
@ref{go to the net․didierverna․declt․core system, , @t{net.didierverna.declt.core}} system
@end itemize
@item Source
@ref{go to the net․didierverna․declt/net․didierverna․declt․asd file, , @t{net.didierverna.declt.asd}}.
@end table


@c --------------------------------------
@c The net.didierverna.declt.setup system
@c --------------------------------------
@node The net․didierverna․declt․setup system, The net․didierverna․declt․core system, The net․didierverna․declt system, Systems
@section @t{net.didierverna.declt.setup}
@anchor{go to the net․didierverna․declt․setup system}@c
@systemindex{net.didierverna.declt.setup}@c
Declt's preload setup library
@table @strong
@item Long Name
Documentation Extractor from Common Lisp to Texinfo@comma{} setup library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php@hashchar{}declt}
@item Source Control
@uref{https://github.com/didierverna/declt}
@item License
BSD
@item Long Description

The Declt setup library provides support for various preload configuration
parameters and meta-utilities. For a more complete description of Declt@comma{}
see the `net.didierverna.declt' system.
@item Version
3.0
@item Dependency
@ref{go to the named-readtables system, , @t{named-readtables}} system
@item Source
@ref{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, , @t{net.didierverna.declt.setup.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{go to the net․didierverna․declt․setup/package․lisp file, , @t{package.lisp}} file
@item
@ref{go to the net․didierverna․declt․setup/src module, , @t{src}} module
@end itemize
@end table


@c -------------------------------------
@c The net.didierverna.declt.core system
@c -------------------------------------
@node The net․didierverna․declt․core system, The net․didierverna․declt․extract system, The net․didierverna․declt․setup system, Systems
@section @t{net.didierverna.declt.core}
@anchor{go to the net․didierverna․declt․core system}@c
@systemindex{net.didierverna.declt.core}@c
A reference manual generator for Common Lisp libraries
@table @strong
@item Long Name
Documentation Extractor from Common Lisp to Texinfo@comma{} core library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php@hashchar{}declt}
@item Source Control
@uref{https://github.com/didierverna/declt}
@item License
BSD
@item Long Description

Declt's core functionality. For a more complete description of Declt@comma{} see the
net.didierverna.declt system.
@item Version
3.0
@item If Feature
@t{:sbcl}
@item Dependencies
@itemize @bullet
@item
@ref{go to the sb-introspect system, , @t{sb-introspect}} system, required, for feature @t{:sbcl}
@item
@ref{go to the net․didierverna․declt․setup system, , @t{net.didierverna.declt.setup}} system
@item
@ref{go to the net․didierverna․declt․extract system, , @t{net.didierverna.declt.extract}} system
@end itemize
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{go to the net․didierverna․declt․core/package․lisp file, , @t{package.lisp}} file
@item
@ref{go to the net․didierverna․declt․core/src module, , @t{src}} module
@end itemize
@end table


@c ----------------------------------------
@c The net.didierverna.declt.extract system
@c ----------------------------------------
@node The net․didierverna․declt․extract system, The named-readtables system, The net․didierverna․declt․core system, Systems
@section @t{net.didierverna.declt.extract}
@anchor{go to the net․didierverna․declt․extract system}@c
@systemindex{net.didierverna.declt.extract}@c
Declt library for extracting information from ASDF systems
@table @strong
@item Long Name
Documentation Extractor from Common Lisp to Texinfo@comma{} extract library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php@hashchar{}declt}
@item Source Control
@uref{https://github.com/didierverna/declt}
@item License
BSD
@item Long Description
The Declt library that collects information from ASDF systems by
introspection@comma{} and produces an abstract representation@comma{} independent from both
the final manual's organization@comma{} or the output format. For a more complete
description of Declt@comma{} see the `net.didierverna.declt' system.
@item Version
3.0
@item If Feature
@t{:sbcl}
@item Dependencies
@itemize @bullet
@item
@ref{go to the sb-introspect system, , @t{sb-introspect}} system, required, for feature @t{:sbcl}
@item
@ref{go to the net․didierverna․declt․setup system, , @t{net.didierverna.declt.setup}} system
@end itemize
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{go to the net․didierverna․declt․extract/package․lisp file, , @t{package.lisp}} file
@item
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@end itemize
@end table


@c ---------------------------
@c The named-readtables system
@c ---------------------------
@node The named-readtables system, The sb-introspect system, The net․didierverna․declt․extract system, Systems
@section @t{named-readtables}
@anchor{go to the named-readtables system}@c
@systemindex{named-readtables}@c
Library that creates a namespace for named readtable
  akin to the namespace of packages.
@table @strong
@item Maintainer
Gábor Melis <@email{mega@atchar{}retes.hu}>
@item Author
Tobias C. Rittweiler <@email{trittweiler@atchar{}common-lisp.net}>
@item Contact
@email{mega@atchar{}retes.hu}
@item Home Page
@uref{http://melisgl.github.io/named-readtables}
@item Source Control
@t{(GIT https://github.com/melisgl/named-readtables.git)}
@item Bug Tracker
@uref{https://github.com/melisgl/named-readtables/issues}
@item License
BSD@comma{} see LICENSE
@item Version
0.9
@end table


@c ------------------------
@c The sb-introspect system
@c ------------------------
@node The sb-introspect system, , The named-readtables system, Systems
@section @t{sb-introspect}
@anchor{go to the sb-introspect system}@c
@systemindex{sb-introspect}@c
@table @strong
@end table



@c ====================================================================
@c Modules
@c ====================================================================
@node Modules, Files, Systems, Top
@chapter Modules
Modules are listed depth-first from the system components tree.

@menu
* The net.didierverna.declt.setup/src module: The net․didierverna․declt․setup/src module.
* The net.didierverna.declt.core/src module: The net․didierverna․declt․core/src module.
* The net.didierverna.declt.core/src/util module: The net․didierverna․declt․core/src/util module.
* The net.didierverna.declt.core/src/doc module: The net․didierverna․declt․core/src/doc module.
* The net.didierverna.declt.extract/src module: The net․didierverna․declt․extract/src module.
@end menu


@c ------------------------------------------
@c The net.didierverna.declt.setup/src module
@c ------------------------------------------
@node The net․didierverna․declt․setup/src module, The net․didierverna․declt․core/src module, Modules, Modules
@section @t{net.didierverna.declt.setup/src}
@anchor{go to the net․didierverna․declt․setup/src module}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․setup/package․lisp file, , @t{package.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․setup system, , @t{net.didierverna.declt.setup}} system
@item Child Components
@itemize @bullet
@item
@ref{go to the net․didierverna․declt․setup/src/configuration․lisp file, , @t{configuration.lisp}} file
@item
@ref{go to the net․didierverna․declt․setup/src/readtable․lisp file, , @t{readtable.lisp}} file
@item
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}} file
@item
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}} file
@end itemize
@end table


@c -----------------------------------------
@c The net.didierverna.declt.core/src module
@c -----------------------------------------
@node The net․didierverna․declt․core/src module, The net․didierverna․declt․core/src/util module, The net․didierverna․declt․setup/src module, Modules
@section @t{net.didierverna.declt.core/src}
@anchor{go to the net․didierverna․declt․core/src module}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․core/package․lisp file, , @t{package.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core system, , @t{net.didierverna.declt.core}} system
@item Child Components
@itemize @bullet
@item
@ref{go to the net․didierverna․declt․core/src/util module, , @t{util}} module
@item
@ref{go to the net․didierverna․declt․core/src/doc module, , @t{doc}} module
@item
@ref{go to the net․didierverna․declt․core/src/declt․lisp file, , @t{declt.lisp}} file
@end itemize
@end table


@c ----------------------------------------------
@c The net.didierverna.declt.core/src/util module
@c ----------------------------------------------
@node The net․didierverna․declt․core/src/util module, The net․didierverna․declt․core/src/doc module, The net․didierverna․declt․core/src module, Modules
@section @t{net.didierverna.declt.core/src/util}
@anchor{go to the net․didierverna․declt․core/src/util module}@c
@moduleindex{util}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src module, , @t{src}} module
@item Child Component
@ref{go to the net․didierverna․declt․core/src/util/misc․lisp file, , @t{misc.lisp}} file
@end table


@c ---------------------------------------------
@c The net.didierverna.declt.core/src/doc module
@c ---------------------------------------------
@node The net․didierverna․declt․core/src/doc module, The net․didierverna․declt․extract/src module, The net․didierverna․declt․core/src/util module, Modules
@section @t{net.didierverna.declt.core/src/doc}
@anchor{go to the net․didierverna․declt․core/src/doc module}@c
@moduleindex{doc}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․core/src/util module, , @t{util}} module
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src module, , @t{src}} module
@item Child Components
@itemize @bullet
@item
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}} file
@item
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}} file
@item
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}} file
@item
@ref{go to the net․didierverna․declt․core/src/doc/package․lisp file, , @t{package.lisp}} file
@item
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}} file
@end itemize
@end table


@c --------------------------------------------
@c The net.didierverna.declt.extract/src module
@c --------------------------------------------
@node The net․didierverna․declt․extract/src module, , The net․didierverna․declt․core/src/doc module, Modules
@section @t{net.didierverna.declt.extract/src}
@anchor{go to the net․didierverna․declt․extract/src module}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․extract/package․lisp file, , @t{package.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract system, , @t{net.didierverna.declt.extract}} system
@item Child Components
@itemize @bullet
@item
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}} file
@item
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}} file
@item
@ref{go to the net․didierverna․declt․extract/src/license․lisp file, , @t{license.lisp}} file
@item
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}} file
@item
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}} file
@item
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}} file
@item
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}} file
@item
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}} file
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Modules, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The net.didierverna.declt/net.didierverna.declt.asd file: The net․didierverna․declt/net․didierverna․declt․asd file.
* The net.didierverna.declt.setup/net.didierverna.declt.setup.asd file: The net․didierverna․declt․setup/net․didierverna․declt․setup․asd file.
* The net.didierverna.declt.core/net.didierverna.declt.core.asd file: The net․didierverna․declt․core/net․didierverna․declt․core․asd file.
* The net.didierverna.declt.extract/net.didierverna.declt.extract.asd file: The net․didierverna․declt․extract/net․didierverna․declt․extract․asd file.
* The net.didierverna.declt.setup/package.lisp file: The net․didierverna․declt․setup/package․lisp file.
* The net.didierverna.declt.setup/src/configuration.lisp file: The net․didierverna․declt․setup/src/configuration․lisp file.
* The net.didierverna.declt.setup/src/readtable.lisp file: The net․didierverna․declt․setup/src/readtable․lisp file.
* The net.didierverna.declt.setup/src/version.lisp file: The net․didierverna․declt․setup/src/version․lisp file.
* The net.didierverna.declt.setup/src/util.lisp file: The net․didierverna․declt․setup/src/util․lisp file.
* The net.didierverna.declt.core/package.lisp file: The net․didierverna․declt․core/package․lisp file.
* The net.didierverna.declt.core/src/util/misc.lisp file: The net․didierverna․declt․core/src/util/misc․lisp file.
* The net.didierverna.declt.core/src/doc/texi.lisp file: The net․didierverna․declt․core/src/doc/texi․lisp file.
* The net.didierverna.declt.core/src/doc/doc.lisp file: The net․didierverna․declt․core/src/doc/doc․lisp file.
* The net.didierverna.declt.core/src/doc/symbol.lisp file: The net․didierverna․declt․core/src/doc/symbol․lisp file.
* The net.didierverna.declt.core/src/doc/package.lisp file: The net․didierverna․declt․core/src/doc/package․lisp file.
* The net.didierverna.declt.core/src/doc/asdf.lisp file: The net․didierverna․declt․core/src/doc/asdf․lisp file.
* The net.didierverna.declt.core/src/declt.lisp file: The net․didierverna․declt․core/src/declt․lisp file.
* The net.didierverna.declt.extract/package.lisp file: The net․didierverna․declt․extract/package․lisp file.
* The net.didierverna.declt.extract/src/util.lisp file: The net․didierverna․declt․extract/src/util․lisp file.
* The net.didierverna.declt.extract/src/definition.lisp file: The net․didierverna․declt․extract/src/definition․lisp file.
* The net.didierverna.declt.extract/src/license.lisp file: The net․didierverna․declt․extract/src/license․lisp file.
* The net.didierverna.declt.extract/src/symbol.lisp file: The net․didierverna․declt․extract/src/symbol․lisp file.
* The net.didierverna.declt.extract/src/package.lisp file: The net․didierverna․declt․extract/src/package․lisp file.
* The net.didierverna.declt.extract/src/asdf.lisp file: The net․didierverna․declt․extract/src/asdf․lisp file.
* The net.didierverna.declt.extract/src/finalize.lisp file: The net․didierverna․declt․extract/src/finalize․lisp file.
* The net.didierverna.declt.extract/src/extract.lisp file: The net․didierverna․declt․extract/src/extract․lisp file.
@end menu

@node The net․didierverna․declt/net․didierverna․declt․asd file, The net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, Lisp files, Lisp files
@subsection @t{net.didierverna.declt/net.didierverna.declt.asd}
@anchor{go to the net․didierverna․declt/net․didierverna․declt․asd file}@c
@fileindex{net.didierverna.declt.asd}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt/net․didierverna․declt․asd file, , @t{net.didierverna.declt.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt system, , @t{net.didierverna.declt}} system
@item ASDF Systems
@ref{go to the net․didierverna․declt system, , @t{net.didierverna.declt}}.
@end table

@node The net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, The net․didierverna․declt․core/net․didierverna․declt․core․asd file, The net․didierverna․declt/net․didierverna․declt․asd file, Lisp files
@subsection @t{net.didierverna.declt.setup/net.didierverna.declt.setup.asd}
@anchor{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file}@c
@fileindex{net.didierverna.declt.setup.asd}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․setup system, , @t{net.didierverna.declt.setup}} system
@item ASDF Systems
@ref{go to the net․didierverna․declt․setup system, , @t{net.didierverna.declt.setup}}.
@end table

@node The net․didierverna․declt․core/net․didierverna․declt․core․asd file, The net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, The net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, Lisp files
@subsection @t{net.didierverna.declt.core/net.didierverna.declt.core.asd}
@anchor{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file}@c
@fileindex{net.didierverna.declt.core.asd}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core system, , @t{net.didierverna.declt.core}} system
@item ASDF Systems
@ref{go to the net․didierverna․declt․core system, , @t{net.didierverna.declt.core}}.
@end table

@node The net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, The net․didierverna․declt․setup/package․lisp file, The net․didierverna․declt․core/net․didierverna․declt․core․asd file, Lisp files
@subsection @t{net.didierverna.declt.extract/net.didierverna.declt.extract.asd}
@anchor{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file}@c
@fileindex{net.didierverna.declt.extract.asd}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract system, , @t{net.didierverna.declt.extract}} system
@item ASDF Systems
@ref{go to the net․didierverna․declt․extract system, , @t{net.didierverna.declt.extract}}.
@end table

@node The net․didierverna․declt․setup/package․lisp file, The net․didierverna․declt․setup/src/configuration․lisp file, The net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, Lisp files
@subsection @t{net.didierverna.declt.setup/package.lisp}
@anchor{go to the net․didierverna․declt․setup/package․lisp file}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․setup system, , @t{net.didierverna.declt.setup}} system
@item Packages
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@end table

@node The net․didierverna․declt․setup/src/configuration․lisp file, The net․didierverna․declt․setup/src/readtable․lisp file, The net․didierverna․declt․setup/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.setup/src/configuration.lisp}
@anchor{go to the net․didierverna․declt․setup/src/configuration․lisp file}@c
@fileindex{configuration.lisp}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․setup/src module, , @t{src}} module
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶CONFIGURATION function, , @t{configuration}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶CONFIGURE function, , @t{configure}} function
@end itemize
@item Internals
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶*CONFIGURATION* special variable, , @t{*configuration*}} special variable
@end table

@node The net․didierverna․declt․setup/src/readtable․lisp file, The net․didierverna․declt․setup/src/version․lisp file, The net․didierverna․declt․setup/src/configuration․lisp file, Lisp files
@subsection @t{net.didierverna.declt.setup/src/readtable.lisp}
@anchor{go to the net․didierverna․declt․setup/src/readtable․lisp file}@c
@fileindex{readtable.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․setup/src/configuration․lisp file, , @t{configuration.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․setup/src module, , @t{src}} module
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶CLINDENT function, , @t{clindent}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶DEFINDENT macro, , @t{defindent}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶I-READER function, , @t{i-reader}} function
@end itemize
@end table

@node The net․didierverna․declt․setup/src/version․lisp file, The net․didierverna․declt․setup/src/util․lisp file, The net․didierverna․declt․setup/src/readtable․lisp file, Lisp files
@subsection @t{net.didierverna.declt.setup/src/version.lisp}
@anchor{go to the net․didierverna․declt․setup/src/version․lisp file}@c
@fileindex{version.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․setup/src/readtable․lisp file, , @t{readtable.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․setup/src module, , @t{src}} module
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*COPYRIGHT-YEARS* special variable, , @t{*copyright-years*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-MAJOR-LEVEL* special variable, , @t{*release-major-level*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-MINOR-LEVEL* special variable, , @t{*release-minor-level*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-NAME* special variable, , @t{*release-name*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-STATUS* special variable, , @t{*release-status*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-STATUS-LEVEL* special variable, , @t{*release-status-level*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶VERSION function, , @t{version}} function
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶%VERSION function, , @t{%version}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶RELEASE-STATUS-NUMBER function, , @t{release-status-number}} function
@end itemize
@end table

@node The net․didierverna․declt․setup/src/util․lisp file, The net․didierverna․declt․core/package․lisp file, The net․didierverna․declt․setup/src/version․lisp file, Lisp files
@subsection @t{net.didierverna.declt.setup/src/util.lisp}
@anchor{go to the net․didierverna․declt․setup/src/util․lisp file}@c
@fileindex{util.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․setup/src/readtable․lisp file, , @t{readtable.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․setup/src module, , @t{src}} module
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS class, , @t{abstract-class}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶DECLARE-VALID-SUPERCLASS macro, , @t{declare-valid-superclass}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶DEFABSTRACT macro, , @t{defabstract}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶ENDPUSH macro, , @t{endpush}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶FIND* function, , @t{find*}} function
@item
@ref{go to the COMMON-LISP∶MAKE-INSTANCE ❨NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS❩ method, , @t{make-instance}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶NON-EMPTY-STRING type, , @t{non-empty-string}} type
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶NON-EMPTY-STRING-P function, , @t{non-empty-string-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶RETAIN function, , @t{retain}} function
@item
@ref{go to the SB-MOP∶VALIDATE-SUPERCLASS ❨COMMON-LISP∶STANDARD-CLASS NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS❩ method, , @t{validate-superclass}} method
@item
@ref{go to the SB-MOP∶VALIDATE-SUPERCLASS ❨NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS COMMON-LISP∶STANDARD-CLASS❩ method, , @t{validate-superclass}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHEN-LET macro, , @t{when-let}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHEN-LET* macro, , @t{when-let*}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHILE macro, , @t{while}} macro
@end itemize
@end table

@node The net․didierverna․declt․core/package․lisp file, The net․didierverna․declt․core/src/util/misc․lisp file, The net․didierverna․declt․setup/src/util․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/package.lisp}
@anchor{go to the net․didierverna․declt․core/package․lisp file}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core system, , @t{net.didierverna.declt.core}} system
@item Packages
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Public Interface
@ref{go to the NET․DIDIERVERNA․DECLT∶NICKNAME-PACKAGE function, , @t{nickname-package}} function
@end table

@node The net․didierverna․declt․core/src/util/misc․lisp file, The net․didierverna․declt․core/src/doc/texi․lisp file, The net․didierverna․declt․core/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/util/misc.lisp}
@anchor{go to the net․didierverna․declt․core/src/util/misc․lisp file}@c
@fileindex{misc.lisp}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src/util module, , @t{util}} module
@item Internals
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CURRENT-TIME-STRING function, , @t{current-time-string}} function
@end table

@node The net․didierverna․declt․core/src/doc/texi․lisp file, The net․didierverna․declt․core/src/doc/doc․lisp file, The net․didierverna․declt․core/src/util/misc․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/texi.lisp}
@anchor{go to the net․didierverna․declt․core/src/doc/texi․lisp file}@c
@fileindex{texi.lisp}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src/doc module, , @t{doc}} module
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*FRAGILE-CHARACTERS* special variable, , @t{*fragile-characters*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*SECTION-NAMES* special variable, , @t{*section-names*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*SPECIAL-CHARACTERS* special variable, , @t{*special-characters*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ANCHOR function, , @t{@atchar{}anchor}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFCOMBINATION macro, , @t{@atchar{}defcombination}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFFN macro, , @t{@atchar{}deffn}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFFNX function, , @t{@atchar{}deffnx}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFMETHOD macro, , @t{@atchar{}defmethod}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFMETHODX function, , @t{@atchar{}defmethodx}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFTP macro, , @t{@atchar{}deftp}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFTYPE macro, , @t{@atchar{}deftype}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFVR macro, , @t{@atchar{}defvr}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEM macro, , @t{@atchar{}item}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEMIZE macro, , @t{@atchar{}itemize}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEMIZE-LIST function, , @t{@atchar{}itemize-list}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}MULTITABLE macro, , @t{@atchar{}multitable}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}REF function, , @t{@atchar{}ref}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}TABLE macro, , @t{@atchar{}table}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}TABLEITEM macro, , @t{@atchar{}tableitem}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CHILD function, , @t{add-child}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶COPY-NODE function, , @t{copy-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE function, , @t{escape}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-ANCHOR function, , @t{escape-anchor}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-LABEL function, , @t{escape-label}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-LAMBDA-LIST function, , @t{escape-lambda-list}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶FIRST-WORD-LENGTH function, , @t{first-word-length}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MAKE-NODE function, , @t{make-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE structure, , @t{node}} structure
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-AFTER-MENU-CONTENTS reader, , @t{node-after-menu-contents}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-AFTER-MENU-CONTENTS❩ writer, , @t{(setf node-after-menu-contents)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-BEFORE-MENU-CONTENTS reader, , @t{node-before-menu-contents}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-BEFORE-MENU-CONTENTS❩ writer, , @t{(setf node-before-menu-contents)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-CHILDREN reader, , @t{node-children}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-CHILDREN❩ writer, , @t{(setf node-children)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-NAME reader, , @t{node-name}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-NAME❩ writer, , @t{(setf node-name)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-NEXT reader, , @t{node-next}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-NEXT❩ writer, , @t{(setf node-next)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-P function, , @t{node-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-PREVIOUS reader, , @t{node-previous}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-PREVIOUS❩ writer, , @t{(setf node-previous)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-NAME reader, , @t{node-section-name}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-NAME❩ writer, , @t{(setf node-section-name)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-TYPE reader, , @t{node-section-type}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-TYPE❩ writer, , @t{(setf node-section-type)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SYNOPSIS reader, , @t{node-synopsis}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SYNOPSIS❩ writer, , @t{(setf node-synopsis)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-UP reader, , @t{node-up}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-UP❩ writer, , @t{(setf node-up)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶READ-NEXT-LINE function, , @t{read-next-line}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-NODE function, , @t{render-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TEXT function, , @t{render-text}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TO-STRING macro, , @t{render-to-string}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TOP-NODE function, , @t{render-top-node}} function
@end itemize
@end table

@node The net․didierverna․declt․core/src/doc/doc․lisp file, The net․didierverna․declt․core/src/doc/symbol․lisp file, The net․didierverna․declt․core/src/doc/texi․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/doc.lisp}
@anchor{go to the net․didierverna․declt․core/src/doc/doc․lisp file}@c
@fileindex{doc.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src/doc module, , @t{doc}} module
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*BLANKS* special variable, , @t{*blanks*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR function, , @t{anchor}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR-AND-INDEX function, , @t{anchor-and-index}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR-NAME function, , @t{anchor-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME generic function, , @t{category-name}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CONTEXT class, , @t{context}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT generic function, , @t{document}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶HYPERLINKS ❨NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ reader method, , @t{hyperlinks}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶HYPERLINKS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ writer method, , @t{(setf hyperlinks)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX function, , @t{index}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME generic function, , @t{index-command-name}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶LONG-TITLE function, , @t{long-title}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MAKE-CONTEXT function, , @t{make-context}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶REFERENCE function, , @t{reference}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DOCSTRING function, , @t{render-docstring}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-REFERENCES function, , @t{render-references}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶REVEAL function, , @t{reveal}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME generic function, , @t{safe-name}} generic function
@end itemize
@end table

@node The net․didierverna․declt․core/src/doc/symbol․lisp file, The net․didierverna․declt․core/src/doc/package․lisp file, The net․didierverna․declt․core/src/doc/doc․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/symbol.lisp}
@anchor{go to the net․didierverna․declt․core/src/doc/symbol․lisp file}@c
@fileindex{symbol.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src/doc module, , @t{doc}} module
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*CATEGORIES* special variable, , @t{*categories*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CATEGORIES-NODE function, , @t{add-categories-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CATEGORY-NODE function, , @t{add-category-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-DEFINITIONS-NODE function, , @t{add-definitions-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-ACCESSORS-P function, , @t{merge-accessors-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-EXPANDER-P function, , @t{merge-expander-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-GENERIC-ACCESSORS-P function, , @t{merge-generic-accessors-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-METHODS function, , @t{merge-methods}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶QUALIFIERS function, , @t{qualifiers}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-CLOS-CLASSOID macro, , @t{render-clos-classoid}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEFINITION-CORE function, , @t{render-definition-core}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-FUNCOID macro, , @t{render-funcoid}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-HEADLINE function, , @t{render-headline}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-INITARGS function, , @t{render-initargs}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-METHOD macro, , @t{render-method}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-METHOD-COMBINATION function, , @t{render-method-combination}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-VAROID macro, , @t{render-varoid}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-LAMBDA-LIST function, , @t{safe-lambda-list}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method, , @t{safe-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method, , @t{safe-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN❩ method, , @t{safe-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ method, , @t{safe-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-SPECIALIZERS function, , @t{safe-specializers}} function
@end itemize
@end table

@node The net․didierverna․declt․core/src/doc/package․lisp file, The net․didierverna․declt․core/src/doc/asdf․lisp file, The net․didierverna․declt․core/src/doc/symbol․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/package.lisp}
@anchor{go to the net․didierverna․declt․core/src/doc/package․lisp file}@c
@fileindex{package.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src/doc module, , @t{doc}} module
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-PACKAGES-NODE function, , @t{add-packages-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{index-command-name}} method
@end itemize
@end table

@node The net․didierverna․declt․core/src/doc/asdf․lisp file, The net․didierverna․declt․core/src/declt․lisp file, The net․didierverna․declt․core/src/doc/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/asdf.lisp}
@anchor{go to the net․didierverna․declt․core/src/doc/asdf․lisp file}@c
@fileindex{asdf.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․core/src/doc/package․lisp file, , @t{package.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src/doc module, , @t{doc}} module
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-FILES-NODE function, , @t{add-files-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-MODULES-NODE function, , @t{add-modules-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-SYSTEMS-NODE function, , @t{add-systems-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method, , @t{category-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶FILE-NODE function, , @t{file-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method, , @t{index-command-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEPENDENCIES function, , @t{render-dependencies}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEPENDENCY function, , @t{render-dependency}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-PATHNAME function, , @t{render-pathname}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method, , @t{safe-name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method, , @t{safe-name}} method
@end itemize
@end table

@node The net․didierverna․declt․core/src/declt․lisp file, The net․didierverna․declt․extract/package․lisp file, The net․didierverna․declt․core/src/doc/asdf․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/declt.lisp}
@anchor{go to the net․didierverna․declt․core/src/declt․lisp file}@c
@fileindex{declt.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․core/src/doc module, , @t{doc}} module
@item Source
@ref{go to the net․didierverna․declt․core/net․didierverna․declt․core․asd file, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․core/src module, , @t{src}} module
@item Public Interface
@ref{go to the NET․DIDIERVERNA․DECLT∶DECLT function, , @t{declt}} function
@item Internals
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-HEADER function, , @t{render-header}} function
@end table

@node The net․didierverna․declt․extract/package․lisp file, The net․didierverna․declt․extract/src/util․lisp file, The net․didierverna․declt․core/src/declt․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/package.lisp}
@anchor{go to the net․didierverna․declt․extract/package․lisp file}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract system, , @t{net.didierverna.declt.extract}} system
@item Packages
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@end table

@node The net․didierverna․declt․extract/src/util․lisp file, The net․didierverna․declt․extract/src/definition․lisp file, The net․didierverna․declt․extract/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/src/util.lisp}
@anchor{go to the net․didierverna․declt․extract/src/util․lisp file}@c
@fileindex{util.lisp}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT-SOURCE-PATHNAME function, , @t{object-source-pathname}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶ONE-LINER-P function, , @t{one-liner-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶parse-contact❨s❩ function, , @t{parse-contact(s)}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PARSE-CONTACT-STRING function, , @t{parse-contact-string}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶REORDER-DEPENDENCY-DEF function, , @t{reorder-dependency-def}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶REORDERED-DEPENDENCY-DEF-SYSTEM function, , @t{reordered-dependency-def-system}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶VALIDATE-EMAIL function, , @t{validate-email}} function
@end itemize
@end table

@node The net․didierverna․declt․extract/src/definition․lisp file, The net․didierverna․declt․extract/src/license․lisp file, The net․didierverna․declt․extract/src/util․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/src/definition.lisp}
@anchor{go to the net․didierverna․declt․extract/src/definition․lisp file}@c
@fileindex{definition.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING generic function, , @t{docstring}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FOREIGNP ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{foreignp}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME generic function, , @t{name}} generic function
@item
@ref{go to the COMMON-LISP∶PRINT-OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION COMMON-LISP∶T❩ method, , @t{print-object}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS generic function, , @t{private-definitions}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS generic function, , @t{public-definitions}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{source-file}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ writer method, , @t{(setf source-file)}} writer method
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FIND-DEFINITION function, , @t{find-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{object}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME generic function, , @t{source-pathname}} generic function
@end itemize
@end table

@node The net․didierverna․declt․extract/src/license․lisp file, The net․didierverna․declt․extract/src/symbol․lisp file, The net․didierverna․declt․extract/src/definition․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/src/license.lisp}
@anchor{go to the net․didierverna․declt․extract/src/license․lisp file}@c
@fileindex{license.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@item Internals
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶*LICENSES* special variable, , @t{*licenses*}} special variable
@end table

@node The net․didierverna․declt․extract/src/symbol․lisp file, The net․didierverna․declt․extract/src/package․lisp file, The net․didierverna․declt․extract/src/license․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/src/symbol.lisp}
@anchor{go to the net․didierverna․declt․extract/src/symbol․lisp file}@c
@fileindex{symbol.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․extract/src/license․lisp file, , @t{license.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class, , @t{accessor-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ALLOCATION function, , @t{allocation}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ reader method, , @t{clients}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ writer method, , @t{(setf clients)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION class, , @t{clos-slot-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ reader method, , @t{combination}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{combination}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method, , @t{(setf combination)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-OPTIONS function, , @t{combination-options}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class, , @t{compiler-macro-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION class, , @t{constant-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-METHOD ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{definition-method}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-SYMBOL ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ reader method, , @t{definition-symbol}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-DEFAULT-INITARGS function, , @t{direct-default-initargs}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-methods}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-methods)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ reader method, , @t{direct-slots}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ writer method, , @t{(setf direct-slots)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{direct-subclasses}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method, , @t{(setf direct-subclasses)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-subclassoids}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-subclassoids)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{direct-subconditions}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method, , @t{(setf direct-subconditions)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ reader method, , @t{direct-substructures}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method, , @t{(setf direct-substructures)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{direct-superclasses}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method, , @t{(setf direct-superclasses)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-superclassoids}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-superclassoids)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{direct-superconditions}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method, , @t{(setf direct-superconditions)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ reader method, , @t{direct-superstructures}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method, , @t{(setf direct-superstructures)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ reader method, , @t{element-type}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method, , @t{(setf element-type)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ reader method, , @t{expander-for}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method, , @t{(setf expander-for)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ reader method, , @t{expanders-to}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method, , @t{(setf expanders-to)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION class, , @t{function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION class, , @t{generic-reader-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION class, , @t{generic-setf-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION class, , @t{generic-setf-writer-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN class, , @t{generic-writer-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ reader method, , @t{home-package}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ writer method, , @t{(setf home-package)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶IDENTITY-WITH-ONE-ARGUMENT function, , @t{identity-with-one-argument}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INITARGS function, , @t{initargs}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INITFORM function, , @t{initform}} function
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method, , @t{initialize-instance}} method
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ method, , @t{initialize-instance}} method
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ method, , @t{initialize-instance}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST generic function, , @t{lambda-list}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-COMBINATION-DEFINITION class, , @t{long-combination-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION class, , @t{long-expander-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class, , @t{macro-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{methods}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method, , @t{(setf methods)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN❩ method, , @t{name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ method, , @t{name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION class, , @t{ordinary-function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{owner}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{owner}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLICP function, , @t{publicp}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION class, , @t{reader-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION class, , @t{reader-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{readers}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶READERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method, , @t{(setf readers)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION class, , @t{setf-compiler-macro-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-FUNCTION-DEFINITION class, , @t{setf-function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-METHOD-DEFINITION class, , @t{setf-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-WRITER-METHOD-DEFINITION class, , @t{setf-writer-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION class, , @t{short-combination-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class, , @t{short-expander-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION class, , @t{simple-function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION class, , @t{simple-generic-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-WRITER-DEFINITION class, , @t{simple-generic-writer-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-METHOD-DEFINITION class, , @t{simple-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-WRITER-METHOD-DEFINITION class, , @t{simple-writer-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION class, , @t{special-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{specializers}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ writer method, , @t{(setf specializers)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ reader method, , @t{standalone-combinator}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ writer method, , @t{(setf standalone-combinator)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ reader method, , @t{standalone-reader}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ writer method, , @t{(setf standalone-reader)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ reader method, , @t{standalone-writer}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ writer method, , @t{(setf standalone-writer)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class, , @t{structure-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ reader method, , @t{structure-type}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method, , @t{(setf structure-type)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION class, , @t{symbol-macro-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN❩ reader method, , @t{target-slot}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION class, , @t{typed-structure-slot-definition}} class
@item
@ref{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ∶AFTER ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION❩ method, , @t{update-instance-for-different-class}} method
@item
@ref{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ∶AFTER ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION❩ method, , @t{update-instance-for-different-class}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VALUE-TYPE generic function, , @t{value-type}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION class, , @t{variable-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION class, , @t{varoid-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION class, , @t{writer-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{writers}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method, , @t{(setf writers)}} writer method
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶CLASSOID ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ reader method, , @t{classoid}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CLASS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{definition-class}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-COMPILER-MACRO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ reader method, , @t{definition-compiler-macro}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CONDITION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{definition-condition}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-FUNCTION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION❩ reader method, , @t{definition-function}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-SOURCE-BY-NAME function, , @t{definition-source-by-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-STRUCTURE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ reader method, , @t{definition-structure}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ reader method, , @t{expander}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ reader method, , @t{expander}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FUNCOID ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION❩ reader method, , @t{funcoid}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶GENERIC ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{generic}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MACRO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ reader method, , @t{macro}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CLASSOID-DEFINITION function, , @t{make-classoid-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CLOS-SLOT-DEFINITION function, , @t{make-clos-slot-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMBINATION-DEFINITION function, , @t{make-combination-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMPILER-MACRO-DEFINITION function, , @t{make-compiler-macro-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CONSTANT-DEFINITION function, , @t{make-constant-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-EXPANDER-DEFINITION function, , @t{make-expander-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FUNCTION-DEFINITION function, , @t{make-function-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-MACRO-DEFINITION function, , @t{make-macro-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-METHOD-DEFINITION function, , @t{make-method-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SPECIAL-DEFINITION function, , @t{make-special-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYMBOL-MACRO-DEFINITION function, , @t{make-symbol-macro-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-TYPE-DEFINITION function, , @t{make-type-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-TYPED-STRUCTURE-SLOT-DEFINITION function, , @t{make-typed-structure-slot-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶METHOD-NAME function, , @t{method-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶READER-METHOD-DEFINITION-P function, , @t{reader-method-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SHORT-EXPANDER-DEFINITION-P function, , @t{short-expander-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SLOT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{slot}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method, , @t{source-pathname}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{source-pathname}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method, , @t{source-pathname}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method, , @t{source-pathname}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method, , @t{source-pathname}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYMBOL-DEFINITION-P function, , @t{symbol-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶WRITER-METHOD-DEFINITION-P function, , @t{writer-method-definition-p}} function
@end itemize
@end table

@node The net․didierverna․declt․extract/src/package․lisp file, The net․didierverna․declt․extract/src/asdf․lisp file, The net․didierverna․declt․extract/src/symbol․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/src/package.lisp}
@anchor{go to the net․didierverna․declt․extract/src/package․lisp file}@c
@fileindex{package.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{definitions}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf definitions)}} writer method
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{initialize-instance}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NICKNAMES function, , @t{nicknames}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION-P function, , @t{package-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{private-definitions}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{public-definitions}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{use-list}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf use-list)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{used-by-list}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf used-by-list)}} writer method
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-PACKAGE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{definition-package}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{external-symbols}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf external-symbols)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{internal-symbols}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf internal-symbols)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-PACKAGE-DEFINITION function, , @t{make-package-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-EXTERNAL-SYMBOLS function, , @t{package-external-symbols}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-INTERNAL-SYMBOLS function, , @t{package-internal-symbols}} function
@end itemize
@end table

@node The net․didierverna․declt․extract/src/asdf․lisp file, The net․didierverna․declt․extract/src/finalize․lisp file, The net․didierverna․declt․extract/src/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/src/asdf.lisp}
@anchor{go to the net․didierverna․declt․extract/src/asdf․lisp file}@c
@fileindex{asdf.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{author-emails}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf author-emails)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{author-names}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf author-names)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶BUG-TRACKER function, , @t{bug-tracker}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶C-FILE-DEFINITION class, , @t{c-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ reader method, , @t{children}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ writer method, , @t{(setf children)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CL-SOURCE-FILE․ASD class, , @t{cl-source-file.asd}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{component}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-VERSION function, , @t{definition-version}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ reader method, , @t{definitions}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ writer method, , @t{(setf definitions)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{defsystem-dependencies}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf defsystem-dependencies)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{dependencies}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method, , @t{(setf dependencies)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DESCRIPTION function, , @t{description}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOC-FILE-DEFINITION class, , @t{doc-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method, , @t{docstring}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ reader method, , @t{file}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class, , @t{file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION-P function, , @t{file-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOMEPAGE function, , @t{homepage}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HTML-FILE-DEFINITION class, , @t{html-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶IF-FEATURE function, , @t{if-feature}} function
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-FILE-DEFINITION❩ method, , @t{initialize-instance}} method
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method, , @t{initialize-instance}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶JAVA-FILE-DEFINITION class, , @t{java-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE-NAME function, , @t{license-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class, , @t{lisp-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-DESCRIPTION function, , @t{long-description}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-NAME function, , @t{long-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAILTO function, , @t{mailto}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{maintainer-emails}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf maintainer-emails)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{maintainer-names}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf maintainer-names)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION-P function, , @t{module-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method, , @t{name}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{parent}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method, , @t{(setf parent)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-CONTROL function, , @t{source-control}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE-DEFINITION class, , @t{source-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STATIC-FILE-DEFINITION class, , @t{static-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION-P function, , @t{system-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-FILE-DEFINITION class, , @t{system-file-definition}} class
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶COMPONENT-DEFINITION-P function, , @t{component-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶LISP-FILE-DEFINITION-P function, , @t{lisp-file-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FILE-DEFINITION function, , @t{make-file-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-MODULE-DEFINITION function, , @t{make-module-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-DEFINITION function, , @t{make-system-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-FILE-DEFINITION function, , @t{make-system-file-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-FILE-DEFINITIONS function, , @t{make-system-file-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ reader method, , @t{module}} reader method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method, , @t{source-pathname}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{system}} reader method
@end itemize
@end table

@node The net․didierverna․declt․extract/src/finalize․lisp file, The net․didierverna․declt․extract/src/extract․lisp file, The net․didierverna․declt․extract/src/asdf․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/src/finalize.lisp}
@anchor{go to the net․didierverna․declt․extract/src/finalize․lisp file}@c
@fileindex{finalize.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶*FINALIZED* special variable, , @t{*finalized*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE generic function, , @t{finalize}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE-CLOS-CLASSOID-SLOT function, , @t{finalize-clos-classoid-slot}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE-CLOS-STRUCTURE-SLOT function, , @t{finalize-clos-structure-slot}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FOREIGN-FUNCOID-DEFINITION function, , @t{foreign-funcoid-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMPONENT-DEFINITION function, , @t{make-component-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FOREIGN-FUNCOID-DEFINITION function, , @t{make-foreign-funcoid-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-GENERIC-DEFINITION function, , @t{make-generic-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶RESOLVE-DEPENDENCY-SPECIFICATION function, , @t{resolve-dependency-specification}} function
@end itemize
@end table

@node The net․didierverna․declt․extract/src/extract․lisp file, , The net․didierverna․declt․extract/src/finalize․lisp file, Lisp files
@subsection @t{net.didierverna.declt.extract/src/extract.lisp}
@anchor{go to the net․didierverna․declt․extract/src/extract․lisp file}@c
@fileindex{extract.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}} file
@item Source
@ref{go to the net․didierverna․declt․extract/net․didierverna․declt․extract․asd file, , @t{net.didierverna.declt.extract.asd}}.
@item Parent Component
@ref{go to the net․didierverna․declt․extract/src module, , @t{src}} module
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{conclusion}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf conclusion)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{contact-emails}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf contact-emails)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{contact-names}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf contact-names)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{copyright-years}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf copyright-years)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{definitions}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf definitions)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT function, , @t{extract}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{introduction}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf introduction)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{library-name}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf library-name)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{library-version}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf library-version)}} writer method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{license}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf license)}} writer method
@item
@ref{go to the COMMON-LISP∶PRINT-OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT COMMON-LISP∶T❩ method, , @t{print-object}} method
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{tagline}} reader method
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf tagline)}} writer method
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶COMPONENTS function, , @t{components}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FILE-COMPONENTS function, , @t{file-components}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶LOAD-SYSTEM function, , @t{load-system}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-FILE-DEFINITIONS function, , @t{make-all-file-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-MODULE-DEFINITIONS function, , @t{make-all-module-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-PACKAGE-DEFINITIONS function, , @t{make-all-package-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-SYMBOL-DEFINITIONS function, , @t{make-all-symbol-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-SYSTEM-DEFINITIONS function, , @t{make-all-system-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-EXTRACT function, , @t{make-extract}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYMBOL-DEFINITIONS function, , @t{make-symbol-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE-COMPONENTS function, , @t{module-components}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-SYMBOLS function, , @t{package-symbols}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUB-COMPONENT-P function, , @t{sub-component-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUBSYSTEM function, , @t{subsystem}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUBSYSTEMS function, , @t{subsystems}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM-DEPENDENCIES function, , @t{system-dependencies}} function
@end itemize
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The net.didierverna.declt.setup package: The net․didierverna․declt․setup package.
* The net.didierverna.declt.extract package: The net․didierverna․declt․extract package.
* The net.didierverna.declt package: The net․didierverna․declt package.
* The common-lisp package::
* The sb-mop package::
* The asdf/lisp-action package::
@end menu


@c ---------------------------------------
@c The net.didierverna.declt.setup package
@c ---------------------------------------
@node The net․didierverna․declt․setup package, The net․didierverna․declt․extract package, Packages, Packages
@section @t{net.didierverna.declt.setup}
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP package}@c
@packageindex{net.didierverna.declt.setup}@c
The Declt setup library's package.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․setup/package․lisp file, , @t{package.lisp}}.
@item Use List
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Used By List
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@end itemize
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*COPYRIGHT-YEARS* special variable, , @t{*copyright-years*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-MAJOR-LEVEL* special variable, , @t{*release-major-level*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-MINOR-LEVEL* special variable, , @t{*release-minor-level*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-NAME* special variable, , @t{*release-name*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-STATUS* special variable, , @t{*release-status*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-STATUS-LEVEL* special variable, , @t{*release-status-level*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS class, , @t{abstract-class}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶CONFIGURATION function, , @t{configuration}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶CONFIGURE function, , @t{configure}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶DECLARE-VALID-SUPERCLASS macro, , @t{declare-valid-superclass}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶DEFABSTRACT macro, , @t{defabstract}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶ENDPUSH macro, , @t{endpush}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶FIND* function, , @t{find*}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶NON-EMPTY-STRING type, , @t{non-empty-string}} type
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶NON-EMPTY-STRING-P function, , @t{non-empty-string-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶RETAIN function, , @t{retain}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶VERSION function, , @t{version}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHEN-LET macro, , @t{when-let}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHEN-LET* macro, , @t{when-let*}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHILE macro, , @t{while}} macro
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶%VERSION function, , @t{%version}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶*CONFIGURATION* special variable, , @t{*configuration*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶CLINDENT function, , @t{clindent}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶DEFINDENT macro, , @t{defindent}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶I-READER function, , @t{i-reader}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶RELEASE-STATUS-NUMBER function, , @t{release-status-number}} function
@end itemize
@end table


@c -----------------------------------------
@c The net.didierverna.declt.extract package
@c -----------------------------------------
@node The net․didierverna․declt․extract package, The net․didierverna․declt package, The net․didierverna․declt․setup package, Packages
@section @t{net.didierverna.declt.extract}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT package}@c
@packageindex{net.didierverna.declt.extract}@c
The Declt extract library's package.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/package․lisp file, , @t{package.lisp}}.
@item Use List
@itemize @bullet
@item
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@end itemize
@item Used By List
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class, , @t{accessor-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ALLOCATION function, , @t{allocation}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS generic reader, , @t{author-emails}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS❩ generic writer, , @t{(setf author-emails)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES generic reader, , @t{author-names}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES❩ generic writer, , @t{(setf author-names)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶BUG-TRACKER function, , @t{bug-tracker}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶C-FILE-DEFINITION class, , @t{c-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN generic reader, , @t{children}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN❩ generic writer, , @t{(setf children)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN slot, , @t{children}} slot
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CL-SOURCE-FILE․ASD class, , @t{cl-source-file.asd}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS generic reader, , @t{clients}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS❩ generic writer, , @t{(setf clients)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION class, , @t{clos-slot-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION generic reader, , @t{combination}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION❩ generic writer, , @t{(setf combination)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-OPTIONS function, , @t{combination-options}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class, , @t{compiler-macro-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT generic reader, , @t{component}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION generic reader, , @t{conclusion}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION❩ generic writer, , @t{(setf conclusion)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION class, , @t{constant-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS generic reader, , @t{contact-emails}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS❩ generic writer, , @t{(setf contact-emails)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES generic reader, , @t{contact-names}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES❩ generic writer, , @t{(setf contact-names)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS generic reader, , @t{copyright-years}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS❩ generic writer, , @t{(setf copyright-years)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-METHOD generic reader, , @t{definition-method}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-SYMBOL generic reader, , @t{definition-symbol}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-VERSION function, , @t{definition-version}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS generic reader, , @t{definitions}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ generic writer, , @t{(setf definitions)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES generic reader, , @t{defsystem-dependencies}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES❩ generic writer, , @t{(setf defsystem-dependencies)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES generic reader, , @t{dependencies}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES❩ generic writer, , @t{(setf dependencies)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DESCRIPTION function, , @t{description}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-DEFAULT-INITARGS function, , @t{direct-default-initargs}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS generic reader, , @t{direct-methods}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS❩ generic writer, , @t{(setf direct-methods)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS generic reader, , @t{direct-slots}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS❩ generic writer, , @t{(setf direct-slots)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES generic reader, , @t{direct-subclasses}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES❩ generic writer, , @t{(setf direct-subclasses)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS generic reader, , @t{direct-subclassoids}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS❩ generic writer, , @t{(setf direct-subclassoids)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS generic reader, , @t{direct-subconditions}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS❩ generic writer, , @t{(setf direct-subconditions)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES generic reader, , @t{direct-substructures}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES❩ generic writer, , @t{(setf direct-substructures)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES generic reader, , @t{direct-superclasses}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES❩ generic writer, , @t{(setf direct-superclasses)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS generic reader, , @t{direct-superclassoids}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS❩ generic writer, , @t{(setf direct-superclassoids)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS generic reader, , @t{direct-superconditions}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS❩ generic writer, , @t{(setf direct-superconditions)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES generic reader, , @t{direct-superstructures}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES❩ generic writer, , @t{(setf direct-superstructures)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOC-FILE-DEFINITION class, , @t{doc-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING generic function, , @t{docstring}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE generic reader, , @t{element-type}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE❩ generic writer, , @t{(setf element-type)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR generic reader, , @t{expander-for}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR❩ generic writer, , @t{(setf expander-for)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO generic reader, , @t{expanders-to}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO❩ generic writer, , @t{(setf expanders-to)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT function, , @t{extract}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE generic reader, , @t{file}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class, , @t{file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION-P function, , @t{file-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FOREIGNP generic reader, , @t{foreignp}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION class, , @t{function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION class, , @t{generic-reader-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION class, , @t{generic-setf-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION class, , @t{generic-setf-writer-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN class, , @t{generic-writer-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE generic reader, , @t{home-package}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE❩ generic writer, , @t{(setf home-package)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOMEPAGE function, , @t{homepage}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HTML-FILE-DEFINITION class, , @t{html-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶IDENTITY-WITH-ONE-ARGUMENT function, , @t{identity-with-one-argument}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶IF-FEATURE function, , @t{if-feature}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INITARGS function, , @t{initargs}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INITFORM function, , @t{initform}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION generic reader, , @t{introduction}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION❩ generic writer, , @t{(setf introduction)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶JAVA-FILE-DEFINITION class, , @t{java-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST generic function, , @t{lambda-list}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME generic reader, , @t{library-name}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME❩ generic writer, , @t{(setf library-name)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION generic reader, , @t{library-version}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION❩ generic writer, , @t{(setf library-version)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE generic reader, , @t{license}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE❩ generic writer, , @t{(setf license)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE-NAME function, , @t{license-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class, , @t{lisp-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-COMBINATION-DEFINITION class, , @t{long-combination-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-DESCRIPTION function, , @t{long-description}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION class, , @t{long-expander-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-NAME function, , @t{long-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class, , @t{macro-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAILTO function, , @t{mailto}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS generic reader, , @t{maintainer-emails}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS❩ generic writer, , @t{(setf maintainer-emails)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES generic reader, , @t{maintainer-names}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES❩ generic writer, , @t{(setf maintainer-names)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS generic reader, , @t{methods}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS❩ generic writer, , @t{(setf methods)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION-P function, , @t{module-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME generic function, , @t{name}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT․EXTRACT∶NAME slot, , @t{name}} slot
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NICKNAMES function, , @t{nicknames}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION class, , @t{ordinary-function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER generic reader, , @t{owner}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION-P function, , @t{package-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT generic reader, , @t{parent}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT❩ generic writer, , @t{(setf parent)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS generic function, , @t{private-definitions}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS generic function, , @t{public-definitions}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLICP function, , @t{publicp}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION class, , @t{reader-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION class, , @t{reader-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READERS generic reader, , @t{readers}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶READERS❩ generic writer, , @t{(setf readers)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION class, , @t{setf-compiler-macro-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-FUNCTION-DEFINITION class, , @t{setf-function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-METHOD-DEFINITION class, , @t{setf-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-WRITER-METHOD-DEFINITION class, , @t{setf-writer-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION class, , @t{short-combination-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class, , @t{short-expander-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION class, , @t{simple-function-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION class, , @t{simple-generic-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-WRITER-DEFINITION class, , @t{simple-generic-writer-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-METHOD-DEFINITION class, , @t{simple-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-WRITER-METHOD-DEFINITION class, , @t{simple-writer-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-CONTROL function, , @t{source-control}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE generic reader, , @t{source-file}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE❩ generic writer, , @t{(setf source-file)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE-DEFINITION class, , @t{source-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION class, , @t{special-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS generic reader, , @t{specializers}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS❩ generic writer, , @t{(setf specializers)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR generic reader, , @t{standalone-combinator}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR❩ generic writer, , @t{(setf standalone-combinator)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER generic reader, , @t{standalone-reader}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER❩ generic writer, , @t{(setf standalone-reader)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER generic reader, , @t{standalone-writer}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER❩ generic writer, , @t{(setf standalone-writer)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STATIC-FILE-DEFINITION class, , @t{static-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class, , @t{structure-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE generic reader, , @t{structure-type}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE❩ generic writer, , @t{(setf structure-type)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION class, , @t{symbol-macro-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION-P function, , @t{system-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-FILE-DEFINITION class, , @t{system-file-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE generic reader, , @t{tagline}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE❩ generic writer, , @t{(setf tagline)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT generic reader, , @t{target-slot}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION class, , @t{typed-structure-slot-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST generic reader, , @t{use-list}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST❩ generic writer, , @t{(setf use-list)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST generic reader, , @t{used-by-list}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST❩ generic writer, , @t{(setf used-by-list)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VALUE-TYPE generic function, , @t{value-type}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION class, , @t{variable-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION class, , @t{varoid-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION class, , @t{writer-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS generic reader, , @t{writers}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS❩ generic writer, , @t{(setf writers)}} generic writer
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶*FINALIZED* special variable, , @t{*finalized*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶*LICENSES* special variable, , @t{*licenses*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶CLASSOID generic reader, , @t{classoid}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶COMPONENT-DEFINITION-P function, , @t{component-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶COMPONENTS function, , @t{components}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CLASS generic reader, , @t{definition-class}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-COMPILER-MACRO generic reader, , @t{definition-compiler-macro}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CONDITION generic reader, , @t{definition-condition}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-FUNCTION generic reader, , @t{definition-function}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-PACKAGE generic reader, , @t{definition-package}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-SOURCE-BY-NAME function, , @t{definition-source-by-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-STRUCTURE generic reader, , @t{definition-structure}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER generic reader, , @t{expander}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS generic reader, , @t{external-symbols}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS❩ generic writer, , @t{(setf external-symbols)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FILE-COMPONENTS function, , @t{file-components}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE generic function, , @t{finalize}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE-CLOS-CLASSOID-SLOT function, , @t{finalize-clos-classoid-slot}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE-CLOS-STRUCTURE-SLOT function, , @t{finalize-clos-structure-slot}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FIND-DEFINITION function, , @t{find-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FOREIGN-FUNCOID-DEFINITION function, , @t{foreign-funcoid-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FUNCOID generic reader, , @t{funcoid}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶GENERIC generic reader, , @t{generic}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS generic reader, , @t{internal-symbols}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS❩ generic writer, , @t{(setf internal-symbols)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶LISP-FILE-DEFINITION-P function, , @t{lisp-file-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶LOAD-SYSTEM function, , @t{load-system}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MACRO generic reader, , @t{macro}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-FILE-DEFINITIONS function, , @t{make-all-file-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-MODULE-DEFINITIONS function, , @t{make-all-module-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-PACKAGE-DEFINITIONS function, , @t{make-all-package-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-SYMBOL-DEFINITIONS function, , @t{make-all-symbol-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-SYSTEM-DEFINITIONS function, , @t{make-all-system-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CLASSOID-DEFINITION function, , @t{make-classoid-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CLOS-SLOT-DEFINITION function, , @t{make-clos-slot-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMBINATION-DEFINITION function, , @t{make-combination-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMPILER-MACRO-DEFINITION function, , @t{make-compiler-macro-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMPONENT-DEFINITION function, , @t{make-component-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CONSTANT-DEFINITION function, , @t{make-constant-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-EXPANDER-DEFINITION function, , @t{make-expander-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-EXTRACT function, , @t{make-extract}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FILE-DEFINITION function, , @t{make-file-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FOREIGN-FUNCOID-DEFINITION function, , @t{make-foreign-funcoid-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FUNCTION-DEFINITION function, , @t{make-function-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-GENERIC-DEFINITION function, , @t{make-generic-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-MACRO-DEFINITION function, , @t{make-macro-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-METHOD-DEFINITION function, , @t{make-method-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-MODULE-DEFINITION function, , @t{make-module-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-PACKAGE-DEFINITION function, , @t{make-package-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SPECIAL-DEFINITION function, , @t{make-special-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYMBOL-DEFINITIONS function, , @t{make-symbol-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYMBOL-MACRO-DEFINITION function, , @t{make-symbol-macro-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-DEFINITION function, , @t{make-system-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-FILE-DEFINITION function, , @t{make-system-file-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-FILE-DEFINITIONS function, , @t{make-system-file-definitions}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-TYPE-DEFINITION function, , @t{make-type-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-TYPED-STRUCTURE-SLOT-DEFINITION function, , @t{make-typed-structure-slot-definition}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶METHOD-NAME function, , @t{method-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE generic reader, , @t{module}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE-COMPONENTS function, , @t{module-components}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT generic reader, , @t{object}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT-SOURCE-PATHNAME function, , @t{object-source-pathname}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶ONE-LINER-P function, , @t{one-liner-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-EXTERNAL-SYMBOLS function, , @t{package-external-symbols}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-INTERNAL-SYMBOLS function, , @t{package-internal-symbols}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-SYMBOLS function, , @t{package-symbols}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶parse-contact❨s❩ function, , @t{parse-contact(s)}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PARSE-CONTACT-STRING function, , @t{parse-contact-string}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶READER-METHOD-DEFINITION-P function, , @t{reader-method-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶REORDER-DEPENDENCY-DEF function, , @t{reorder-dependency-def}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶REORDERED-DEPENDENCY-DEF-SYSTEM function, , @t{reordered-dependency-def-system}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶RESOLVE-DEPENDENCY-SPECIFICATION function, , @t{resolve-dependency-specification}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SHORT-EXPANDER-DEFINITION-P function, , @t{short-expander-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SLOT generic reader, , @t{slot}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME generic function, , @t{source-pathname}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUB-COMPONENT-P function, , @t{sub-component-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUBSYSTEM function, , @t{subsystem}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUBSYSTEMS function, , @t{subsystems}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYMBOL-DEFINITION-P function, , @t{symbol-definition-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM generic reader, , @t{system}} generic reader
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM-DEPENDENCIES function, , @t{system-dependencies}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶VALIDATE-EMAIL function, , @t{validate-email}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶WRITER-METHOD-DEFINITION-P function, , @t{writer-method-definition-p}} function
@end itemize
@end table


@c ---------------------------------
@c The net.didierverna.declt package
@c ---------------------------------
@node The net․didierverna․declt package, The common-lisp package, The net․didierverna․declt․extract package, Packages
@section @t{net.didierverna.declt}
@anchor{go to the NET․DIDIERVERNA․DECLT package}@c
@packageindex{net.didierverna.declt}@c
The Declt library's package.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/package․lisp file, , @t{package.lisp}}.
@item Nickname
@t{declt}
@item Use List
@itemize @bullet
@item
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@end itemize
@item Public Interface
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶DECLT function, , @t{declt}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶NICKNAME-PACKAGE function, , @t{nickname-package}} function
@end itemize
@item Internals
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*BLANKS* special variable, , @t{*blanks*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*CATEGORIES* special variable, , @t{*categories*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*FRAGILE-CHARACTERS* special variable, , @t{*fragile-characters*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*SECTION-NAMES* special variable, , @t{*section-names*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶*SPECIAL-CHARACTERS* special variable, , @t{*special-characters*}} special variable
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ANCHOR function, , @t{@atchar{}anchor}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFCOMBINATION macro, , @t{@atchar{}defcombination}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFFN macro, , @t{@atchar{}deffn}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFFNX function, , @t{@atchar{}deffnx}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFMETHOD macro, , @t{@atchar{}defmethod}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFMETHODX function, , @t{@atchar{}defmethodx}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFTP macro, , @t{@atchar{}deftp}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFTYPE macro, , @t{@atchar{}deftype}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFVR macro, , @t{@atchar{}defvr}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEM macro, , @t{@atchar{}item}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEMIZE macro, , @t{@atchar{}itemize}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEMIZE-LIST function, , @t{@atchar{}itemize-list}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}MULTITABLE macro, , @t{@atchar{}multitable}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}REF function, , @t{@atchar{}ref}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}TABLE macro, , @t{@atchar{}table}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}TABLEITEM macro, , @t{@atchar{}tableitem}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CATEGORIES-NODE function, , @t{add-categories-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CATEGORY-NODE function, , @t{add-category-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CHILD function, , @t{add-child}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-DEFINITIONS-NODE function, , @t{add-definitions-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-FILES-NODE function, , @t{add-files-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-MODULES-NODE function, , @t{add-modules-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-PACKAGES-NODE function, , @t{add-packages-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ADD-SYSTEMS-NODE function, , @t{add-systems-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR function, , @t{anchor}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR-AND-INDEX function, , @t{anchor-and-index}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR-NAME function, , @t{anchor-name}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME generic function, , @t{category-name}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CONTEXT class, , @t{context}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶COPY-NODE function, , @t{copy-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CURRENT-TIME-STRING function, , @t{current-time-string}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT generic function, , @t{document}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE function, , @t{escape}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-ANCHOR function, , @t{escape-anchor}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-LABEL function, , @t{escape-label}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-LAMBDA-LIST function, , @t{escape-lambda-list}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶FILE-NODE function, , @t{file-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶FIRST-WORD-LENGTH function, , @t{first-word-length}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶HYPERLINKS generic reader, , @t{hyperlinks}} generic reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶HYPERLINKS❩ generic writer, , @t{(setf hyperlinks)}} generic writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX function, , @t{index}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME generic function, , @t{index-command-name}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶LONG-TITLE function, , @t{long-title}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MAKE-CONTEXT function, , @t{make-context}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MAKE-NODE function, , @t{make-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-ACCESSORS-P function, , @t{merge-accessors-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-EXPANDER-P function, , @t{merge-expander-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-GENERIC-ACCESSORS-P function, , @t{merge-generic-accessors-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-METHODS function, , @t{merge-methods}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE structure, , @t{node}} structure
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-AFTER-MENU-CONTENTS reader, , @t{node-after-menu-contents}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-AFTER-MENU-CONTENTS❩ writer, , @t{(setf node-after-menu-contents)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-BEFORE-MENU-CONTENTS reader, , @t{node-before-menu-contents}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-BEFORE-MENU-CONTENTS❩ writer, , @t{(setf node-before-menu-contents)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-CHILDREN reader, , @t{node-children}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-CHILDREN❩ writer, , @t{(setf node-children)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-NAME reader, , @t{node-name}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-NAME❩ writer, , @t{(setf node-name)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-NEXT reader, , @t{node-next}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-NEXT❩ writer, , @t{(setf node-next)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-P function, , @t{node-p}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-PREVIOUS reader, , @t{node-previous}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-PREVIOUS❩ writer, , @t{(setf node-previous)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-NAME reader, , @t{node-section-name}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-NAME❩ writer, , @t{(setf node-section-name)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-TYPE reader, , @t{node-section-type}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-TYPE❩ writer, , @t{(setf node-section-type)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SYNOPSIS reader, , @t{node-synopsis}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SYNOPSIS❩ writer, , @t{(setf node-synopsis)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-UP reader, , @t{node-up}} reader
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-UP❩ writer, , @t{(setf node-up)}} writer
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶QUALIFIERS function, , @t{qualifiers}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶READ-NEXT-LINE function, , @t{read-next-line}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶REFERENCE function, , @t{reference}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-CLOS-CLASSOID macro, , @t{render-clos-classoid}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEFINITION-CORE function, , @t{render-definition-core}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEPENDENCIES function, , @t{render-dependencies}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEPENDENCY function, , @t{render-dependency}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DOCSTRING function, , @t{render-docstring}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-FUNCOID macro, , @t{render-funcoid}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-HEADER function, , @t{render-header}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-HEADLINE function, , @t{render-headline}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-INITARGS function, , @t{render-initargs}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-METHOD macro, , @t{render-method}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-METHOD-COMBINATION function, , @t{render-method-combination}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-NODE function, , @t{render-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-PATHNAME function, , @t{render-pathname}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-REFERENCES function, , @t{render-references}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TEXT function, , @t{render-text}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TO-STRING macro, , @t{render-to-string}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TOP-NODE function, , @t{render-top-node}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-VAROID macro, , @t{render-varoid}} macro
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶REVEAL function, , @t{reveal}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-LAMBDA-LIST function, , @t{safe-lambda-list}} function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME generic function, , @t{safe-name}} generic function
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-SPECIALIZERS function, , @t{safe-specializers}} function
@end itemize
@end table


@c -----------------------
@c The common-lisp package
@c -----------------------
@node The common-lisp package, The sb-mop package, The net․didierverna․declt package, Packages
@section @t{common-lisp}
@anchor{go to the COMMON-LISP package}@c
@packageindex{common-lisp}@c
public: home of symbols defined by the ANSI language specification
@table @strong
@item Nickname
@t{cl}
@item Used By List
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item
@ref{go to the SB-MOP package, , @t{sb-mop}}.
@end itemize
@item Public Interface
@itemize @bullet
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE generic function, , @t{initialize-instance}} generic function
@item
@ref{go to the COMMON-LISP∶MAKE-INSTANCE generic function, , @t{make-instance}} generic function
@item
@ref{go to the COMMON-LISP∶PRINT-OBJECT generic function, , @t{print-object}} generic function
@item
@ref{go to the COMMON-LISP∶PROGN method combination, , @t{progn}} method combination
@item
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}} method combination
@item
@ref{go to the COMMON-LISP∶STANDARD-CLASS class, , @t{standard-class}} class
@item
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}} class
@item
@ref{go to the COMMON-LISP∶STRUCTURE-OBJECT structure, , @t{structure-object}} structure
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION->COMMON-LISP∶SYMBOL slot, , @t{symbol}} slot
@item
@ref{go to the COMMON-LISP∶T class, , @t{t}} class
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION->COMMON-LISP∶TYPE slot, , @t{type}} slot
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CL-SOURCE-FILE․ASD->COMMON-LISP∶TYPE slot, , @t{type}} slot
@item
@ref{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS generic function, , @t{update-instance-for-different-class}} generic function
@end itemize
@end table


@c ------------------
@c The sb-mop package
@c ------------------
@node The sb-mop package, The asdf/lisp-action package, The common-lisp package, Packages
@section @t{sb-mop}
@anchor{go to the SB-MOP package}@c
@packageindex{sb-mop}@c
public: the MetaObject Protocol interface@comma{} as defined by@*
The Art of the Metaobject Protocol@comma{} by Kiczales@comma{} des Rivieres and Bobrow:
ISBN 0-262-61074-4@comma{} with exceptions as noted in the User Manual.
@table @strong
@item Use List
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Public Interface
@ref{go to the SB-MOP∶VALIDATE-SUPERCLASS generic function, , @t{validate-superclass}} generic function
@end table


@c ----------------------------
@c The asdf/lisp-action package
@c ----------------------------
@node The asdf/lisp-action package, , The sb-mop package, Packages
@section @t{asdf/lisp-action}
@anchor{go to the ASDF/LISP-ACTION package}@c
@packageindex{asdf/lisp-action}@c
@table @strong
@item Public Interface
@ref{go to the ASDF/LISP-ACTION∶CL-SOURCE-FILE class, , @t{cl-source-file}} class
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Public Interface::
* Internals::
@end menu


@c ----------------
@c Public Interface
@c ----------------
@node Public Interface, Internals, Definitions, Definitions
@section Public Interface
@menu
* Public special variables::
* Public macros::
* Public ordinary functions::
* Public generic functions::
* Public method combinations::
* Public structures::
* Public classes::
* Public types::
@end menu

@node Public special variables, Public macros, Public Interface, Public Interface
@subsection Special variables
@defvr {Special Variable} *copyright-years*
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶*COPYRIGHT-YEARS* special variable}@c
@specialsubindex{*copyright-years*}@c
A string denoting the copyright years for the whole project.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *release-major-level*
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-MAJOR-LEVEL* special variable}@c
@specialsubindex{*release-major-level*}@c
The major level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *release-minor-level*
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-MINOR-LEVEL* special variable}@c
@specialsubindex{*release-minor-level*}@c
The minor level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *release-name*
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-NAME* special variable}@c
@specialsubindex{*release-name*}@c
The name of this release.@*
The general naming theme for Declt is "Star Trek characters".
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *release-status*
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-STATUS* special variable}@c
@specialsubindex{*release-status*}@c
The status of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *release-status-level*
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶*RELEASE-STATUS-LEVEL* special variable}@c
@specialsubindex{*release-status-level*}@c
The status level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end defvr

@node Public macros, Public ordinary functions, Public special variables, Public Interface
@subsection Macros
@deffn {Macro} {declare-valid-superclass} (class superclass)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶DECLARE-VALID-SUPERCLASS macro}@c
@macrosubindex{declare-valid-superclass}@c
Validate SUPERCLASS classes for CLASS classes.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {defabstract} (class super-classes slots &rest options)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶DEFABSTRACT macro}@c
@macrosubindex{defabstract}@c
Like DEFCLASS@comma{} but define an abstract class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {endpush} (object place)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶ENDPUSH macro}@c
@macrosubindex{endpush}@c
Push OBJECT at the end of PLACE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {when-let} (bindings &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHEN-LET macro}@c
@macrosubindex{when-let}@c
Execute BODY only when all BINDINGS are non-nil.@*
BINDINGS must be either a single binding of the form (VARIABLE VALUE)@comma{}
or a list of such. VALUEs are computed sequentially in the specified order@comma{}
and then VARIABLEs are bound to the corresponding VALUEs. If all VALUEs are
non-nil@comma{} BODY is executed.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {when-let*} (bindings &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHEN-LET* macro}@c
@macrosubindex{when-let*}@c
Execute BODY only when all BINDINGS are non-nil.@*
BINDINGS must be either a single binding of the form (VARIABLE VALUE)@comma{}@*
or a list of such. VARIABLEs are bound to their respective VALUE sequentially@comma{}
so that each VALUE expression may refer to a previously bound VARIABLE.
Execution stops completely as soon as a null VALUE is encountered. Otherwise@comma{}
BODY is executed as an implicit PROGN.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {while} (test &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶WHILE macro}@c
@macrosubindex{while}@c
Execute BODY while TEST.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn

@node Public ordinary functions, Public generic functions, Public macros, Public Interface
@subsection Ordinary functions
@deffn {Function} {allocation} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ALLOCATION function}@c
@functionsubindex{allocation}@c
Return CLOS slot DEFINITION's allocation type.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {bug-tracker} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶BUG-TRACKER function}@c
@functionsubindex{bug-tracker}@c
Return system DEFINITION's bug tracker@comma{} or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {combination-options} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-OPTIONS function}@c
@functionsubindex{combination-options}@c
Return generic function DEFINITION's method combination options.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {configuration} (key)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶CONFIGURATION function}@c
@functionsubindex{configuration}@c
Return KEY's value in the current Declt configuration.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/configuration․lisp file, , @t{configuration.lisp}}.
@end table
@end deffn
@deffn {Function} {configure} (key value)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶CONFIGURE function}@c
@functionsubindex{configure}@c
Set KEY to VALUE in the current Declt configuration.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/configuration․lisp file, , @t{configuration.lisp}}.
@end table
@end deffn
@deffn {Function} {declt} (system-name &rest keys &key library-name tagline library-version contact copyright-years license introduction conclusion output-directory file-name info-name hyperlinks declt-notice &aux current-time-string extract context)
@anchor{go to the NET․DIDIERVERNA․DECLT∶DECLT function}@c
@functionsubindex{declt}@c
Generate a reference manual for ASDF SYSTEM-NAME.@*
The reference manual is currently generated in Texinfo format.@*

For a description of SYSTEM-NAME@comma{} LIBRARY-NAME@comma{} TAGLINE@comma{} LIBRARY-VERSION@comma{}
CONTACT@comma{} COPYRIGHT-YEARS@comma{} LICENSE@comma{} INTRODUCTION@comma{} and CONCLUSION@comma{} see
`extract'.@*

The following keyword parameters are also available.@*
- OUTPUT-DIRECTORY: output directory for the generated reference manual.
  Defaults to the current directory.@*
- FILE-NAME: base name for the generated reference manual@comma{} sans extension.
  Defaults to the system name.@*
- INFO-NAME: base name for the subsequent Info file@comma{} sans extension (this
  name appears in the Texinfo file). Defaults to FILE-NAME.@*
- HYPERLINKS: create hyperlinks to files or directories. Defaults to NIL.
- DECLT-NOTICE: small credit paragraph to Declt@comma{} or NIL. Defaults to
  :long. Also accepts :short.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/declt․lisp file, , @t{declt.lisp}}.
@end table
@end deffn
@deffn {Function} {definition-version} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-VERSION function}@c
@functionsubindex{definition-version}@c
Return component DEFINITION's version string.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {description} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DESCRIPTION function}@c
@functionsubindex{description}@c
Return component DEFINITION's description.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {direct-default-initargs} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-DEFAULT-INITARGS function}@c
@functionsubindex{direct-default-initargs}@c
Return CLOS classoid mixin DEFINITION's direct default initargs.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {extract} (system-name &key library-name tagline library-version contact copyright-years license introduction conclusion &allow-other-keys &aux system contact-names contact-emails extract)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT function}@c
@functionsubindex{extract}@c
Extract and return documentation information for ASDF SYSTEM-NAME.@*
The documentation information is returned in a EXTRACT structure@comma{} which see.

SYSTEM-NAME is an ASDF system designator. The following keyword parameters
allow to specify or override some bits of information.@*
- LIBRARY-NAME: name of the library being documented. Defaults to the system
  name.@*
- TAGLINE: small text to be used as the manual's subtitle@comma{} or NIL.
  Defaults to the system long name or description.@*
- LIBRARY-VERSION: version information@comma{} or NIL.@*
  Defaults to the system version.@*
- CONTACT: contact information@comma{} or NIL. Defaults to the system maintainer(s)
  and author(s). Accepts a contact string@comma{} or a list of such. See
  `parse-contact-string' for more information.@*
- COPYRIGHT-YEARS: copyright years information or NIL. Defaults to the current
  year.@*
- LICENSE: license information. Defaults to NIL. Also accepts :mit@comma{} :boost@comma{}
  :bsd@comma{} :gpl@comma{} and :lgpl.@*
- INTRODUCTION: introduction chapter contents in Texinfo format.@*
  Defaults to NIL.@*
- CONCLUSION: conclusion chapter contents in Texinfo format.@*
  Defaults to NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {file-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION-P function}@c
@functionsubindex{file-definition-p}@c
Return T if DEFINITION is a file definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {find*} (object list &key test key pre-test)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶FIND* function}@c
@functionsubindex{find*}@c
Return the first finding of OBJECT in LIST@comma{} or NIL.@*
Each item in LIST is TESTed with EQ by default. TEST is performed on the item
itself by default@comma{} or on the result of applying KEY to it. Optionally@comma{} only
items satisfying PRE-TEST are considered.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {homepage} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOMEPAGE function}@c
@functionsubindex{homepage}@c
Return system DEFINITION's homepage@comma{} or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {identity-with-one-argument} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶IDENTITY-WITH-ONE-ARGUMENT function}@c
@functionsubindex{identity-with-one-argument}@c
Return short combination DEFINITION's :identity-with-one-argument option.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {if-feature} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶IF-FEATURE function}@c
@functionsubindex{if-feature}@c
Return component DEFINITION's if-feature.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {initargs} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INITARGS function}@c
@functionsubindex{initargs}@c
Return CLOS slot DEFINITION's initargs.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {initform} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INITFORM function}@c
@functionsubindex{initform}@c
Return CLOS slot DEFINITION's initform.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {license-name} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE-NAME function}@c
@functionsubindex{license-name}@c
Return system DEFINITION's license name@comma{} or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {long-description} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-DESCRIPTION function}@c
@functionsubindex{long-description}@c
Return component DEFINITION's long description.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {long-name} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-NAME function}@c
@functionsubindex{long-name}@c
Return system DEFINITION's long name@comma{} or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {mailto} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAILTO function}@c
@functionsubindex{mailto}@c
Return system DEFINITION's mailto@comma{} or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {module-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION-P function}@c
@functionsubindex{module-definition-p}@c
Return T if DEFINITION is a module definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {nickname-package} (&optional nickname)
@anchor{go to the NET․DIDIERVERNA․DECLT∶NICKNAME-PACKAGE function}@c
@functionsubindex{nickname-package}@c
Add NICKNAME (:DECLT by default) to the :NET.DIDIERVERNA.DECLT package.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {nicknames} (package-definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NICKNAMES function}@c
@functionsubindex{nicknames}@c
Return the list of nicknames for PACKAGE-DEFINITION.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {non-empty-string-p} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶NON-EMPTY-STRING-P function}@c
@functionsubindex{non-empty-string-p}@c
Return T if OBJECT is a non-empty string.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {package-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION-P function}@c
@functionsubindex{package-definition-p}@c
Return T if DEFINITION is a package definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {publicp} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLICP function}@c
@functionsubindex{publicp}@c
Return T is DEFINITION is public.@*
A definition is public when the symbol naming it is exported from its home
package.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {retain} (object list &key test key pre-test)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶RETAIN function}@c
@functionsubindex{retain}@c
Return a copy of LIST from which only OBJECT is retained.@*
Each item in LIST is TESTed with EQ by default. TEST is performed on the item
itself by default@comma{} or on the result of applying KEY to it. Optionally@comma{} only
items satisfying PRE-TEST are considered.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {source-control} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-CONTROL function}@c
@functionsubindex{source-control}@c
Return system DEFINITION's source control@comma{} or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {system-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION-P function}@c
@functionsubindex{system-definition-p}@c
Return T if DEFINITION is a system definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {version} (&optional type)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶VERSION function}@c
@functionsubindex{version}@c
Return the current version of Declt.@*
TYPE can be one of :number@comma{} :short or :long.@*

A version number is computed as major*10000 + minor*100 + patchlevel@comma{} leaving
two digits for each level. Alpha@comma{} beta and rc status are ignored in version
numbers.@*

A short version is something like 1.3@lbracechar{}a@comma{}b@comma{}rc@rbracechar{}4@comma{} or 1.3.4 for patchlevel.
Alpha@comma{} beta or rc levels start at 1. Patchlevels start at 0 but are ignored
in the output@comma{} so that 1.3.0 appears as just 1.3.@*

A long version is something like@*
1.3 @lbracechar{}alpha@comma{}beta@comma{}release candidate@comma{}patchlevel@rbracechar{} 4 "James T. Kirk". As for
the short version@comma{} a patchlevel of 0 is ignored in the output.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end deffn

@node Public generic functions, Public method combinations, Public ordinary functions, Public Interface
@subsection Generic functions
@deffn {Generic Reader} {author-emails} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS generic reader}@c
@genericsubindex{author-emails}@c
@deffnx {Generic Writer} {(setf author-emails)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS❩ generic writer}@c
@genericsubindex{(setf author-emails)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {author-emails} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method}@c
@methodsubindex{author-emails}@c
@deffnx {Writer Method} {(setf author-emails)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method}@c
@methodsubindex{(setf author-emails)}@c
The list of maintainer emails.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS slot, , @t{author-emails}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {author-names} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES generic reader}@c
@genericsubindex{author-names}@c
@deffnx {Generic Writer} {(setf author-names)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES❩ generic writer}@c
@genericsubindex{(setf author-names)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {author-names} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method}@c
@methodsubindex{author-names}@c
@deffnx {Writer Method} {(setf author-names)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method}@c
@methodsubindex{(setf author-names)}@c
The list of author names.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES slot, , @t{author-names}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {children} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN generic reader}@c
@genericsubindex{children}@c
@deffnx {Generic Writer} {(setf children)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN❩ generic writer}@c
@genericsubindex{(setf children)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {children} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ reader method}@c
@methodsubindex{children}@c
@deffnx {Writer Method} {(setf children)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ writer method}@c
@methodsubindex{(setf children)}@c
The list of child definitions for this definition's module.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN slot, , @t{children}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {clients} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS generic reader}@c
@genericsubindex{clients}@c
@deffnx {Generic Writer} {(setf clients)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS❩ generic writer}@c
@genericsubindex{(setf clients)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {clients} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ reader method}@c
@methodsubindex{clients}@c
@deffnx {Writer Method} {(setf clients)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ writer method}@c
@methodsubindex{(setf clients)}@c
The list of client definitions for this definition's method combnination.
These are generic functions using this combination.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS slot, , @t{clients}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {combination} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION generic reader}@c
@genericsubindex{combination}@c
@deffnx {Generic Writer} {(setf combination)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION❩ generic writer}@c
@genericsubindex{(setf combination)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {combination} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method}@c
@methodsubindex{combination}@c
@deffnx {Writer Method} {(setf combination)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method}@c
@methodsubindex{(setf combination)}@c
The method combination definition for this definition's generic function.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION slot, , @t{combination}}.
@end table
@end deffn
@deffn {Reader Method} {combination} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ reader method}@c
@methodsubindex{combination}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {component} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT generic reader}@c
@genericsubindex{component}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {component} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method}@c
@methodsubindex{component}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {conclusion} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION generic reader}@c
@genericsubindex{conclusion}@c
@deffnx {Generic Writer} {(setf conclusion)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION❩ generic writer}@c
@genericsubindex{(setf conclusion)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {conclusion} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{conclusion}@c
@deffnx {Writer Method} {(setf conclusion)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf conclusion)}@c
Contents for a conclusion chapter.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION slot, , @t{conclusion}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {contact-emails} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS generic reader}@c
@genericsubindex{contact-emails}@c
@deffnx {Generic Writer} {(setf contact-emails)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS❩ generic writer}@c
@genericsubindex{(setf contact-emails)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {contact-emails} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{contact-emails}@c
@deffnx {Writer Method} {(setf contact-emails)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf contact-emails)}@c
The list of contact emails for the library.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS slot, , @t{contact-emails}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {contact-names} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES generic reader}@c
@genericsubindex{contact-names}@c
@deffnx {Generic Writer} {(setf contact-names)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES❩ generic writer}@c
@genericsubindex{(setf contact-names)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {contact-names} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{contact-names}@c
@deffnx {Writer Method} {(setf contact-names)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf contact-names)}@c
The list of contact names for the library.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES slot, , @t{contact-names}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {copyright-years} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS generic reader}@c
@genericsubindex{copyright-years}@c
@deffnx {Generic Writer} {(setf copyright-years)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS❩ generic writer}@c
@genericsubindex{(setf copyright-years)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {copyright-years} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{copyright-years}@c
@deffnx {Writer Method} {(setf copyright-years)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf copyright-years)}@c
A copyright years string.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS slot, , @t{copyright-years}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-method} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-METHOD generic reader}@c
@genericsubindex{definition-method}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definition-method} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-METHOD ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method}@c
@methodsubindex{definition-method}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-symbol} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-SYMBOL generic reader}@c
@genericsubindex{definition-symbol}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definition-symbol} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-SYMBOL ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ reader method}@c
@methodsubindex{definition-symbol}@c
The symbol naming this definition.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION->COMMON-LISP∶SYMBOL slot, , @t{symbol}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definitions} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS generic reader}@c
@genericsubindex{definitions}@c
@deffnx {Generic Writer} {(setf definitions)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ generic writer}@c
@genericsubindex{(setf definitions)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definitions} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{definitions}@c
@deffnx {Writer Method} {(setf definitions)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf definitions)}@c
The list of definitions.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS slot, , @t{definitions}}.
@end table
@end deffn
@deffn {Reader Method} {definitions} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class, , @t{lisp-file-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ reader method}@c
@methodsubindex{definitions}@c
@deffnx {Writer Method} {(setf definitions)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class, , @t{lisp-file-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ writer method}@c
@methodsubindex{(setf definitions)}@c
The list of definitions for this definition's file.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS slot, , @t{definitions}}.
@end table
@end deffn
@deffn {Reader Method} {definitions} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method}@c
@methodsubindex{definitions}@c
@deffnx {Writer Method} {(setf definitions)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method}@c
@methodsubindex{(setf definitions)}@c
The list of corresponding definitions.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS slot, , @t{definitions}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {defsystem-dependencies} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES generic reader}@c
@genericsubindex{defsystem-dependencies}@c
@deffnx {Generic Writer} {(setf defsystem-dependencies)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES❩ generic writer}@c
@genericsubindex{(setf defsystem-dependencies)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {defsystem-dependencies} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method}@c
@methodsubindex{defsystem-dependencies}@c
@deffnx {Writer Method} {(setf defsystem-dependencies)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method}@c
@methodsubindex{(setf defsystem-dependencies)}@c
The list of defsystem dependency definitions.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES slot, , @t{defsystem-dependencies}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {dependencies} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES generic reader}@c
@genericsubindex{dependencies}@c
@deffnx {Generic Writer} {(setf dependencies)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES❩ generic writer}@c
@genericsubindex{(setf dependencies)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {dependencies} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method}@c
@methodsubindex{dependencies}@c
@deffnx {Writer Method} {(setf dependencies)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method}@c
@methodsubindex{(setf dependencies)}@c
The list of dependency definitions for this definition's component.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES slot, , @t{dependencies}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-methods} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS generic reader}@c
@genericsubindex{direct-methods}@c
@deffnx {Generic Writer} {(setf direct-methods)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS❩ generic writer}@c
@genericsubindex{(setf direct-methods)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-methods} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method}@c
@methodsubindex{direct-methods}@c
@deffnx {Writer Method} {(setf direct-methods)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method}@c
@methodsubindex{(setf direct-methods)}@c
The list of direct method definitions for this definition's classoid.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS slot, , @t{direct-methods}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-slots} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS generic reader}@c
@genericsubindex{direct-slots}@c
@deffnx {Generic Writer} {(setf direct-slots)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS❩ generic writer}@c
@genericsubindex{(setf direct-slots)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-slots} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ reader method}@c
@methodsubindex{direct-slots}@c
@deffnx {Writer Method} {(setf direct-slots)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ writer method}@c
@methodsubindex{(setf direct-slots)}@c
The list of direct slot definitions for this definition's classoid.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS slot, , @t{direct-slots}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-subclasses} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES generic reader}@c
@genericsubindex{direct-subclasses}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-subclasses} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method}@c
@methodsubindex{direct-subclasses}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-subclasses)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES❩ generic writer}@c
@genericsubindex{(setf direct-subclasses)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Writer Method} {(setf direct-subclasses)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method}@c
@methodsubindex{(setf direct-subclasses)}@c
automatically generated writer method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-subclassoids} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS generic reader}@c
@genericsubindex{direct-subclassoids}@c
@deffnx {Generic Writer} {(setf direct-subclassoids)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS❩ generic writer}@c
@genericsubindex{(setf direct-subclassoids)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-subclassoids} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method}@c
@methodsubindex{direct-subclassoids}@c
@deffnx {Writer Method} {(setf direct-subclassoids)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method}@c
@methodsubindex{(setf direct-subclassoids)}@c
The list of direct subclassoid definitions for this definition's classoid.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-subconditions} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS generic reader}@c
@genericsubindex{direct-subconditions}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-subconditions} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method}@c
@methodsubindex{direct-subconditions}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-subconditions)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS❩ generic writer}@c
@genericsubindex{(setf direct-subconditions)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Writer Method} {(setf direct-subconditions)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method}@c
@methodsubindex{(setf direct-subconditions)}@c
automatically generated writer method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-substructures} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES generic reader}@c
@genericsubindex{direct-substructures}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-substructures} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ reader method}@c
@methodsubindex{direct-substructures}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-substructures)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES❩ generic writer}@c
@genericsubindex{(setf direct-substructures)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Writer Method} {(setf direct-substructures)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method}@c
@methodsubindex{(setf direct-substructures)}@c
automatically generated writer method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-superclasses} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES generic reader}@c
@genericsubindex{direct-superclasses}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-superclasses} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method}@c
@methodsubindex{direct-superclasses}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-superclasses)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES❩ generic writer}@c
@genericsubindex{(setf direct-superclasses)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Writer Method} {(setf direct-superclasses)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method}@c
@methodsubindex{(setf direct-superclasses)}@c
automatically generated writer method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-superclassoids} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS generic reader}@c
@genericsubindex{direct-superclassoids}@c
@deffnx {Generic Writer} {(setf direct-superclassoids)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS❩ generic writer}@c
@genericsubindex{(setf direct-superclassoids)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-superclassoids} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method}@c
@methodsubindex{direct-superclassoids}@c
@deffnx {Writer Method} {(setf direct-superclassoids)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method}@c
@methodsubindex{(setf direct-superclassoids)}@c
The list of direct superclassoid definitions for this definition's classoid.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-superconditions} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS generic reader}@c
@genericsubindex{direct-superconditions}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-superconditions} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method}@c
@methodsubindex{direct-superconditions}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-superconditions)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS❩ generic writer}@c
@genericsubindex{(setf direct-superconditions)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Writer Method} {(setf direct-superconditions)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method}@c
@methodsubindex{(setf direct-superconditions)}@c
automatically generated writer method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-superstructures} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES generic reader}@c
@genericsubindex{direct-superstructures}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {direct-superstructures} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ reader method}@c
@methodsubindex{direct-superstructures}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-superstructures)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES❩ generic writer}@c
@genericsubindex{(setf direct-superstructures)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Writer Method} {(setf direct-superstructures)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method}@c
@methodsubindex{(setf direct-superstructures)}@c
automatically generated writer method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {docstring} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING generic function}@c
@genericsubindex{docstring}@c
Return DEFINITION's docstring (Lisp documentation).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return component DEFINITION's description.
This is the same as the `description' function.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION class, , @t{typed-structure-slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return NIL.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION class, , @t{clos-slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return CLOS slot DEFINITION's docstring.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return typed structure DEFINITION's docstring.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return setf expander DEFINITION's docstring.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return type DEFINITION's docstring.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION class, , @t{setf-compiler-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return setf compiler macro DEFINITION's docstring.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class, , @t{compiler-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return compiler macro DEFINITION's docstring.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION class, , @t{symbol-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return NIL (symbol macros don't have a docstring).
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION class, , @t{variable-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION❩ method}@c
@methodsubindex{docstring}@c
Return variable DEFINITION's docstring.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (@ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨COMMON-LISP∶T❩ method}@c
@methodsubindex{docstring}@c
Return DEFINITION's object canonical documentation.
This is the default method.
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {element-type} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE generic reader}@c
@genericsubindex{element-type}@c
@deffnx {Generic Writer} {(setf element-type)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE❩ generic writer}@c
@genericsubindex{(setf element-type)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {element-type} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ reader method}@c
@methodsubindex{element-type}@c
@deffnx {Writer Method} {(setf element-type)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method}@c
@methodsubindex{(setf element-type)}@c
The structure's element type.@*
It is T for list structures@comma{} but may be something else for vector ones.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE slot, , @t{element-type}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {expander-for} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR generic reader}@c
@genericsubindex{expander-for}@c
@deffnx {Generic Writer} {(setf expander-for)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR❩ generic writer}@c
@genericsubindex{(setf expander-for)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {expander-for} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ reader method}@c
@methodsubindex{expander-for}@c
@deffnx {Writer Method} {(setf expander-for)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method}@c
@methodsubindex{(setf expander-for)}@c
A setf expander definition for this funcoid@comma{} or NIL.@*
This is the definition of a setf expander that expands forms identical to this
funcoid's signature. There can be only one. Note that the Common Lisp standard
does not impose any actual relation between the setf expander and its
access-fn. In fact@comma{} the access-fn may not even exist at all. However@comma{} if it
does@comma{} it is very likely that it is a reader for the place updated by this setf
expander.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR slot, , @t{expander-for}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {expanders-to} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO generic reader}@c
@genericsubindex{expanders-to}@c
@deffnx {Generic Writer} {(setf expanders-to)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO❩ generic writer}@c
@genericsubindex{(setf expanders-to)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {expanders-to} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ reader method}@c
@methodsubindex{expanders-to}@c
@deffnx {Writer Method} {(setf expanders-to)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method}@c
@methodsubindex{(setf expanders-to)}@c
The list of setf expander definitions to this funcoid.@*
This is a list of definitions for short form setf expanders that have this
funcoid as their update-fn. There might be more than one.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO slot, , @t{expanders-to}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {file} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE generic reader}@c
@genericsubindex{file}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {file} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class, , @t{file-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ reader method}@c
@methodsubindex{file}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {foreignp} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FOREIGNP generic reader}@c
@genericsubindex{foreignp}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {foreignp} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FOREIGNP ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method}@c
@methodsubindex{foreignp}@c
Whether this definition is foreign.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶FOREIGN slot, , @t{foreign}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {home-package} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE generic reader}@c
@genericsubindex{home-package}@c
@deffnx {Generic Writer} {(setf home-package)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE❩ generic writer}@c
@genericsubindex{(setf home-package)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {home-package} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ reader method}@c
@methodsubindex{home-package}@c
@deffnx {Writer Method} {(setf home-package)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ writer method}@c
@methodsubindex{(setf home-package)}@c
The home package definition for this definition's symbol.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE slot, , @t{home-package}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {initialize-instance} (instance &rest initargs &key system foreign other-systems name initform initfunction type allocation initargs documentation readers writers lambda-list argument-precedence-order &allow-other-keys)
@anchor{go to the COMMON-LISP∶INITIALIZE-INSTANCE generic function}@c
@genericsubindex{initialize-instance}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {initialize-instance} :after (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-FILE-DEFINITION class, , @t{system-file-definition}})
@anchor{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-FILE-DEFINITION❩ method}@c
@methodsubindex{initialize-instance}@c
Create and store a fake ASDF comoponent representing the system file.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}})
@anchor{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method}@c
@methodsubindex{initialize-instance}@c
Create all generic DEFINTION's method definitions@comma{} unless FOREIGN.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method}@c
@methodsubindex{initialize-instance}@c
Compute DEFINITION's package lists of external and internal symbols.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}})
@anchor{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ method}@c
@methodsubindex{initialize-instance}@c
Compute typed structure DEFINITION's type and element type.
Unless FOREIGN@comma{} also compute its slot definitions.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}})
@anchor{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ method}@c
@methodsubindex{initialize-instance}@c
Create all CLOS classoid DEFINITION's slot definitions@comma{} unless FOREIGN.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method}@c
@methodsubindex{initialize-instance}@c
Extract names and emails for authors and maintainers.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {introduction} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION generic reader}@c
@genericsubindex{introduction}@c
@deffnx {Generic Writer} {(setf introduction)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION❩ generic writer}@c
@genericsubindex{(setf introduction)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {introduction} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{introduction}@c
@deffnx {Writer Method} {(setf introduction)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf introduction)}@c
Contents for an introduction chapter.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION slot, , @t{introduction}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {lambda-list} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST generic function}@c
@genericsubindex{lambda-list}@c
Return DEFINITION's lambda-list.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-WRITER-METHOD-DEFINITION class, , @t{setf-writer-method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-WRITER-METHOD-DEFINITION❩ method}@c
@methodsubindex{lambda-list}@c
Return method DEFINITION's method lambda-list's CDR.@*
This is because setf methods take the new value as their first argument.
@end deffn
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-METHOD-DEFINITION class, , @t{setf-method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-METHOD-DEFINITION❩ method}@c
@methodsubindex{lambda-list}@c
Return method DEFINITION's method lambda-list's CDR.@*
This is because setf methods take the new value as their first argument.
@end deffn
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method}@c
@methodsubindex{lambda-list}@c
Return method DEFINITION's method lambda-list.
@end deffn
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ method}@c
@methodsubindex{lambda-list}@c
Return method combination DEFINITION's lambda-list.
@end deffn
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION class, , @t{long-expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION❩ method}@c
@methodsubindex{lambda-list}@c
Return long setf expander DEFINITION's expander function's lambda-list.
@end deffn
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class, , @t{short-expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ method}@c
@methodsubindex{lambda-list}@c
Return short setf expander DEFINITION's lambda-list.@*
This lambda-list is computed as the shortened version of DEFINITION's
update-fn lambda-list@comma{} because setf expanders pass the new value as the last
argument to their operator.@*
If the expander's update-fn is not defined@comma{} return two values: NIL and T.
@end deffn
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method}@c
@methodsubindex{lambda-list}@c
Return type DEFINITION's type lambda-list.
@end deffn
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN❩ method}@c
@methodsubindex{lambda-list}@c
Return the CDR of setf mixin DEFINITION's function lambda-list.@*
This is because setf funcoids take the new value as their first argument.
@end deffn
@deffn {Method} {lambda-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION❩ method}@c
@methodsubindex{lambda-list}@c
Return funcoid DEFINITION's function lambda-list.
This is the default method.
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {library-name} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME generic reader}@c
@genericsubindex{library-name}@c
@deffnx {Generic Writer} {(setf library-name)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME❩ generic writer}@c
@genericsubindex{(setf library-name)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {library-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{library-name}@c
@deffnx {Writer Method} {(setf library-name)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf library-name)}@c
The library's name.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME slot, , @t{library-name}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {library-version} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION generic reader}@c
@genericsubindex{library-version}@c
@deffnx {Generic Writer} {(setf library-version)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION❩ generic writer}@c
@genericsubindex{(setf library-version)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {library-version} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{library-version}@c
@deffnx {Writer Method} {(setf library-version)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf library-version)}@c
The library's version.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION slot, , @t{library-version}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {license} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE generic reader}@c
@genericsubindex{license}@c
@deffnx {Generic Writer} {(setf license)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE❩ generic writer}@c
@genericsubindex{(setf license)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {license} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{license}@c
@deffnx {Writer Method} {(setf license)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf license)}@c
The library's license.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE slot, , @t{license}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {maintainer-emails} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS generic reader}@c
@genericsubindex{maintainer-emails}@c
@deffnx {Generic Writer} {(setf maintainer-emails)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS❩ generic writer}@c
@genericsubindex{(setf maintainer-emails)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {maintainer-emails} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method}@c
@methodsubindex{maintainer-emails}@c
@deffnx {Writer Method} {(setf maintainer-emails)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method}@c
@methodsubindex{(setf maintainer-emails)}@c
The list of maintainer emails.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS slot, , @t{maintainer-emails}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {maintainer-names} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES generic reader}@c
@genericsubindex{maintainer-names}@c
@deffnx {Generic Writer} {(setf maintainer-names)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES❩ generic writer}@c
@genericsubindex{(setf maintainer-names)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {maintainer-names} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method}@c
@methodsubindex{maintainer-names}@c
@deffnx {Writer Method} {(setf maintainer-names)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method}@c
@methodsubindex{(setf maintainer-names)}@c
The list of maintainer names.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES slot, , @t{maintainer-names}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {make-instance} (class &rest initargs &key &allow-other-keys)
@anchor{go to the COMMON-LISP∶MAKE-INSTANCE generic function}@c
@genericsubindex{make-instance}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {make-instance} (@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS class, , @t{abstract-class}})
@anchor{go to the COMMON-LISP∶MAKE-INSTANCE ❨NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS❩ method}@c
@methodsubindex{make-instance}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {methods} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS generic reader}@c
@genericsubindex{methods}@c
@deffnx {Generic Writer} {(setf methods)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS❩ generic writer}@c
@genericsubindex{(setf methods)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {methods} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method}@c
@methodsubindex{methods}@c
@deffnx {Writer Method} {(setf methods)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method}@c
@methodsubindex{(setf methods)}@c
The list of method definitions for this definition's generic function.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS slot, , @t{methods}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {name} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME generic function}@c
@genericsubindex{name}@c
The definition's name.@*
This is the native Lisp name for the definition's corresponding object.
It's either a string (for ASDF components and packages)@comma{} a symbol@comma{}
or a list of the form (setf symbol).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method}@c
@methodsubindex{name}@c
Return component DEFINITION's component name.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method}@c
@methodsubindex{name}@c
Return package DEFINITION's package name.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN❩ method}@c
@methodsubindex{name}@c
Return the list (setf <setf mixin DEFINITION's symbol>).
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ method}@c
@methodsubindex{name}@c
Return symbol DEFINITION's symbol.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {owner} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER generic reader}@c
@genericsubindex{owner}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {owner} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method}@c
@methodsubindex{owner}@c
The definition for the owner of this definition's slot.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER slot, , @t{owner}}.
@end table
@end deffn
@deffn {Reader Method} {owner} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method}@c
@methodsubindex{owner}@c
The generic function definition for this definition's method.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER slot, , @t{owner}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {parent} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT generic reader}@c
@genericsubindex{parent}@c
@deffnx {Generic Writer} {(setf parent)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT❩ generic writer}@c
@genericsubindex{(setf parent)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {parent} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method}@c
@methodsubindex{parent}@c
@deffnx {Writer Method} {(setf parent)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method}@c
@methodsubindex{(setf parent)}@c
The parent definition for this definition's component.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT slot, , @t{parent}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {print-object} (object stream)
@anchor{go to the COMMON-LISP∶PRINT-OBJECT generic function}@c
@genericsubindex{print-object}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {print-object} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the COMMON-LISP∶PRINT-OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT COMMON-LISP∶T❩ method}@c
@methodsubindex{print-object}@c
Show EXTRACT's library name.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the COMMON-LISP∶PRINT-OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{print-object}@c
Show DEFINITION's name.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {private-definitions} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS generic function}@c
@genericsubindex{private-definitions}@c
Return OBJECT's private definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {private-definitions} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method}@c
@methodsubindex{private-definitions}@c
Return package DEFINITION's private definitions.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {private-definitions} (@ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS ❨COMMON-LISP∶T❩ method}@c
@methodsubindex{private-definitions}@c
Return OBJECT's private definitions from its definitions list.
This is the default method for heterogeneous definitions lists.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {public-definitions} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS generic function}@c
@genericsubindex{public-definitions}@c
Return OBJECT's public definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {public-definitions} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method}@c
@methodsubindex{public-definitions}@c
Return package DEFINITION's public definitions.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {public-definitions} (@ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS ❨COMMON-LISP∶T❩ method}@c
@methodsubindex{public-definitions}@c
Return OBJECT's public definitions from its definitions list.
This is the default method for heterogeneous definitions lists.
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {readers} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READERS generic reader}@c
@genericsubindex{readers}@c
@deffnx {Generic Writer} {(setf readers)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶READERS❩ generic writer}@c
@genericsubindex{(setf readers)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {readers} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method}@c
@methodsubindex{readers}@c
@deffnx {Writer Method} {(setf readers)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶READERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method}@c
@methodsubindex{(setf readers)}@c
The list of definitions for this definition's slot readers.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶READERS slot, , @t{readers}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {source-file} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE generic reader}@c
@genericsubindex{source-file}@c
@deffnx {Generic Writer} {(setf source-file)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE❩ generic writer}@c
@genericsubindex{(setf source-file)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {source-file} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method}@c
@methodsubindex{source-file}@c
@deffnx {Writer Method} {(setf source-file)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ writer method}@c
@methodsubindex{(setf source-file)}@c
The source file definition for this definition's object.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE slot, , @t{source-file}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {specializers} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS generic reader}@c
@genericsubindex{specializers}@c
@deffnx {Generic Writer} {(setf specializers)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS❩ generic writer}@c
@genericsubindex{(setf specializers)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {specializers} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method}@c
@methodsubindex{specializers}@c
@deffnx {Writer Method} {(setf specializers)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ writer method}@c
@methodsubindex{(setf specializers)}@c
The specializers of this definition's method.@*
This is a list of either class definitions (for regular specializers)@comma{}
or raw EQL specializers.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS slot, , @t{specializers}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {standalone-combinator} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR generic reader}@c
@genericsubindex{standalone-combinator}@c
@deffnx {Generic Writer} {(setf standalone-combinator)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR❩ generic writer}@c
@genericsubindex{(setf standalone-combinator)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {standalone-combinator} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION class, , @t{short-combination-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ reader method}@c
@methodsubindex{standalone-combinator}@c
@deffnx {Writer Method} {(setf standalone-combinator)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION class, , @t{short-combination-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ writer method}@c
@methodsubindex{(setf standalone-combinator)}@c
The corresponding standalone combinator definition@comma{} or NIL.@*
This is a function or macro definition. Note that if this definition
is unavailable@comma{} it means that the method combination itself cannot be used
(yet).
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR slot, , @t{standalone-combinator}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {standalone-reader} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER generic reader}@c
@genericsubindex{standalone-reader}@c
@deffnx {Generic Writer} {(setf standalone-reader)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER❩ generic writer}@c
@genericsubindex{(setf standalone-reader)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {standalone-reader} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ reader method}@c
@methodsubindex{standalone-reader}@c
@deffnx {Writer Method} {(setf standalone-reader)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ writer method}@c
@methodsubindex{(setf standalone-reader)}@c
A standalone reader definition for this definition's expander@comma{} or NIL.@*
If it exists@comma{} it's a definition for a function or macro with the same
signature as that of the expander's access-fn. Note that the Common Lisp
standard does not impose any actual relation between the setf expander and its
access-fn. In fact@comma{} the access-fn may not even exist at all. However@comma{} if it
does@comma{} it is very likely that it is a reader for the place updated by this setf
expander.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER slot, , @t{standalone-reader}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {standalone-writer} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER generic reader}@c
@genericsubindex{standalone-writer}@c
@deffnx {Generic Writer} {(setf standalone-writer)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER❩ generic writer}@c
@genericsubindex{(setf standalone-writer)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {standalone-writer} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class, , @t{short-expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ reader method}@c
@methodsubindex{standalone-writer}@c
@deffnx {Writer Method} {(setf standalone-writer)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class, , @t{short-expander-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ writer method}@c
@methodsubindex{(setf standalone-writer)}@c
A standalone writer definition for this definition's expander@comma{} or NIL.
This is a function or macro definition. Note that if this definition
is unavailable@comma{} it means that the expander itself cannot be used (yet).
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER slot, , @t{standalone-writer}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {structure-type} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE generic reader}@c
@genericsubindex{structure-type}@c
@deffnx {Generic Writer} {(setf structure-type)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE❩ generic writer}@c
@genericsubindex{(setf structure-type)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {structure-type} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ reader method}@c
@methodsubindex{structure-type}@c
@deffnx {Writer Method} {(setf structure-type)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method}@c
@methodsubindex{(setf structure-type)}@c
The structure type@comma{} either LIST or VECTOR.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION->COMMON-LISP∶TYPE slot, , @t{type}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {tagline} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE generic reader}@c
@genericsubindex{tagline}@c
@deffnx {Generic Writer} {(setf tagline)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE❩ generic writer}@c
@genericsubindex{(setf tagline)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {tagline} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method}@c
@methodsubindex{tagline}@c
@deffnx {Writer Method} {(setf tagline)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method}@c
@methodsubindex{(setf tagline)}@c
The reference manual's tagline.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE slot, , @t{tagline}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {target-slot} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT generic reader}@c
@genericsubindex{target-slot}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {target-slot} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class, , @t{accessor-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN❩ reader method}@c
@methodsubindex{target-slot}@c
The target slot definition for this definition's accessor.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT slot, , @t{target-slot}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {update-instance-for-different-class} (previous current &rest initargs &key)
@anchor{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS generic function}@c
@genericsubindex{update-instance-for-different-class}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {update-instance-for-different-class} :after (@ref{go to the COMMON-LISP∶T class, , @t{t}}, @ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}})
@anchor{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ∶AFTER ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION❩ method}@c
@methodsubindex{update-instance-for-different-class}@c
Maybe upgrade NEW writer method definition's owner to a generic writer.
This class upgrade is possible if every owner's method is a writer method.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {update-instance-for-different-class} :after (@ref{go to the COMMON-LISP∶T class, , @t{t}}, @ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION class, , @t{reader-method-definition}})
@anchor{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ∶AFTER ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION❩ method}@c
@methodsubindex{update-instance-for-different-class}@c
Maybe upgrade NEW reader method definition's owner to a generic reader.
This class upgrade is possible if every owner's method is a reader method.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {use-list} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST generic reader}@c
@genericsubindex{use-list}@c
@deffnx {Generic Writer} {(setf use-list)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST❩ generic writer}@c
@genericsubindex{(setf use-list)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {use-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method}@c
@methodsubindex{use-list}@c
@deffnx {Writer Method} {(setf use-list)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method}@c
@methodsubindex{(setf use-list)}@c
The definitions use-list for this definition's package.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST slot, , @t{use-list}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {used-by-list} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST generic reader}@c
@genericsubindex{used-by-list}@c
@deffnx {Generic Writer} {(setf used-by-list)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST❩ generic writer}@c
@genericsubindex{(setf used-by-list)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {used-by-list} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method}@c
@methodsubindex{used-by-list}@c
@deffnx {Writer Method} {(setf used-by-list)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method}@c
@methodsubindex{(setf used-by-list)}@c
The definitions used-by-list for this definition's package.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST slot, , @t{used-by-list}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {validate-superclass} (class superclass)
@anchor{go to the SB-MOP∶VALIDATE-SUPERCLASS generic function}@c
@genericsubindex{validate-superclass}@c
@table @strong
@item Package
@ref{go to the SB-MOP package, , @t{sb-mop}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {validate-superclass} (@ref{go to the COMMON-LISP∶STANDARD-CLASS class, , @t{standard-class}}, @ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS class, , @t{abstract-class}})
@anchor{go to the SB-MOP∶VALIDATE-SUPERCLASS ❨COMMON-LISP∶STANDARD-CLASS NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS❩ method}@c
@methodsubindex{validate-superclass}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {validate-superclass} (@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS class, , @t{abstract-class}}, @ref{go to the COMMON-LISP∶STANDARD-CLASS class, , @t{standard-class}})
@anchor{go to the SB-MOP∶VALIDATE-SUPERCLASS ❨NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS COMMON-LISP∶STANDARD-CLASS❩ method}@c
@methodsubindex{validate-superclass}@c
@table @strong
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {value-type} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VALUE-TYPE generic function}@c
@genericsubindex{value-type}@c
Return slot DEFINITION's value type.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {value-type} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION class, , @t{typed-structure-slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VALUE-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION❩ method}@c
@methodsubindex{value-type}@c
Return typed structure slot DEFINITION's value type.
@end deffn
@deffn {Method} {value-type} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION class, , @t{clos-slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VALUE-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION❩ method}@c
@methodsubindex{value-type}@c
Return CLOS slot DEFINITION's value type.
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {writers} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS generic reader}@c
@genericsubindex{writers}@c
@deffnx {Generic Writer} {(setf writers)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS❩ generic writer}@c
@genericsubindex{(setf writers)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {writers} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method}@c
@methodsubindex{writers}@c
@deffnx {Writer Method} {(setf writers)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method}@c
@methodsubindex{(setf writers)}@c
The list of definitions for this definition's slot writers.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS slot, , @t{writers}}.
@end table
@end deffn
@end table
@end deffn

@node Public method combinations, Public structures, Public generic functions, Public Interface
@subsection Method combinations
@deffn {Method Combination} {progn} (&optional order)
@anchor{go to the COMMON-LISP∶PROGN method combination}@c
@combinationsubindex{progn}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Identity with one argument
@t{t}
@item Client Functions
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE generic function, , @t{finalize}}.
@end table
@end deffn
@deffn {Method Combination} {standard} ()
@anchor{go to the COMMON-LISP∶STANDARD method combination}@c
@combinationsubindex{standard}@c
The standard method combination.
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Client Functions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS generic reader, , @t{author-emails}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS❩ generic writer, , @t{(setf author-emails)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES generic reader, , @t{author-names}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES❩ generic writer, , @t{(setf author-names)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME generic function, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN generic reader, , @t{children}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN❩ generic writer, , @t{(setf children)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶CLASSOID generic reader, , @t{classoid}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS generic reader, , @t{clients}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS❩ generic writer, , @t{(setf clients)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION generic reader, , @t{combination}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION❩ generic writer, , @t{(setf combination)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT generic reader, , @t{component}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION generic reader, , @t{conclusion}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION❩ generic writer, , @t{(setf conclusion)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS generic reader, , @t{contact-emails}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS❩ generic writer, , @t{(setf contact-emails)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES generic reader, , @t{contact-names}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES❩ generic writer, , @t{(setf contact-names)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS generic reader, , @t{copyright-years}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS❩ generic writer, , @t{(setf copyright-years)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CLASS generic reader, , @t{definition-class}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-COMPILER-MACRO generic reader, , @t{definition-compiler-macro}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CONDITION generic reader, , @t{definition-condition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-FUNCTION generic reader, , @t{definition-function}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-METHOD generic reader, , @t{definition-method}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-PACKAGE generic reader, , @t{definition-package}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-STRUCTURE generic reader, , @t{definition-structure}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-SYMBOL generic reader, , @t{definition-symbol}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS generic reader, , @t{definitions}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ generic writer, , @t{(setf definitions)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES generic reader, , @t{defsystem-dependencies}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES❩ generic writer, , @t{(setf defsystem-dependencies)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES generic reader, , @t{dependencies}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES❩ generic writer, , @t{(setf dependencies)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS generic reader, , @t{direct-methods}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS❩ generic writer, , @t{(setf direct-methods)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS generic reader, , @t{direct-slots}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS❩ generic writer, , @t{(setf direct-slots)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES generic reader, , @t{direct-subclasses}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES❩ generic writer, , @t{(setf direct-subclasses)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS generic reader, , @t{direct-subclassoids}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS❩ generic writer, , @t{(setf direct-subclassoids)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS generic reader, , @t{direct-subconditions}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS❩ generic writer, , @t{(setf direct-subconditions)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES generic reader, , @t{direct-substructures}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES❩ generic writer, , @t{(setf direct-substructures)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES generic reader, , @t{direct-superclasses}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES❩ generic writer, , @t{(setf direct-superclasses)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS generic reader, , @t{direct-superclassoids}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS❩ generic writer, , @t{(setf direct-superclassoids)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS generic reader, , @t{direct-superconditions}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS❩ generic writer, , @t{(setf direct-superconditions)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES generic reader, , @t{direct-superstructures}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES❩ generic writer, , @t{(setf direct-superstructures)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING generic function, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT generic function, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE generic reader, , @t{element-type}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE❩ generic writer, , @t{(setf element-type)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER generic reader, , @t{expander}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR generic reader, , @t{expander-for}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR❩ generic writer, , @t{(setf expander-for)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO generic reader, , @t{expanders-to}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO❩ generic writer, , @t{(setf expanders-to)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS generic reader, , @t{external-symbols}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS❩ generic writer, , @t{(setf external-symbols)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE generic reader, , @t{file}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FOREIGNP generic reader, , @t{foreignp}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FUNCOID generic reader, , @t{funcoid}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶GENERIC generic reader, , @t{generic}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE generic reader, , @t{home-package}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE❩ generic writer, , @t{(setf home-package)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶HYPERLINKS generic reader, , @t{hyperlinks}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶HYPERLINKS❩ generic writer, , @t{(setf hyperlinks)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME generic function, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS generic reader, , @t{internal-symbols}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS❩ generic writer, , @t{(setf internal-symbols)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION generic reader, , @t{introduction}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION❩ generic writer, , @t{(setf introduction)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST generic function, , @t{lambda-list}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME generic reader, , @t{library-name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME❩ generic writer, , @t{(setf library-name)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION generic reader, , @t{library-version}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION❩ generic writer, , @t{(setf library-version)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE generic reader, , @t{license}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE❩ generic writer, , @t{(setf license)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MACRO generic reader, , @t{macro}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS generic reader, , @t{maintainer-emails}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS❩ generic writer, , @t{(setf maintainer-emails)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES generic reader, , @t{maintainer-names}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES❩ generic writer, , @t{(setf maintainer-names)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS generic reader, , @t{methods}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS❩ generic writer, , @t{(setf methods)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE generic reader, , @t{module}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME generic function, , @t{name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT generic reader, , @t{object}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER generic reader, , @t{owner}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT generic reader, , @t{parent}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT❩ generic writer, , @t{(setf parent)}}.
@item
@ref{go to the COMMON-LISP∶PRINT-OBJECT generic function, , @t{print-object}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS generic function, , @t{private-definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS generic function, , @t{public-definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READERS generic reader, , @t{readers}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶READERS❩ generic writer, , @t{(setf readers)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME generic function, , @t{safe-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SLOT generic reader, , @t{slot}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE generic reader, , @t{source-file}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE❩ generic writer, , @t{(setf source-file)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME generic function, , @t{source-pathname}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS generic reader, , @t{specializers}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS❩ generic writer, , @t{(setf specializers)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR generic reader, , @t{standalone-combinator}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR❩ generic writer, , @t{(setf standalone-combinator)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER generic reader, , @t{standalone-reader}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER❩ generic writer, , @t{(setf standalone-reader)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER generic reader, , @t{standalone-writer}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER❩ generic writer, , @t{(setf standalone-writer)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE generic reader, , @t{structure-type}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE❩ generic writer, , @t{(setf structure-type)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM generic reader, , @t{system}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE generic reader, , @t{tagline}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE❩ generic writer, , @t{(setf tagline)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT generic reader, , @t{target-slot}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST generic reader, , @t{use-list}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST❩ generic writer, , @t{(setf use-list)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST generic reader, , @t{used-by-list}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST❩ generic writer, , @t{(setf used-by-list)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VALUE-TYPE generic function, , @t{value-type}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS generic reader, , @t{writers}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS❩ generic writer, , @t{(setf writers)}}.
@end itemize
@end table
@end deffn

@node Public structures, Public classes, Public method combinations, Public Interface
@subsection Structures
@deftp {Structure} {structure-object}
@anchor{go to the COMMON-LISP∶STRUCTURE-OBJECT structure}@c
@structuresubindex{structure-object}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE structure, , @t{node}}.
@end table
@end deftp

@node Public classes, Public types, Public structures, Public Interface
@subsection Classes
@deftp {Class} {abstract-class}
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS class}@c
@classsubindex{abstract-class}@c
The Abstract Class meta-class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-CLASS class, , @t{standard-class}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the COMMON-LISP∶MAKE-INSTANCE ❨NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS❩ method, , @t{make-instance}}.
@item
@ref{go to the SB-MOP∶VALIDATE-SUPERCLASS ❨COMMON-LISP∶STANDARD-CLASS NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS❩ method, , @t{validate-superclass}}.
@item
@ref{go to the SB-MOP∶VALIDATE-SUPERCLASS ❨NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS COMMON-LISP∶STANDARD-CLASS❩ method, , @t{validate-superclass}}.
@end itemize
@end table
@end deftp
@deftp {Class} {accessor-mixin}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class}@c
@classsubindex{accessor-mixin}@c
Mixin class for accessor definitions.@*
An accessor is a funcoid which reads or writes a target slot in a classoid.
More specifically@comma{} these are ordinary functions for structure slots@comma{}
and methods for classes or conditions slots.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION class, , @t{reader-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION class, , @t{reader-method-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION class, , @t{writer-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN❩ reader method, , @t{target-slot}}.
@item Direct slots
@defvr {Slot} target-slot
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT slot}@c
@slotsubindex{target-slot}@c
The target slot definition for this definition's accessor.
@table @strong
@item Initargs
@t{:target-slot}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TARGET-SLOT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN❩ reader method, , @t{target-slot}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {c-file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶C-FILE-DEFINITION class}@c
@classsubindex{c-file-definition}@c
The class of ASDF C file definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE-DEFINITION class, , @t{source-file-definition}}.
@end table
@end deftp
@deftp {Class} {cl-source-file}
@anchor{go to the ASDF/LISP-ACTION∶CL-SOURCE-FILE class}@c
@classsubindex{cl-source-file}@c
Component class for a Common Lisp source file (using type "lisp")
@table @strong
@item Package
@ref{go to the ASDF/LISP-ACTION package, , @t{asdf/lisp-action}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CL-SOURCE-FILE․ASD class, , @t{cl-source-file.asd}}.
@end table
@end deftp
@deftp {Class} {cl-source-file.asd}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CL-SOURCE-FILE․ASD class}@c
@classsubindex{cl-source-file.asd}@c
A fake ASDF Lisp file component class for system files.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the ASDF/LISP-ACTION∶CL-SOURCE-FILE class, , @t{cl-source-file}}.
@item Direct slots
@defvr {Slot} type
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CL-SOURCE-FILE․ASD->COMMON-LISP∶TYPE slot}@c
@slotsubindex{type}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Initform
@t{"asd"}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {class-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class}@c
@classsubindex{class-definition}@c
The class for class definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CLASS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{definition-class}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method, , @t{(setf direct-subclasses)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{direct-subclasses}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method, , @t{(setf direct-superclasses)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{direct-superclasses}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ method, , @t{index-command-name}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CLASS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{definition-class}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} direct-superclassoids
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot}@c
@slotsubindex{direct-superclassoids}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{direct-superclasses}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method, , @t{(setf direct-superclasses)}}.
@end table
@end defvr
@defvr {Slot} direct-subclassoids
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot}@c
@slotsubindex{direct-subclassoids}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method, , @t{direct-subclasses}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method, , @t{(setf direct-subclasses)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {classoid-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class}@c
@classsubindex{classoid-definition}@c
Abstract root class for classoid definitions.
These are conditions@comma{} structures@comma{} and classes.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class, , @t{structure-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶CLASSOID ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ reader method, , @t{classoid}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ writer method, , @t{(setf direct-slots)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ reader method, , @t{direct-slots}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:classoid}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶CLASSOID ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ reader method, , @t{classoid}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} direct-slots
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS slot}@c
@slotsubindex{direct-slots}@c
The list of direct slot definitions for this definition's classoid.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ reader method, , @t{direct-slots}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ writer method, , @t{(setf direct-slots)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {clos-classoid-mixin}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class}@c
@classsubindex{clos-classoid-mixin}@c
Mixin for CLOS-based classoids.@*
These are conditions@comma{} ordinary structures@comma{} and classes.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-methods)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-methods}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-subclassoids)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-subclassoids}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-superclassoids)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-superclassoids}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ method, , @t{initialize-instance}}.
@end itemize
@item Direct slots
@defvr {Slot} direct-superclassoids
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot}@c
@slotsubindex{direct-superclassoids}@c
The list of direct superclassoid definitions for this definition's classoid.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-superclassoids}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-superclassoids)}}.
@end table
@end defvr
@defvr {Slot} direct-subclassoids
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot}@c
@slotsubindex{direct-subclassoids}@c
The list of direct subclassoid definitions for this definition's classoid.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-subclassoids}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-subclassoids)}}.
@end table
@end defvr
@defvr {Slot} direct-methods
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS slot}@c
@slotsubindex{direct-methods}@c
The list of direct method definitions for this definition's classoid.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ reader method, , @t{direct-methods}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-methods)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {clos-slot-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION class}@c
@classsubindex{clos-slot-definition}@c
The class of CLOS slot definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VALUE-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION❩ method, , @t{value-type}}.
@end itemize
@end table
@end deftp
@deftp {Class} {clos-structure-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class}@c
@classsubindex{clos-structure-definition}@c
The class of CLOS structure definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class, , @t{structure-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method, , @t{(setf direct-substructures)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ reader method, , @t{direct-substructures}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method, , @t{(setf direct-superstructures)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ reader method, , @t{direct-superstructures}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end itemize
@item Direct slots
@defvr {Slot} direct-superclassoids
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot}@c
@slotsubindex{direct-superclassoids}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ reader method, , @t{direct-superstructures}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method, , @t{(setf direct-superstructures)}}.
@end table
@end defvr
@defvr {Slot} direct-subclassoids
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot}@c
@slotsubindex{direct-subclassoids}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ reader method, , @t{direct-substructures}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method, , @t{(setf direct-substructures)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {combination-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class}@c
@classsubindex{combination-definition}@c
Root class for method combination definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-COMBINATION-DEFINITION class, , @t{long-combination-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION class, , @t{short-combination-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ writer method, , @t{(setf clients)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ reader method, , @t{clients}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ reader method, , @t{combination}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ method, , @t{lambda-list}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:combination}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ reader method, , @t{combination}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} clients
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS slot}@c
@slotsubindex{clients}@c
The list of client definitions for this definition's method combnination.
These are generic functions using this combination.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ reader method, , @t{clients}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ writer method, , @t{(setf clients)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {compiler-macro-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class}@c
@classsubindex{compiler-macro-definition}@c
The class of compiler macro definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION class, , @t{setf-compiler-macro-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-COMPILER-MACRO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ reader method, , @t{definition-compiler-macro}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method, , @t{index-command-name}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:compiler-macro}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-COMPILER-MACRO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ reader method, , @t{definition-compiler-macro}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {component-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class}@c
@classsubindex{component-definition}@c
Abstract root class for ASDF components.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class, , @t{file-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{component}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method, , @t{(setf dependencies)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{dependencies}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method, , @t{name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method, , @t{(setf parent)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{parent}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method, , @t{safe-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method, , @t{source-pathname}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{component}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} parent
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT slot}@c
@slotsubindex{parent}@c
The parent definition for this definition's component.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{parent}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method, , @t{(setf parent)}}.
@end table
@end defvr
@defvr {Slot} dependencies
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES slot}@c
@slotsubindex{dependencies}@c
The list of dependency definitions for this definition's component.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ reader method, , @t{dependencies}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method, , @t{(setf dependencies)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {condition-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class}@c
@classsubindex{condition-definition}@c
The class of condition definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CONDITION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{definition-condition}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method, , @t{(setf direct-subconditions)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{direct-subconditions}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method, , @t{(setf direct-superconditions)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{direct-superconditions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ method, , @t{index-command-name}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CONDITION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{definition-condition}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} direct-superclassoids
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS slot}@c
@slotsubindex{direct-superclassoids}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{direct-superconditions}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method, , @t{(setf direct-superconditions)}}.
@end table
@end defvr
@defvr {Slot} direct-subclassoids
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS slot}@c
@slotsubindex{direct-subclassoids}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method, , @t{direct-subconditions}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method, , @t{(setf direct-subconditions)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {constant-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION class}@c
@classsubindex{constant-definition}@c
The class of constant definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION class, , @t{variable-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method, , @t{source-pathname}}.
@end itemize
@end table
@end deftp
@deftp {Class} {definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class}@c
@classsubindex{definition}@c
Abstract root class for all definitions.@*
All definitions respond to the following public protocols@comma{} which see:
- `name'@comma{}@*
- `docstring'.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FOREIGNP ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{foreignp}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{object}}.
@item
@ref{go to the COMMON-LISP∶PRINT-OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION COMMON-LISP∶T❩ method, , @t{print-object}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ method, , @t{safe-name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ writer method, , @t{(setf source-file)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{source-file}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
The corresponding Lisp object@comma{} or NIL.@*
Only constants@comma{} special variables@comma{} and symbol macros lack such an object.
@table @strong
@item Initargs
@t{:object}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{object}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} source-file
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE slot}@c
@slotsubindex{source-file}@c
The source file definition for this definition's object.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{source-file}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ writer method, , @t{(setf source-file)}}.
@end table
@end defvr
@defvr {Slot} foreign
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶FOREIGN slot}@c
@slotsubindex{foreign}@c
Whether this definition is foreign.
@table @strong
@item Initargs
@t{:foreign}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FOREIGNP ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method, , @t{foreignp}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {doc-file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOC-FILE-DEFINITION class}@c
@classsubindex{doc-file-definition}@c
The class of ASDF doc file definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STATIC-FILE-DEFINITION class, , @t{static-file-definition}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HTML-FILE-DEFINITION class, , @t{html-file-definition}}.
@end table
@end deftp
@deftp {Class} {expander-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class}@c
@classsubindex{expander-definition}@c
Abstract root class for setf expander definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION class, , @t{long-expander-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class, , @t{short-expander-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ reader method, , @t{expander}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method, , @t{source-pathname}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ writer method, , @t{(setf standalone-reader)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ reader method, , @t{standalone-reader}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:expander}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ reader method, , @t{expander}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} standalone-reader
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER slot}@c
@slotsubindex{standalone-reader}@c
A standalone reader definition for this definition's expander@comma{} or NIL.@*
If it exists@comma{} it's a definition for a function or macro with the same
signature as that of the expander's access-fn. Note that the Common Lisp
standard does not impose any actual relation between the setf expander and its
access-fn. In fact@comma{} the access-fn may not even exist at all. However@comma{} if it
does@comma{} it is very likely that it is a reader for the place updated by this setf
expander.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ reader method, , @t{standalone-reader}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ writer method, , @t{(setf standalone-reader)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {expander-mixin}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class}@c
@classsubindex{expander-mixin}@c
Mixin class for funcoids relatable to setf expanders.@*
These are (generic) functions and macros. A funcoid is relatable to a setf
expander when its signature is the same as that of an access-fn@comma{} or when a
short form setf expander expands to it (i.e.@comma{} it has this funcoid as its
update-fn).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class, , @t{macro-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION class, , @t{simple-function-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION class, , @t{simple-generic-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method, , @t{(setf expander-for)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ reader method, , @t{expander-for}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method, , @t{(setf expanders-to)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ reader method, , @t{expanders-to}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN COMMON-LISP∶T❩ method, , @t{finalize}}.
@end itemize
@item Direct slots
@defvr {Slot} expander-for
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR slot}@c
@slotsubindex{expander-for}@c
A setf expander definition for this funcoid@comma{} or NIL.@*
This is the definition of a setf expander that expands forms identical to this
funcoid's signature. There can be only one. Note that the Common Lisp standard
does not impose any actual relation between the setf expander and its
access-fn. In fact@comma{} the access-fn may not even exist at all. However@comma{} if it
does@comma{} it is very likely that it is a reader for the place updated by this setf
expander.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ reader method, , @t{expander-for}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method, , @t{(setf expander-for)}}.
@end table
@end defvr
@defvr {Slot} expanders-to
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN->NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO slot}@c
@slotsubindex{expanders-to}@c
The list of setf expander definitions to this funcoid.@*
This is a list of definitions for short form setf expanders that have this
funcoid as their update-fn. There might be more than one.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ reader method, , @t{expanders-to}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method, , @t{(setf expanders-to)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {extract}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class}@c
@classsubindex{extract}@c
The Extract class.@*
This is the class holding all extracted documentation information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf conclusion)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{conclusion}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf contact-emails)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{contact-emails}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf contact-names)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{contact-names}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf copyright-years)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{copyright-years}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{definitions}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf introduction)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{introduction}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf library-name)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{library-name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf library-version)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{library-version}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf license)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{license}}.
@item
@ref{go to the COMMON-LISP∶PRINT-OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT COMMON-LISP∶T❩ method, , @t{print-object}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf tagline)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{tagline}}.
@end itemize
@item Direct slots
@defvr {Slot} library-name
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME slot}@c
@slotsubindex{library-name}@c
The library's name.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{library-name}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf library-name)}}.
@end table
@end defvr
@defvr {Slot} tagline
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE slot}@c
@slotsubindex{tagline}@c
The reference manual's tagline.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{tagline}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf tagline)}}.
@end table
@end defvr
@defvr {Slot} library-version
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION slot}@c
@slotsubindex{library-version}@c
The library's version.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{library-version}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf library-version)}}.
@end table
@end defvr
@defvr {Slot} contact-names
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES slot}@c
@slotsubindex{contact-names}@c
The list of contact names for the library.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{contact-names}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf contact-names)}}.
@end table
@end defvr
@defvr {Slot} contact-emails
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS slot}@c
@slotsubindex{contact-emails}@c
The list of contact emails for the library.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{contact-emails}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf contact-emails)}}.
@end table
@end defvr
@defvr {Slot} copyright-years
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS slot}@c
@slotsubindex{copyright-years}@c
A copyright years string.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{copyright-years}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf copyright-years)}}.
@end table
@end defvr
@defvr {Slot} license
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE slot}@c
@slotsubindex{license}@c
The library's license.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{license}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf license)}}.
@end table
@end defvr
@defvr {Slot} introduction
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION slot}@c
@slotsubindex{introduction}@c
Contents for an introduction chapter.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{introduction}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf introduction)}}.
@end table
@end defvr
@defvr {Slot} conclusion
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION slot}@c
@slotsubindex{conclusion}@c
Contents for a conclusion chapter.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{conclusion}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf conclusion)}}.
@end table
@end defvr
@defvr {Slot} definitions
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT->NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS slot}@c
@slotsubindex{definitions}@c
The list of definitions.
@table @strong
@item Readers
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ reader method, , @t{definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ reader method, , @t{definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{definitions}}.
@end itemize
@item Writers
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@end itemize
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class}@c
@classsubindex{file-definition}@c
The class of ASDF file definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE-DEFINITION class, , @t{source-file-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ reader method, , @t{file}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method, , @t{safe-name}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:file}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ reader method, , @t{file}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {funcoid-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class}@c
@classsubindex{funcoid-definition}@c
Abstract root class for functional definitions.@*
These are (compiler) macros@comma{} (generic) functions@comma{} methods@comma{} setf expanders@comma{}
method combinations@comma{} and types.@*
All funcoid definitions respond to the following public protocols@comma{} which see:
- `lambda-list'.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class, , @t{compiler-macro-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION class, , @t{function-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class, , @t{macro-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FUNCOID ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION❩ reader method, , @t{funcoid}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION❩ method, , @t{lambda-list}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FUNCOID ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION❩ reader method, , @t{funcoid}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {function-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION class}@c
@classsubindex{function-definition}@c
Abstract root class for functions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION class, , @t{ordinary-function-definition}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-FUNCTION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION❩ reader method, , @t{definition-function}}.
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:function}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-FUNCTION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION❩ reader method, , @t{definition-function}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {generic-function-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class}@c
@classsubindex{generic-function-definition}@c
Abstract root class for generic function definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION class, , @t{function-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION class, , @t{generic-setf-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION class, , @t{simple-generic-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method, , @t{(setf combination)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{combination}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶GENERIC ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{generic}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method, , @t{initialize-instance}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method, , @t{(setf methods)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{methods}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:generic}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶GENERIC ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{generic}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} methods
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS slot}@c
@slotsubindex{methods}@c
The list of method definitions for this definition's generic function.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{methods}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method, , @t{(setf methods)}}.
@end table
@end defvr
@defvr {Slot} combination
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION slot}@c
@slotsubindex{combination}@c
The method combination definition for this definition's generic function.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method, , @t{combination}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method, , @t{(setf combination)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {generic-reader-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION class}@c
@classsubindex{generic-reader-definition}@c
The class of generic reader function definitions.@*
A generic function is considered to be a reader function when all its mehtods
are reader methods.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION class, , @t{simple-generic-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end itemize
@end table
@end deftp
@deftp {Class} {generic-setf-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION class}@c
@classsubindex{generic-setf-definition}@c
The class of generic setf function definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}}.
@end itemize
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION class, , @t{generic-setf-writer-definition}}.
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end table
@end deftp
@deftp {Class} {generic-setf-writer-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION class}@c
@classsubindex{generic-setf-writer-definition}@c
The class of generic setf writer function definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION class, , @t{generic-setf-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN class, , @t{generic-writer-mixin}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end table
@end deftp
@deftp {Class} {generic-writer-mixin}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN class}@c
@classsubindex{generic-writer-mixin}@c
Abstract root mixin for generic writer function definitions.@*
A generic function is considered to be a writer function when all its mehtods
are writer methods.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION class, , @t{generic-setf-writer-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-WRITER-DEFINITION class, , @t{simple-generic-writer-definition}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN❩ method, , @t{category-name}}.
@end table
@end deftp
@deftp {Class} {html-file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HTML-FILE-DEFINITION class}@c
@classsubindex{html-file-definition}@c
The class of ASDF HTML file definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOC-FILE-DEFINITION class, , @t{doc-file-definition}}.
@end table
@end deftp
@deftp {Class} {java-file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶JAVA-FILE-DEFINITION class}@c
@classsubindex{java-file-definition}@c
The class of ASDF Java file definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE-DEFINITION class, , @t{source-file-definition}}.
@end table
@end deftp
@deftp {Class} {lisp-file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class}@c
@classsubindex{lisp-file-definition}@c
The class of ASDF Lisp file definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE-DEFINITION class, , @t{source-file-definition}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-FILE-DEFINITION class, , @t{system-file-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ reader method, , @t{definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@end itemize
@item Direct slots
@defvr {Slot} definitions
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS slot}@c
@slotsubindex{definitions}@c
The list of definitions for this definition's file.
@table @strong
@item Readers
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ reader method, , @t{definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{definitions}}.
@end itemize
@item Writers
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@end itemize
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {long-combination-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-COMBINATION-DEFINITION class}@c
@classsubindex{long-combination-definition}@c
Class for long method combination definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}}.
@end table
@end deftp
@deftp {Class} {long-expander-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION class}@c
@classsubindex{long-expander-definition}@c
The class of long form setf expanders definitions.@*
This class is shared by expanders created with either the long form of
DEFSETF@comma{} or DEFINE-SETF-EXPANDER.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION❩ method, , @t{lambda-list}}.
@end itemize
@end table
@end deftp
@deftp {Class} {macro-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class}@c
@classsubindex{macro-definition}@c
The class of macro definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MACRO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ reader method, , @t{macro}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:macro}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MACRO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ reader method, , @t{macro}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {method-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class}@c
@classsubindex{method-definition}@c
Abstract root class for method definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-METHOD-DEFINITION class, , @t{setf-method-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-METHOD-DEFINITION class, , @t{simple-method-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-METHOD ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{definition-method}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method, , @t{lambda-list}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{owner}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method, , @t{safe-name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ writer method, , @t{(setf specializers)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{specializers}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:method}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-METHOD ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{definition-method}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} owner
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER slot}@c
@slotsubindex{owner}@c
The generic function definition for this definition's method.
@table @strong
@item Initargs
@t{:owner}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{owner}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} specializers
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS slot}@c
@slotsubindex{specializers}@c
The specializers of this definition's method.@*
This is a list of either class definitions (for regular specializers)@comma{}
or raw EQL specializers.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ reader method, , @t{specializers}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ writer method, , @t{(setf specializers)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {module-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class}@c
@classsubindex{module-definition}@c
The class of ASDF module definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ writer method, , @t{(setf children)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ reader method, , @t{children}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ reader method, , @t{module}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:module}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ reader method, , @t{module}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} children
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN slot}@c
@slotsubindex{children}@c
The list of child definitions for this definition's module.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ reader method, , @t{children}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ writer method, , @t{(setf children)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {ordinary-function-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION class}@c
@classsubindex{ordinary-function-definition}@c
Abstract root class for ordinary functions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION class, , @t{function-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-FUNCTION-DEFINITION class, , @t{setf-function-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION class, , @t{simple-function-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION❩ method, , @t{index-command-name}}.
@end itemize
@end table
@end deftp
@deftp {Class} {package-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class}@c
@classsubindex{package-definition}@c
The class of package definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-PACKAGE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{definition-package}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf external-symbols)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{external-symbols}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{initialize-instance}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf internal-symbols)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{internal-symbols}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{private-definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method, , @t{public-definitions}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf use-list)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{use-list}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf used-by-list)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{used-by-list}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:package}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-PACKAGE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{definition-package}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} external-symbols
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS slot}@c
@slotsubindex{external-symbols}@c
The list of corresponding external symbols.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{external-symbols}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf external-symbols)}}.
@end table
@end defvr
@defvr {Slot} internal-symbols
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS slot}@c
@slotsubindex{internal-symbols}@c
The list of corresponding internal symbols.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{internal-symbols}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf internal-symbols)}}.
@end table
@end defvr
@defvr {Slot} use-list
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST slot}@c
@slotsubindex{use-list}@c
The definitions use-list for this definition's package.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{use-list}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf use-list)}}.
@end table
@end defvr
@defvr {Slot} used-by-list
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST slot}@c
@slotsubindex{used-by-list}@c
The definitions used-by-list for this definition's package.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{used-by-list}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf used-by-list)}}.
@end table
@end defvr
@defvr {Slot} definitions
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS slot}@c
@slotsubindex{definitions}@c
The list of corresponding definitions.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method, , @t{definitions}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {reader-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION class}@c
@classsubindex{reader-definition}@c
The class of ordinary reader definitions.@*
An ordinary reader is an ordinary function that reads a slot in a
structure.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class, , @t{accessor-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION class, , @t{simple-function-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end itemize
@end table
@end deftp
@deftp {Class} {reader-method-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION class}@c
@classsubindex{reader-method-definition}@c
The class of reader method definitions.@*
A reader method is a method that reads a slot in a class or condition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class, , @t{accessor-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-METHOD-DEFINITION class, , @t{simple-method-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ∶AFTER ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION❩ method, , @t{update-instance-for-different-class}}.
@end itemize
@end table
@end deftp
@deftp {Class} {setf-compiler-macro-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION class}@c
@classsubindex{setf-compiler-macro-definition}@c
The class of setf compiler macro definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class, , @t{compiler-macro-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION❩ method, , @t{docstring}}.
@end table
@end deftp
@deftp {Class} {setf-function-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-FUNCTION-DEFINITION class}@c
@classsubindex{setf-function-definition}@c
The class of ordinary setf function definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION class, , @t{ordinary-function-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}}.
@end itemize
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION class, , @t{writer-definition}}.
@end table
@end deftp
@deftp {Class} {setf-method-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-METHOD-DEFINITION class}@c
@classsubindex{setf-method-definition}@c
The class of setf method definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-METHOD-DEFINITION❩ method, , @t{lambda-list}}.
@end table
@end deftp
@deftp {Class} {setf-mixin}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class}@c
@classsubindex{setf-mixin}@c
Mixin for setf funcoid definitions.@*
This mixin should be put before the funcoid superclass.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION class, , @t{generic-setf-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-COMPILER-MACRO-DEFINITION class, , @t{setf-compiler-macro-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-FUNCTION-DEFINITION class, , @t{setf-function-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-METHOD-DEFINITION class, , @t{setf-method-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-WRITER-METHOD-DEFINITION class, , @t{setf-writer-method-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN❩ method, , @t{lambda-list}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN❩ method, , @t{name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN❩ method, , @t{safe-name}}.
@end itemize
@end table
@end deftp
@deftp {Class} {setf-writer-method-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-WRITER-METHOD-DEFINITION class}@c
@classsubindex{setf-writer-method-definition}@c
The class of setf writer method definitions.@*
A setf writer method is a setf method that writes a slot in a class
or a condition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-WRITER-METHOD-DEFINITION❩ method, , @t{lambda-list}}.
@end table
@end deftp
@deftp {Class} {short-combination-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION class}@c
@classsubindex{short-combination-definition}@c
The class of short method combination definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ writer method, , @t{(setf standalone-combinator)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ reader method, , @t{standalone-combinator}}.
@end itemize
@item Direct slots
@defvr {Slot} standalone-combinator
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR slot}@c
@slotsubindex{standalone-combinator}@c
The corresponding standalone combinator definition@comma{} or NIL.@*
This is a function or macro definition. Note that if this definition
is unavailable@comma{} it means that the method combination itself cannot be used
(yet).
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ reader method, , @t{standalone-combinator}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ writer method, , @t{(setf standalone-combinator)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {short-expander-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class}@c
@classsubindex{short-expander-definition}@c
The class of short form setf expanders definitions.@*
Short form setf expanders simply expand to a globally defined function or
macro.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ method, , @t{lambda-list}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ writer method, , @t{(setf standalone-writer)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ reader method, , @t{standalone-writer}}.
@end itemize
@item Direct slots
@defvr {Slot} standalone-writer
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER slot}@c
@slotsubindex{standalone-writer}@c
A standalone writer definition for this definition's expander@comma{} or NIL.
This is a function or macro definition. Note that if this definition
is unavailable@comma{} it means that the expander itself cannot be used (yet).
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ reader method, , @t{standalone-writer}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ writer method, , @t{(setf standalone-writer)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {simple-function-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION class}@c
@classsubindex{simple-function-definition}@c
The class of ordinary@comma{} non-setf function definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION class, , @t{ordinary-function-definition}}.
@end itemize
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION class, , @t{reader-definition}}.
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end table
@end deftp
@deftp {Class} {simple-generic-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION class}@c
@classsubindex{simple-generic-definition}@c
The class of non-setf@comma{} generic function definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION class, , @t{generic-reader-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-WRITER-DEFINITION class, , @t{simple-generic-writer-definition}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end table
@end deftp
@deftp {Class} {simple-generic-writer-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-WRITER-DEFINITION class}@c
@classsubindex{simple-generic-writer-definition}@c
The class of simple generic writer function definitions.
These are non-setf writer generic functions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN class, , @t{generic-writer-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION class, , @t{simple-generic-definition}}.
@end itemize
@end table
@end deftp
@deftp {Class} {simple-method-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-METHOD-DEFINITION class}@c
@classsubindex{simple-method-definition}@c
The class of non-setf method definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION class, , @t{reader-method-definition}}.
@end table
@end deftp
@deftp {Class} {simple-writer-method-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-WRITER-METHOD-DEFINITION class}@c
@classsubindex{simple-writer-method-definition}@c
The class of non-setf writer method definitions.@*
A non-setf writer method is a non-setf method that writes a slot in a class
or a condition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}}.
@end table
@end deftp
@deftp {Class} {slot-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class}@c
@classsubindex{slot-definition}@c
Abstract root class for slots.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION class, , @t{varoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION class, , @t{clos-slot-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION class, , @t{typed-structure-slot-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{owner}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶READERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method, , @t{(setf readers)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{readers}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method, , @t{safe-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SLOT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{slot}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method, , @t{(setf writers)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{writers}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:slot}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SLOT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{slot}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} owner
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER slot}@c
@slotsubindex{owner}@c
The definition for the owner of this definition's slot.
@table @strong
@item Initargs
@t{:owner}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶OWNER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{owner}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} readers
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶READERS slot}@c
@slotsubindex{readers}@c
The list of definitions for this definition's slot readers.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{readers}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶READERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method, , @t{(setf readers)}}.
@end table
@end defvr
@defvr {Slot} writers
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS slot}@c
@slotsubindex{writers}@c
The list of definitions for this definition's slot writers.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method, , @t{writers}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method, , @t{(setf writers)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {source-file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE-DEFINITION class}@c
@classsubindex{source-file-definition}@c
The class of ASDF source file definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class, , @t{file-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶C-FILE-DEFINITION class, , @t{c-file-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶JAVA-FILE-DEFINITION class, , @t{java-file-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class, , @t{lisp-file-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STATIC-FILE-DEFINITION class, , @t{static-file-definition}}.
@end itemize
@end table
@end deftp
@deftp {Class} {special-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION class}@c
@classsubindex{special-definition}@c
The class of special variable definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION class, , @t{variable-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method, , @t{source-pathname}}.
@end itemize
@end table
@end deftp
@deftp {Class} {standard-class}
@anchor{go to the COMMON-LISP∶STANDARD-CLASS class}@c
@classsubindex{standard-class}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS class, , @t{abstract-class}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the SB-MOP∶VALIDATE-SUPERCLASS ❨COMMON-LISP∶STANDARD-CLASS NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS❩ method, , @t{validate-superclass}}.
@item
@ref{go to the SB-MOP∶VALIDATE-SUPERCLASS ❨NET․DIDIERVERNA․DECLT․SETUP∶ABSTRACT-CLASS COMMON-LISP∶STANDARD-CLASS❩ method, , @t{validate-superclass}}.
@end itemize
@item Direct Default Initargs
@multitable @columnfractions 0.3 0.5
@headitem Initarg @tab Value
@item @t{:direct-superclasses}
@tab @t{(list *the-class-standard-object*)}
@end multitable
@end table
@end deftp
@deftp {Class} {standard-object}
@anchor{go to the COMMON-LISP∶STANDARD-OBJECT class}@c
@classsubindex{standard-object}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class, , @t{accessor-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CONTEXT class, , @t{context}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT class, , @t{extract}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN class, , @t{generic-writer-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}}.
@end itemize
@end table
@end deftp
@deftp {Class} {static-file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STATIC-FILE-DEFINITION class}@c
@classsubindex{static-file-definition}@c
The class of ASDF static file definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE-DEFINITION class, , @t{source-file-definition}}.
@item Direct subclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOC-FILE-DEFINITION class, , @t{doc-file-definition}}.
@end table
@end deftp
@deftp {Class} {structure-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class}@c
@classsubindex{structure-definition}@c
Abstract root class for structures.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-STRUCTURE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ reader method, , @t{definition-structure}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ method, , @t{index-command-name}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-STRUCTURE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ reader method, , @t{definition-structure}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {symbol-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class}@c
@classsubindex{symbol-definition}@c
Abstract root class for all definitions named by symbols.@*
All symbol definitions respond to the following public protocols@comma{} which see:
- `publicp'.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION class, , @t{varoid-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-SYMBOL ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ reader method, , @t{definition-symbol}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ writer method, , @t{(setf home-package)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ reader method, , @t{home-package}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ method, , @t{name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ method, , @t{safe-name}}.
@end itemize
@item Direct slots
@defvr {Slot} symbol
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION->COMMON-LISP∶SYMBOL slot}@c
@slotsubindex{symbol}@c
The symbol naming this definition.
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Initargs
@t{:symbol}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION-SYMBOL ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ reader method, , @t{definition-symbol}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} home-package
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE slot}@c
@slotsubindex{home-package}@c
The home package definition for this definition's symbol.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ reader method, , @t{home-package}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ writer method, , @t{(setf home-package)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {symbol-macro-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION class}@c
@classsubindex{symbol-macro-definition}@c
The class of symbol macro definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION class, , @t{varoid-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method, , @t{source-pathname}}.
@end itemize
@end table
@end deftp
@deftp {Class} {system-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class}@c
@classsubindex{system-definition}@c
The class of ASDF system definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf author-emails)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{author-emails}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf author-names)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{author-names}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf defsystem-dependencies)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{defsystem-dependencies}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method, , @t{initialize-instance}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf maintainer-emails)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{maintainer-emails}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf maintainer-names)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{maintainer-names}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{system}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:system}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{system}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} parent
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT slot}@c
@slotsubindex{parent}@c
@table @strong
@end table
@end defvr
@defvr {Slot} maintainer-names
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES slot}@c
@slotsubindex{maintainer-names}@c
The list of maintainer names.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{maintainer-names}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf maintainer-names)}}.
@end table
@end defvr
@defvr {Slot} maintainer-emails
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS slot}@c
@slotsubindex{maintainer-emails}@c
The list of maintainer emails.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{maintainer-emails}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf maintainer-emails)}}.
@end table
@end defvr
@defvr {Slot} author-names
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES slot}@c
@slotsubindex{author-names}@c
The list of author names.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{author-names}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf author-names)}}.
@end table
@end defvr
@defvr {Slot} author-emails
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS slot}@c
@slotsubindex{author-emails}@c
The list of maintainer emails.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{author-emails}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf author-emails)}}.
@end table
@end defvr
@defvr {Slot} defsystem-dependencies
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES slot}@c
@slotsubindex{defsystem-dependencies}@c
The list of defsystem dependency definitions.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method, , @t{defsystem-dependencies}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf defsystem-dependencies)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {system-file-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-FILE-DEFINITION class}@c
@classsubindex{system-file-definition}@c
The class of ASDF system file definitions.@*
This class represents ASDF system files as Lisp files. Because system files
are not components@comma{} we use an ad-hoc fake component class for them@comma{}
`cl-source-file.asd'@comma{} which see.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class, , @t{lisp-file-definition}}.
@item Direct methods
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-FILE-DEFINITION❩ method, , @t{initialize-instance}}.
@end table
@end deftp
@deftp {Class} {t}
@anchor{go to the COMMON-LISP∶T class}@c
@classsubindex{t}@c
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf author-emails)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶AUTHOR-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf author-names)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ writer method, , @t{(setf children)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CLIENTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ writer method, , @t{(setf clients)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method, , @t{(setf combination)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONCLUSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf conclusion)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf contact-emails)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶CONTACT-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf contact-names)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶COPYRIGHT-YEARS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf copyright-years)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf definitions)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEFSYSTEM-DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf defsystem-dependencies)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DEPENDENCIES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method, , @t{(setf dependencies)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-methods)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SLOTS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ writer method, , @t{(setf direct-slots)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method, , @t{(setf direct-subclasses)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-subclassoids)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method, , @t{(setf direct-subconditions)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUBSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method, , @t{(setf direct-substructures)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ writer method, , @t{(setf direct-superclasses)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCLASSOIDS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN❩ writer method, , @t{(setf direct-superclassoids)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERCONDITIONS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ writer method, , @t{(setf direct-superconditions)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶DIRECT-SUPERSTRUCTURES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION❩ writer method, , @t{(setf direct-superstructures)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨COMMON-LISP∶T❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method, , @t{(setf element-type)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-FOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method, , @t{(setf expander-for)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDERS-TO❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN❩ writer method, , @t{(setf expanders-to)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf external-symbols)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶HOME-PACKAGE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ writer method, , @t{(setf home-package)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶HYPERLINKS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ writer method, , @t{(setf hyperlinks)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf internal-symbols)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶INTRODUCTION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf introduction)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-NAME❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf library-name)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LIBRARY-VERSION❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf library-version)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶LICENSE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf license)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-EMAILS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf maintainer-emails)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶MAINTAINER-NAMES❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ writer method, , @t{(setf maintainer-names)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶METHODS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ writer method, , @t{(setf methods)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶PARENT❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ writer method, , @t{(setf parent)}}.
@item
@ref{go to the COMMON-LISP∶PRINT-OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT COMMON-LISP∶T❩ method, , @t{print-object}}.
@item
@ref{go to the COMMON-LISP∶PRINT-OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION COMMON-LISP∶T❩ method, , @t{print-object}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PRIVATE-DEFINITIONS ❨COMMON-LISP∶T❩ method, , @t{private-definitions}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PUBLIC-DEFINITIONS ❨COMMON-LISP∶T❩ method, , @t{public-definitions}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶READERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method, , @t{(setf readers)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SOURCE-FILE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ writer method, , @t{(setf source-file)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨COMMON-LISP∶T❩ method, , @t{source-pathname}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIALIZERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ writer method, , @t{(setf specializers)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-COMBINATOR❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION❩ writer method, , @t{(setf standalone-combinator)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-READER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ writer method, , @t{(setf standalone-reader)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STANDALONE-WRITER❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION❩ writer method, , @t{(setf standalone-writer)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method, , @t{(setf structure-type)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶TAGLINE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶EXTRACT❩ writer method, , @t{(setf tagline)}}.
@item
@ref{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ∶AFTER ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION❩ method, , @t{update-instance-for-different-class}}.
@item
@ref{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ∶AFTER ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION❩ method, , @t{update-instance-for-different-class}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USE-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf use-list)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶USED-BY-LIST❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method, , @t{(setf used-by-list)}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶WRITERS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ writer method, , @t{(setf writers)}}.
@end itemize
@end table
@end deftp
@deftp {Class} {type-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class}@c
@classsubindex{type-definition}@c
The class of type definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ reader method, , @t{expander}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{index-command-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LAMBDA-LIST ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{lambda-list}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method, , @t{source-pathname}}.
@end itemize
@item Direct slots
@defvr {Slot} object
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:expander}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ reader method, , @t{expander}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {typed-structure-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class}@c
@classsubindex{typed-structure-definition}@c
The class of typed structure definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class, , @t{structure-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method, , @t{(setf element-type)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ reader method, , @t{element-type}}.
@item
@ref{go to the COMMON-LISP∶INITIALIZE-INSTANCE ∶AFTER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ method, , @t{initialize-instance}}.
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method, , @t{(setf structure-type)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ reader method, , @t{structure-type}}.
@end itemize
@item Direct slots
@defvr {Slot} type
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION->COMMON-LISP∶TYPE slot}@c
@slotsubindex{type}@c
The structure type@comma{} either LIST or VECTOR.
@table @strong
@item Package
@ref{go to the COMMON-LISP package, , @t{common-lisp}}.
@item Initargs
@t{:type}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ reader method, , @t{structure-type}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method, , @t{(setf structure-type)}}.
@end table
@end defvr
@defvr {Slot} element-type
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE slot}@c
@slotsubindex{element-type}@c
The structure's element type.@*
It is T for list structures@comma{} but may be something else for vector ones.
@table @strong
@item Initargs
@t{:element-type}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ reader method, , @t{element-type}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶ELEMENT-TYPE❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION❩ writer method, , @t{(setf element-type)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {typed-structure-slot-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION class}@c
@classsubindex{typed-structure-slot-definition}@c
The class of typed structure slot definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION❩ method, , @t{docstring}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION COMMON-LISP∶T❩ method, , @t{finalize}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VALUE-TYPE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION❩ method, , @t{value-type}}.
@end itemize
@end table
@end deftp
@deftp {Class} {variable-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION class}@c
@classsubindex{variable-definition}@c
Abstract root class for constant and special variables.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION class, , @t{varoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION class, , @t{constant-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION class, , @t{special-definition}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DOCSTRING ❨NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION❩ method, , @t{docstring}}.
@end table
@end deftp
@deftp {Class} {varoid-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION class}@c
@classsubindex{varoid-definition}@c
Abstract root class for simply valued symbol definitions.
These are constants@comma{} special variables@comma{} and symbol macros.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION class, , @t{symbol-macro-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VARIABLE-DEFINITION class, , @t{variable-definition}}.
@end itemize
@item Direct methods
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end table
@end deftp
@deftp {Class} {writer-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION class}@c
@classsubindex{writer-definition}@c
The class of ordinary writer definitions.@*
An ordinary writer is an ordinary function that writes a slot in a
structure.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class, , @t{accessor-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-FUNCTION-DEFINITION class, , @t{setf-function-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@end itemize
@end table
@end deftp
@deftp {Class} {writer-method-definition}
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class}@c
@classsubindex{writer-method-definition}@c
Abstract root class for writer method definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ACCESSOR-MIXIN class, , @t{accessor-mixin}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-WRITER-METHOD-DEFINITION class, , @t{setf-writer-method-definition}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-WRITER-METHOD-DEFINITION class, , @t{simple-writer-method-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION❩ method, , @t{category-name}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION COMMON-LISP∶T❩ method, , @t{document}}.
@item
@ref{go to the COMMON-LISP∶UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ∶AFTER ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION❩ method, , @t{update-instance-for-different-class}}.
@end itemize
@end table
@end deftp

@node Public types, , Public classes, Public Interface
@subsection Types
@deftp {Type} {non-empty-string} ()
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶NON-EMPTY-STRING type}@c
@typesubindex{non-empty-string}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deftp


@c ---------
@c Internals
@c ---------
@node Internals, , Public Interface, Definitions
@section Internals
@menu
* Private special variables::
* Private macros::
* Private ordinary functions::
* Private generic functions::
* Private structures::
* Private classes::
@end menu

@node Private special variables, Private macros, Internals, Internals
@subsection Special variables
@defvr {Special Variable} *blanks*
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶*BLANKS* special variable}@c
@specialsubindex{*blanks*}@c
A list of blank characters and their associated revealed representation.
Each element in this list is of the form (@hashchar{}BLANK . @hashchar{}REPLACEMENT).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *categories*
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶*CATEGORIES* special variable}@c
@specialsubindex{*categories*}@c
The list of definition categories.@*
Each category is of type (TYPE DESCRIPTION-STRING).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *configuration*
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶*CONFIGURATION* special variable}@c
@specialsubindex{*configuration*}@c
The Declt configuration settings.@*
This variable contains a property list of configuration options.
Current options are:@*
- :swank-eval-in-emacs (Boolean)@*

See Section 4.1 of the user manual for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/configuration․lisp file, , @t{configuration.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *finalized*
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶*FINALIZED* special variable}@c
@specialsubindex{*finalized*}@c
Whether the finalization process is over.@*
This variable is dynamically set to NIL whenever new definitions are
created during the finalization process. The finalization process is run over
and over again until nothing moves anymore.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *fragile-characters*
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶*FRAGILE-CHARACTERS* special variable}@c
@specialsubindex{*fragile-characters*}@c
An association list of Texinfo fragile (anchor) characters.
Elements are the form (CHAR . ALT) where CHAR is the fragile (anchor)
character and ALT is an alternative Unicode character.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *licenses*
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶*LICENSES* special variable}@c
@specialsubindex{*licenses*}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/license․lisp file, , @t{license.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *section-names*
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶*SECTION-NAMES* special variable}@c
@specialsubindex{*section-names*}@c
The numbered@comma{} unumbered and appendix section names sorted by level.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end defvr
@defvr {Special Variable} *special-characters*
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶*SPECIAL-CHARACTERS* special variable}@c
@specialsubindex{*special-characters*}@c
An association list of Texinfo special characters.@*
Elements are the form (CHAR . COMMAND) where CHAR is the special character and
COMMAND is the name of the corresponding Texinfo alphabetic command.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end defvr

@node Private macros, Private ordinary functions, Private special variables, Internals
@subsection Macros
@deffn {Macro} {@atchar{}defcombination} (name lambda-list &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFCOMBINATION macro}@c
@macrosubindex{@atchar{}defcombination}@c
Execute BODY within a @atchar{}deftp @lbracechar{}KIND Method Combination@rbracechar{} NAME environment.
NAME is escaped for Texinfo prior to rendering.@*
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}deffn} ((category name lambda-list &optional qualifiers) &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFFN macro}@c
@macrosubindex{@atchar{}deffn}@c
Execute BODY under @atchar{}deffn CATEGORY NAME [QUALIFIERS] LAMBDA-LIST.
CATEGORY@comma{} NAME@comma{} QUALIFIERS@comma{} and LAMBDA-LIST are escaped for Texinfo prior to
rendering. LAMBDA-LIST should be provided by `safe-lambda-list'@comma{} which see.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}defmethod} (category name qualifiers lambda-list &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFMETHOD macro}@c
@macrosubindex{@atchar{}defmethod}@c
Execute BODY under @atchar{}deffn CATEGORY NAME QUALIFIERS LAMBDA-LIST.
CATEGORY@comma{} NAME@comma{} and LAMBDA-LIST are escaped for Texinfo prior to rendering.
LAMBDA-LIST should be provided by `safe-lambda-list'@comma{} which see.@*
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}deftp} ((category name &optional lambda-list) &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFTP macro}@c
@macrosubindex{@atchar{}deftp}@c
Execute BODY within a @atchar{}deftp CATEGORY NAME [LAMBDA-LIST] environment.
CATEGORY@comma{} NAME@comma{} and LAMBDA-LIST are escaped for Texinfo prior to rendering.
LAMBDA-LIST should be provided by `safe-lambda-list'@comma{} which see.@*
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}deftype} (name lambda-list &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFTYPE macro}@c
@macrosubindex{@atchar{}deftype}@c
Execute BODY within a @atchar{}deftp Type NAME LAMBDA-LIST environment.
NAME and LAMBDA-LIST are escaped for Texinfo prior to rendering.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}defvr} (category name &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFVR macro}@c
@macrosubindex{@atchar{}defvr}@c
Execute BODY within a @atchar{}defvr @lbracechar{}CATEGORY@rbracechar{} NAME environment.
CATEGORY and NAME are escaped for Texinfo prior to rendering.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}item} (&body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEM macro}@c
@macrosubindex{@atchar{}item}@c
Execute BODY within an itemize @atchar{}item.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}itemize} ((&optional kind) &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEMIZE macro}@c
@macrosubindex{@atchar{}itemize}@c
Execute BODY within an @atchar{}itemize KIND environment.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}multitable} ((&rest fractions) &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}MULTITABLE macro}@c
@macrosubindex{@atchar{}multitable}@c
Execute BODY within a @atchar{}multitable environment.
FRACTIONS is the list of column fractions to use.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}table} ((&optional kind) &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}TABLE macro}@c
@macrosubindex{@atchar{}table}@c
Execute BODY within a @atchar{}table KIND environment.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {@atchar{}tableitem} (title &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}TABLEITEM macro}@c
@macrosubindex{@atchar{}tableitem}@c
Execute BODY within a table @atchar{}item TITLE.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {defindent} (symbol indent)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶DEFINDENT macro}@c
@macrosubindex{defindent}@c
Wrapper around `clindent' to avoid quoting SYMBOL and INDENT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/readtable․lisp file, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Macro} {render-clos-classoid} (definition context &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-CLOS-CLASSOID macro}@c
@macrosubindex{render-clos-classoid}@c
Execute BODY within a CLOS classoid DEFINITION documentation in CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Macro} {render-funcoid} (definition(s) context &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-FUNCOID macro}@c
@macrosubindex{render-funcoid}@c
Render funcoid DEFINITION(S) documentation in CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Macro} {render-method} (definition(s) context &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-METHOD macro}@c
@macrosubindex{render-method}@c
Execute BODY within a method DEFINITION(S) documentation in CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Macro} {render-to-string} (&body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TO-STRING macro}@c
@macrosubindex{render-to-string}@c
Execute BODY with *standard-output* redirected to a string.
Return that string.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {render-varoid} (definition context &body body)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-VAROID macro}@c
@macrosubindex{render-varoid}@c
Execute BODY within a varoid DEFINITION documentation in CONTEXT.
BODY is executed within a @atchar{}table environement.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn

@node Private ordinary functions, Private generic functions, Private macros, Internals
@subsection Ordinary functions
@deffn {Function} {%version} (type major minor status level name)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶%VERSION function}@c
@functionsubindex{%version}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}anchor} (anchor)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ANCHOR function}@c
@functionsubindex{@atchar{}anchor}@c
Render ANCHOR as an @atchar{}anchor.@*
ANCHOR is escaped for Texinfo prior to rendering.
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}deffnx} (category name lambda-list &optional qualifiers)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFFNX function}@c
@functionsubindex{@atchar{}deffnx}@c
Render @atchar{}deffnx CATEGORY NAME [QUALIFIERS] LAMBDA-LIST on *standard-output*.
CATEGORY@comma{} NAME@comma{} QUALIFIERS@comma{} and LAMBDA-LIST are escaped for Texinfo prior to
rendering. LAMBDA-LIST should be provided by `safe-lambda-list'@comma{} which see.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}defmethodx} (category name qualifiers lambda-list)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}DEFMETHODX function}@c
@functionsubindex{@atchar{}defmethodx}@c
Render @atchar{}deffnx CATEGORY NAME QUALIFIERS LAMBDA-LIST on *standard-output*.
CATEGORY@comma{} NAME@comma{} QUALIFIERS@comma{} and LAMBDA-LIST are escaped for Texinfo prior to
rendering. LAMBDA-LIST should be provided by `safe-lambda-list'@comma{} which see.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}itemize-list} (list &key renderer kind format key)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}ITEMIZE-LIST function}@c
@functionsubindex{@atchar{}itemize-list}@c
Render a LIST of items within an @atchar{}itemize KIND environment.@*
If RENDERER is non-nil@comma{} it must be a function of one argument (every LIST
element) that performs the rendering on *standard-output* directly. Otherwise@comma{}
the rendering is done by calling format@comma{} as explained below.@*

- FORMAT is the format string to use for every LIST element.@*
- KEY is a function of one argument (every LIST element) used to provide
  the necessary arguments to the FORMAT string. If multiple arguments are
  needed@comma{} they should be returned by KEY as multiple values.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}ref} (anchor label)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶@atchar{}REF function}@c
@functionsubindex{@atchar{}ref}@c
Render ANCHOR as an @atchar{}ref with online and printed LABEL.@*
Both ANCHOR and LABEL are escaped for Texinfo prior to rendering.
LABEL is rendered in teletype.@*
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {add-categories-node} (parent context status definitions)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CATEGORIES-NODE function}@c
@functionsubindex{add-categories-node}@c
Add the STATUS DEFINITIONS categories nodes to PARENT in CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {add-category-node} (parent context status category definitions)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CATEGORY-NODE function}@c
@functionsubindex{add-category-node}@c
Add the STATUS CATEGORY node to PARENT for DEFINITIONS in CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {add-child} (parent child &aux previous)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ADD-CHILD function}@c
@functionsubindex{add-child}@c
Add CHILD node to PARENT node and return CHILD.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {add-definitions-node} (parent extract context &aux public-definitions public-definitions-number private-definitions private-definitions-number)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ADD-DEFINITIONS-NODE function}@c
@functionsubindex{add-definitions-node}@c
Add EXTRACT's definitions node to PARENT in CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {add-files-node} (parent extract context &aux lisp-file-definitions c-file-definitions java-file-definitions html-file-definitions doc-file-definitions static-file-definitions source-file-definitions file-definitions files-node)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ADD-FILES-NODE function}@c
@functionsubindex{add-files-node}@c
Add the files node to PARENT in EXTRACT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {add-modules-node} (parent extract context)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ADD-MODULES-NODE function}@c
@functionsubindex{add-modules-node}@c
Add the modules node to PARENT in EXTRACT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {add-packages-node} (parent extract context)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ADD-PACKAGES-NODE function}@c
@functionsubindex{add-packages-node}@c
Add the packages node to PARENT in EXTRACT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {add-systems-node} (parent extract context &aux systems-node)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ADD-SYSTEMS-NODE function}@c
@functionsubindex{add-systems-node}@c
Add the systems node to PARENT in EXTRACT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {anchor} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR function}@c
@functionsubindex{anchor}@c
Render DEFINITION's anchoring command on *STANDARD-OUTPUT*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {anchor-and-index} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR-AND-INDEX function}@c
@functionsubindex{anchor-and-index}@c
Render DEFINITION's anchoring and indexing commands on *STANDARD-OUTPUT*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {anchor-name} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ANCHOR-NAME function}@c
@functionsubindex{anchor-name}@c
Return DEFINITION's anchor name.@*
It is of the form "go to the <qualified safe name> <type name>".
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {clindent} (symbol indent)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶CLINDENT function}@c
@functionsubindex{clindent}@c
Send SYMBOL's INDENTation information to Emacs.@*
Emacs will set the 'common-lisp-indent-function property.@*
If INDENT is a symbol@comma{} use its indentation definition. Otherwise@comma{} INDENT is
considered as an indentation definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/readtable․lisp file, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Function} {component-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶COMPONENT-DEFINITION-P function}@c
@functionsubindex{component-definition-p}@c
Return T if DEFINITION is a component definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {components} (module type)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶COMPONENTS function}@c
@functionsubindex{components}@c
Return the list of all (sub)TYPE components found in MODULE's tree.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-node} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶COPY-NODE function}@c
@functionsubindex{copy-node}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {current-time-string} ()
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CURRENT-TIME-STRING function}@c
@functionsubindex{current-time-string}@c
Return the current time as a string.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/util/misc․lisp file, , @t{misc.lisp}}.
@end table
@end deffn
@deffn {Function} {definition-source-by-name} (definition type &key name)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-SOURCE-BY-NAME function}@c
@functionsubindex{definition-source-by-name}@c
Return DEFINITION's source for TYPE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {escape} (string)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE function}@c
@functionsubindex{escape}@c
When STRING@comma{} escape it for Texinfo.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {escape-anchor} (string)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-ANCHOR function}@c
@functionsubindex{escape-anchor}@c
Escape STRING for use as a Texinfo anchor name.@*
In addition to regular escaping@comma{} periods@comma{} commas@comma{} colons@comma{} and parenthesis are
replaced with alternative Unicode characters.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {escape-label} (string)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-LABEL function}@c
@functionsubindex{escape-label}@c
Escape STRING for use as a Texinfo anchor label.@*
In addition to regular escaping@comma{} colons are replaced with alternative Unicode
characters.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {escape-lambda-list} (lambda-list)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶ESCAPE-LAMBDA-LIST function}@c
@functionsubindex{escape-lambda-list}@c
Escape safe LAMBDA-LIST for Texinfo.@*
This function expects a value from `safe-lambda-list'@comma{} or
`safe-specializers'@comma{} which see. It returns a string properly escaped for
Texinfo@comma{} apart from @ampchar{}-constructs which retain their original form@comma{} and @atchar{}ref's
which are already properly set.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {file-components} (module)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FILE-COMPONENTS function}@c
@functionsubindex{file-components}@c
Return the list of all file components found in MODULE's tree.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {file-node} (definition context)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶FILE-NODE function}@c
@functionsubindex{file-node}@c
Create and return a file DEFINITION node in EXTRACT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {finalize-clos-classoid-slot} (definition definitions &aux slot owner classoid)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE-CLOS-CLASSOID-SLOT function}@c
@functionsubindex{finalize-clos-classoid-slot}@c
Compute CLOS classoid slot DEFINITION's reader and writer definitions.
This function is used for regular class and condition slots.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {finalize-clos-structure-slot} (definition definitions &aux slot owner)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE-CLOS-STRUCTURE-SLOT function}@c
@functionsubindex{finalize-clos-structure-slot}@c
Compute CLOS structure slot DEFINITION's reader and writer definitions.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {find-definition} (object definitions)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FIND-DEFINITION function}@c
@functionsubindex{find-definition}@c
Find a definition for OBJECT in DEFINITIONS.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@end table
@end deffn
@deffn {Function} {first-word-length} (string)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶FIRST-WORD-LENGTH function}@c
@functionsubindex{first-word-length}@c
Return the length of the first word in STRING.
Initial whitespace characters are skipped.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {foreign-funcoid-definition} (name)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FOREIGN-FUNCOID-DEFINITION function}@c
@functionsubindex{foreign-funcoid-definition}@c
Return a new foreign macro or function definition for NAME@comma{} or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {i-reader} (stream subchar arg)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶I-READER function}@c
@functionsubindex{i-reader}@c
Construct a call to `defindent' by reading an argument list from STREAM.
This dispatch macro character function is installed on @hashchar{}i in the
NET.DIDIERVERNA.DECLT named readtable.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/readtable․lisp file, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Function} {index} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX function}@c
@functionsubindex{index}@c
Render DEFINITION's indexing command on *STANDARD-OUTPUT*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {lisp-file-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶LISP-FILE-DEFINITION-P function}@c
@functionsubindex{lisp-file-definition-p}@c
Return T if DEFINITION is a Lisp file definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {load-system} (system-name &aux system)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶LOAD-SYSTEM function}@c
@functionsubindex{load-system}@c
Load ASDF SYSTEM-NAME in a manner suitable to extract documentation.
Return the corresponding ASDF system.@*
SYSTEM-NAME is an ASDF system designator.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {long-title} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶LONG-TITLE function}@c
@functionsubindex{long-title}@c
Return a long title for DEFINITION.@*
It is of the form "The <qualified safe name> <type name>".
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-file-definitions} (definitions &aux systems)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-FILE-DEFINITIONS function}@c
@functionsubindex{make-all-file-definitions}@c
Return a list of all file definitions for system DEFINITIONS.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-module-definitions} (definitions)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-MODULE-DEFINITIONS function}@c
@functionsubindex{make-all-module-definitions}@c
Return a list of all module definitions for system DEFINITIONS.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-package-definitions} (file-definitions system-definitions &aux packages pathnames prefixes definitions)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-PACKAGE-DEFINITIONS function}@c
@functionsubindex{make-all-package-definitions}@c
Return a list of all package definitions for FILE- and SYSTEM-DEFINITIONS.
This list contains definitions for packages defined in the corresponding
files@comma{} or for which the source is not found@comma{} but the name is of the form
SYSTEM/... (case insensitive) for one of the corresponding systems.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-symbol-definitions} (definitions)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-SYMBOL-DEFINITIONS function}@c
@functionsubindex{make-all-symbol-definitions}@c
Return a list of all symbol definitions for package DEFINITIONS.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-system-definitions} (system)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-ALL-SYSTEM-DEFINITIONS function}@c
@functionsubindex{make-all-system-definitions}@c
Return a list of all system definitions for SYSTEM.@*
The only guarantee is that the definition for SYSTEM comes first.
The other considered systems are those found recursively in SYSTEM's
dependencies@comma{} and located under SYSTEM's directory.@*
See `subsystems' for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {make-classoid-definition} (symbol classoid &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CLASSOID-DEFINITION function}@c
@functionsubindex{make-classoid-definition}@c
Make a new CLASSOID definition for SYMBOL@comma{} possibly FOREIGN.@*
The concrete class of the new definition (structure@comma{} class@comma{} or condition)
depends on the kind of CLASSOID.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-clos-slot-definition} (slot owner &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CLOS-SLOT-DEFINITION function}@c
@functionsubindex{make-clos-slot-definition}@c
Make a new CLOS SLOT definition for classoid OWNER.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-combination-definition} (symbol combination &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMBINATION-DEFINITION function}@c
@functionsubindex{make-combination-definition}@c
Make a new method COMBINATION definition for SYMBOL@comma{} possibly FOREIGN.
The concrete class of the new definition depends on the COMBINATION type.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-compiler-macro-definition} (symbol compiler-macro &optional setf)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMPILER-MACRO-DEFINITION function}@c
@functionsubindex{make-compiler-macro-definition}@c
Make a new COMPILER-MACRO definition for SYMBOL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-component-definition} (component &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-COMPONENT-DEFINITION function}@c
@functionsubindex{make-component-definition}@c
Make a new COMPONENT definition of the appropriate class@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {make-constant-definition} (symbol)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-CONSTANT-DEFINITION function}@c
@functionsubindex{make-constant-definition}@c
Make a new constant definition for SYMBOL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-context} ()
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶MAKE-CONTEXT function}@c
@functionsubindex{make-context}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {make-expander-definition} (symbol expander)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-EXPANDER-DEFINITION function}@c
@functionsubindex{make-expander-definition}@c
Make a new setf EXPANDER definition for SYMBOL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-extract} ()
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-EXTRACT function}@c
@functionsubindex{make-extract}@c
Make a new extract.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {make-file-definition} (file &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FILE-DEFINITION function}@c
@functionsubindex{make-file-definition}@c
Make a new FILE definition.@*
The concrete class of the new definition depends on the kind of FILE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-foreign-funcoid-definition} (name &aux macro-function)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FOREIGN-FUNCOID-DEFINITION function}@c
@functionsubindex{make-foreign-funcoid-definition}@c
Make a new foreign macro or function definition for NAME.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {make-function-definition} (symbol function &key setf foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-FUNCTION-DEFINITION function}@c
@functionsubindex{make-function-definition}@c
Make a new FUNCTION definition for (SETF) SYMBOL@comma{} possibly FOREIGN.@*
The concrete class of the new definition depends on the kind of FUNCTION@comma{} and
whether it is a SETF one.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-generic-definition} (generic &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-GENERIC-DEFINITION function}@c
@functionsubindex{make-generic-definition}@c
Make a new GENERIC function definition@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {make-macro-definition} (symbol macro &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-MACRO-DEFINITION function}@c
@functionsubindex{make-macro-definition}@c
Make a new MACRO definition for SYMBOL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-method-definition} (method definition &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-METHOD-DEFINITION function}@c
@functionsubindex{make-method-definition}@c
Make a new METHOD definition for generic DEFINITION@comma{} possibly FOREIGN.
The concrete class of the new definition depends on whether it is a SETF one.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-module-definition} (module &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-MODULE-DEFINITION function}@c
@functionsubindex{make-module-definition}@c
Make a new MODULE definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-node} (&key name synopsis section-type section-name next previous up children before-menu-contents after-menu-contents)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶MAKE-NODE function}@c
@functionsubindex{make-node}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {make-package-definition} (package &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-PACKAGE-DEFINITION function}@c
@functionsubindex{make-package-definition}@c
Make a new PACKAGE definition@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {make-special-definition} (symbol)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SPECIAL-DEFINITION function}@c
@functionsubindex{make-special-definition}@c
Make a new special variable definition for SYMBOL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-symbol-definitions} (symbol &aux setf-symbol definitions)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYMBOL-DEFINITIONS function}@c
@functionsubindex{make-symbol-definitions}@c
Make and return a list of all existing definitions for SYMBOL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {make-symbol-macro-definition} (symbol)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYMBOL-MACRO-DEFINITION function}@c
@functionsubindex{make-symbol-macro-definition}@c
Make a new symbol macro definition for SYMBOL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-system-definition} (system &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-DEFINITION function}@c
@functionsubindex{make-system-definition}@c
Make a new SYSTEM definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-system-file-definition} (system)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-FILE-DEFINITION function}@c
@functionsubindex{make-system-file-definition}@c
Make a new system file definition for SYSTEM.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-system-file-definitions} (systems)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-SYSTEM-FILE-DEFINITIONS function}@c
@functionsubindex{make-system-file-definitions}@c
Make a list of system file definitions for SYSTEMS.@*
Multiple systems may be defined in the same file. There is however only one
definition for each file.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-type-definition} (symbol expander)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-TYPE-DEFINITION function}@c
@functionsubindex{make-type-definition}@c
Make a new type definition for SYMBOL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-typed-structure-slot-definition} (slot owner &optional foreign)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MAKE-TYPED-STRUCTURE-SLOT-DEFINITION function}@c
@functionsubindex{make-typed-structure-slot-definition}@c
Make a new typed structure SLOT definition for classoid OWNER.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {merge-accessors-p} (reader writer)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-ACCESSORS-P function}@c
@functionsubindex{merge-accessors-p}@c
Return T if READER and WRITER definitions can be documented jointly.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {merge-expander-p} (definition expander)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-EXPANDER-P function}@c
@functionsubindex{merge-expander-p}@c
Return T if function DEFINITION and setf EXPANDER can be documented jointly.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {merge-generic-accessors-p} (reader writer)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-GENERIC-ACCESSORS-P function}@c
@functionsubindex{merge-generic-accessors-p}@c
Check if READER and WRITER generic definitions can be documented jointly.
If so@comma{} return the generalized Boolean value of `merge-methods'@comma{} which see.

Merging is only attempted on generic functions defined exclusively via slot
:accessor keywords. For merging to actually occur@comma{} there must not exist any
property specific to only one definition@comma{} or different between the two (no
related expander information@comma{} same method combination@comma{} same docstring@comma{} etc.).
The only exception is their lambda lists.@*

The same conditions apply to methods@comma{} which definitions are also merged. Only
unqualified methods must exist. Standalone reader and writer methods are still
permitted.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {merge-methods} (reader writer &aux reader-methods writer-methods accessors readers reader-method writer-method)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶MERGE-METHODS function}@c
@functionsubindex{merge-methods}@c
Attempt to merge READER and WRITER generic definitions methods. See
`merge-generic-accessors-p' for the exact conditions under which merging may
occur. If merging is possible@comma{} return a list of 3 lists:@*
1. a list of the form ((READER-METHOD . WRITER-METHOD) ...) for associated
   reader and writer methods@comma{}@*
2. a list of standalone readers@comma{} if any@comma{}@*
3. a list of standalone writers@comma{} if any.@*
Otherwise@comma{} return NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {method-name} (method &aux name)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶METHOD-NAME function}@c
@functionsubindex{method-name}@c
Return METHOD's canonical name.@*
Return a second value of T if METHOD is in fact a SETF one.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {module-components} (module)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE-COMPONENTS function}@c
@functionsubindex{module-components}@c
Return the list of all module components found in MODULE's tree.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Reader} {node-after-menu-contents} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-AFTER-MENU-CONTENTS reader}@c
@functionsubindex{node-after-menu-contents}@c
@deffnx {Writer} {(setf node-after-menu-contents)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-AFTER-MENU-CONTENTS❩ writer}@c
@functionsubindex{(setf node-after-menu-contents)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶AFTER-MENU-CONTENTS slot, , @t{after-menu-contents}}.
@end table
@end deffn
@deffn {Reader} {node-before-menu-contents} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-BEFORE-MENU-CONTENTS reader}@c
@functionsubindex{node-before-menu-contents}@c
@deffnx {Writer} {(setf node-before-menu-contents)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-BEFORE-MENU-CONTENTS❩ writer}@c
@functionsubindex{(setf node-before-menu-contents)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶BEFORE-MENU-CONTENTS slot, , @t{before-menu-contents}}.
@end table
@end deffn
@deffn {Reader} {node-children} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-CHILDREN reader}@c
@functionsubindex{node-children}@c
@deffnx {Writer} {(setf node-children)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-CHILDREN❩ writer}@c
@functionsubindex{(setf node-children)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN slot, , @t{children}}.
@end table
@end deffn
@deffn {Reader} {node-name} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-NAME reader}@c
@functionsubindex{node-name}@c
@deffnx {Writer} {(setf node-name)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-NAME❩ writer}@c
@functionsubindex{(setf node-name)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT․EXTRACT∶NAME slot, , @t{name}}.
@end table
@end deffn
@deffn {Reader} {node-next} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-NEXT reader}@c
@functionsubindex{node-next}@c
@deffnx {Writer} {(setf node-next)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-NEXT❩ writer}@c
@functionsubindex{(setf node-next)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶NEXT slot, , @t{next}}.
@end table
@end deffn
@deffn {Function} {node-p} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-P function}@c
@functionsubindex{node-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Reader} {node-previous} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-PREVIOUS reader}@c
@functionsubindex{node-previous}@c
@deffnx {Writer} {(setf node-previous)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-PREVIOUS❩ writer}@c
@functionsubindex{(setf node-previous)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶PREVIOUS slot, , @t{previous}}.
@end table
@end deffn
@deffn {Reader} {node-section-name} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-NAME reader}@c
@functionsubindex{node-section-name}@c
@deffnx {Writer} {(setf node-section-name)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-NAME❩ writer}@c
@functionsubindex{(setf node-section-name)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶SECTION-NAME slot, , @t{section-name}}.
@end table
@end deffn
@deffn {Reader} {node-section-type} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-TYPE reader}@c
@functionsubindex{node-section-type}@c
@deffnx {Writer} {(setf node-section-type)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-TYPE❩ writer}@c
@functionsubindex{(setf node-section-type)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶SECTION-TYPE slot, , @t{section-type}}.
@end table
@end deffn
@deffn {Reader} {node-synopsis} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SYNOPSIS reader}@c
@functionsubindex{node-synopsis}@c
@deffnx {Writer} {(setf node-synopsis)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SYNOPSIS❩ writer}@c
@functionsubindex{(setf node-synopsis)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶SYNOPSIS slot, , @t{synopsis}}.
@end table
@end deffn
@deffn {Reader} {node-up} (instance)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE-UP reader}@c
@functionsubindex{node-up}@c
@deffnx {Writer} {(setf node-up)} (instance)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-UP❩ writer}@c
@functionsubindex{(setf node-up)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶UP slot, , @t{up}}.
@end table
@end deffn
@deffn {Function} {object-source-pathname} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT-SOURCE-PATHNAME function}@c
@functionsubindex{object-source-pathname}@c
Return OBJECT's source pathname.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {one-liner-p} (string)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶ONE-LINER-P function}@c
@functionsubindex{one-liner-p}@c
Return T if STRING is non empty and does not span multiple lines.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {package-external-symbols} (package &aux external-symbols)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-EXTERNAL-SYMBOLS function}@c
@functionsubindex{package-external-symbols}@c
Return the list of PACKAGE's external symbols.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {package-internal-symbols} (package &aux external-symbols internal-symbols)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-INTERNAL-SYMBOLS function}@c
@functionsubindex{package-internal-symbols}@c
Return the lists of PACKAGE's internal and external symbols as two values.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {package-symbols} (package &aux symbols)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PACKAGE-SYMBOLS function}@c
@functionsubindex{package-symbols}@c
Return the list of symbols from home PACKAGE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {parse-contact(s)} (contact(s))
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶parse-contact❨s❩ function}@c
@functionsubindex{parse-contact(s)}@c
Parse CONTACT(S) as either a contact string@comma{} or a list of such.@*
A contact string is of the form "My Name <my@atchar{}address>"@comma{} both name and
address being optional.@*

Return two values: a list of name(s) and a list of address(es). The two lists
maintain correspondence between names and addresses: they are of the same
length and may contain null elements@comma{} for contact strings lacking either
one.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {parse-contact-string} (string &aux pos-< pos->)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶PARSE-CONTACT-STRING function}@c
@functionsubindex{parse-contact-string}@c
Parse STRING as "My Name <my@atchar{}address>".@*
Both name and address are optional. If only an address is provided@comma{} the angle
brackets may be omitted. Return name and address@comma{} as two potentially NIL
values.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {qualifiers} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶QUALIFIERS function}@c
@functionsubindex{qualifiers}@c
Return method DEFINITION's method qualifiers.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {read-next-line} (stream)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶READ-NEXT-LINE function}@c
@functionsubindex{read-next-line}@c
Read one line from STREAM.@*
Return a list of two values:@*
- the line itself@comma{} or STREAM@comma{}@*
- whether a newline character is missing at the end of the line.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {reader-method-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶READER-METHOD-DEFINITION-P function}@c
@functionsubindex{reader-method-definition-p}@c
Return T if DEFINITION is a reader method definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {reference} (definition &optional short punctuation)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶REFERENCE function}@c
@functionsubindex{reference}@c
Render a possibly SHORT DEFINITION's reference on *STANDARD-OUTPUT*.
Unless SHORT@comma{} the DEFINITION type is advertised after the reference
itself. When SHORT@comma{} the reference is followed by a PUNCTUATION character (a
dot by default) or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {release-status-number} (release-status)
@anchor{go to the NET․DIDIERVERNA․DECLT․SETUP∶∶RELEASE-STATUS-NUMBER function}@c
@functionsubindex{release-status-number}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․SETUP package, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{go to the net․didierverna․declt․setup/src/version․lisp file, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {render-definition-core} (definition context)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEFINITION-CORE function}@c
@functionsubindex{render-definition-core}@c
Render DEFINITION's documentation core in CONTEXT.@*
The documentation core includes all common definition attributes:
  - package@comma{}@*
  - source location.@*

Each element is rendered as a table item.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {render-dependencies} (dependencies &optional prefix &aux length)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEPENDENCIES function}@c
@functionsubindex{render-dependencies}@c
Render COMPONENT's DEPENDENCIES@comma{} optionally PREFIXing the title.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {render-dependency} (dependency)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DEPENDENCY function}@c
@functionsubindex{render-dependency}@c
Render a resolved DEPENDENCY specification.@*
See `resolve-dependency-specification' for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {render-docstring} (item)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-DOCSTRING function}@c
@functionsubindex{render-docstring}@c
Render ITEM's documentation string.
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {render-header} (extract file-name info-name declt-notice current-time-string)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-HEADER function}@c
@functionsubindex{render-header}@c
Render the header of the Texinfo file.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/declt․lisp file, , @t{declt.lisp}}.
@end table
@end deffn
@deffn {Function} {render-headline} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-HEADLINE function}@c
@functionsubindex{render-headline}@c
Render a headline for DEFINITION. Also anchor and index it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {render-initargs} (definition context)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-INITARGS function}@c
@functionsubindex{render-initargs}@c
Render classoid DEFINITION's direct default initargs in CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {render-method-combination} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-METHOD-COMBINATION function}@c
@functionsubindex{render-method-combination}@c
Render generic function DEFINITION's method combination documentation.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {render-node} (node level &aux node-name safe-node-name)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-NODE function}@c
@functionsubindex{render-node}@c
Render NODE at LEVEL and all its children at LEVEL+1.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {render-pathname} (definition context &optional title)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-PATHNAME function}@c
@functionsubindex{render-pathname}@c
Render an itemized pathname line for DEFINITION in CONTEXT.
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {render-references} (title definitions &optional short &aux length renderer)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-REFERENCES function}@c
@functionsubindex{render-references}@c
Render an enTITLEd list of possibly SHORT references to DEFINITIONS.@*
See `reference' for the meaning of SHORT. The list is rendered in an itemized
table item@comma{} unless there is only one definition in which case it appears
directly as the table item's contents.@*
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {render-text} (text)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TEXT function}@c
@functionsubindex{render-text}@c
Render TEXT for Texinfo.@*
Rendering is done on *standard-output*.@*
The rendering takes care of escaping the text for Texinfo@comma{} and attempts to
embellish the output by detecting potential paragraphs from standalone lines.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {render-top-node} (node)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶RENDER-TOP-NODE function}@c
@functionsubindex{render-top-node}@c
Render the whole nodes hierarchy starting at toplevel NODE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {reorder-dependency-def} (dependency-def)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶REORDER-DEPENDENCY-DEF function}@c
@functionsubindex{reorder-dependency-def}@c
Reorder information in DEPENDENCY-DEF so that the system is always first.
More specifically:@*
- simple component names are returned as-is@comma{}@*
- :version expressions are returned as (system :version version-specifier)@comma{}
- :feature expressions are returned as (... :feature feature-expression)@comma{}
- :require expressions are returned as (system :require).@*

Note that because a feature expression is defined recursively@comma{} the first
element in the reordered list may be another reordered sub-list rather than a
simple component name directly. In any case@comma{} the system name will always be
in the deepest first position.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {reordered-dependency-def-system} (reordered-dependency-def)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶REORDERED-DEPENDENCY-DEF-SYSTEM function}@c
@functionsubindex{reordered-dependency-def-system}@c
Extract the system name from REORDERED-DEPENDENCY-DEF.
See `reorder-dependency-def' for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {resolve-dependency-specification} (specification component definitions foreign &aux inner)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶RESOLVE-DEPENDENCY-SPECIFICATION function}@c
@functionsubindex{resolve-dependency-specification}@c
Resolve dependency SPECIFICATION for (FOREIGN) COMPONENT in DEFINITIONS.
SPECIFICATION must already be reordered (see `reorder-dependency-def' for more
information). The specification's component name is replaced with its
corresponding definition. A foreign definition may be created in the process.

If such a definition is neither found@comma{} nor created@comma{} return NIL. Otherwise@comma{}
return a list of the updated specification (suitable to MAPCAN).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {reveal} (string &aux string)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶REVEAL function}@c
@functionsubindex{reveal}@c
Return a copy of STRING with blanks revealed.@*
Each blank character is replaced with a visible Unicode representation.
See `*blanks*' for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {safe-lambda-list} (lambda-list)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-LAMBDA-LIST function}@c
@functionsubindex{safe-lambda-list}@c
Return a safe LAMBDA-LIST@comma{} suitable to pass to Texinfo.@*
The original lambda-list's structure is preserved@comma{} but all symbols are
converted to revealed strings@comma{} and initform / supplied-p data is removed.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {safe-specializers} (definition &aux specializers)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-SPECIALIZERS function}@c
@functionsubindex{safe-specializers}@c
Return a list of safe specializers for method DEFINITION.@*
A safe specializer is the printed form of either a reference to a class
definition@comma{} or a raw EQL specializer. For setf and writer definitions@comma{}
only the specializers rest is used@comma{} as these methods get the new value as
their first argument.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {short-expander-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SHORT-EXPANDER-DEFINITION-P function}@c
@functionsubindex{short-expander-definition-p}@c
Return T if DEFINITION is a short expander definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {sub-component-p} (component directory &aux component-pathname)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUB-COMPONENT-P function}@c
@functionsubindex{sub-component-p}@c
Return T if COMPONENT can be found under DIRECTORY.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {subsystem} (name system directory &aux subsystem)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUBSYSTEM function}@c
@functionsubindex{subsystem}@c
Return NAME'd SYSTEM dependency if found under DIRECTORY@comma{} or nil.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {subsystems} (system directory)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SUBSYSTEMS function}@c
@functionsubindex{subsystems}@c
Return the list of SYSTEM and all its dependencies found under DIRECTORY.
All dependencies are descended recursively. Both :defsystem-depends-on and
:depends-on are included. Potential duplicates are removed.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {symbol-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYMBOL-DEFINITION-P function}@c
@functionsubindex{symbol-definition-p}@c
Return T if DEFINITION is a symbol definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {system-dependencies} (system)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM-DEPENDENCIES function}@c
@functionsubindex{system-dependencies}@c
Return all system names from SYSTEM dependencies.
This includes both :defsystem-depends-on and :depends-on.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/extract․lisp file, , @t{extract.lisp}}.
@end table
@end deffn
@deffn {Function} {validate-email} (string &aux string @atchar{}-position)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶VALIDATE-EMAIL function}@c
@functionsubindex{validate-email}@c
Check that STRING is of the form nonblank@atchar{}nonblank@comma{} after trimming.
Return that string@comma{} or issue a warning and return NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/util․lisp file, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {writer-method-definition-p} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶WRITER-METHOD-DEFINITION-P function}@c
@functionsubindex{writer-method-definition-p}@c
Return T if DEFINITION is a writer method definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn

@node Private generic functions, Private structures, Private ordinary functions, Internals
@subsection Generic functions
@deffn {Generic Function} {category-name} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME generic function}@c
@genericsubindex{category-name}@c
Return DEFINITION's category name.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "system"
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "module"
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class, , @t{file-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "file"
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "package".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "class".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "condition".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class, , @t{structure-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "structure".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN class, , @t{generic-writer-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-WRITER-MIXIN❩ method}@c
@methodsubindex{category-name}@c
Return "generic writer".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION class, , @t{generic-reader-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "generic reader".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "generic function".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION class, , @t{writer-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "writer".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION class, , @t{reader-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "reader".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION class, , @t{ordinary-function-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "function".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "writer method".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION class, , @t{reader-method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "reader method".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "method".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "method combination".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "setf expander".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "type".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class, , @t{compiler-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "compiler macro".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class, , @t{macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "macro".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "slot".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION class, , @t{symbol-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "symbol macro".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION class, , @t{special-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "special variable".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION class, , @t{constant-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CATEGORY-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method}@c
@methodsubindex{category-name}@c
Return "constant".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {classoid} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶CLASSOID generic reader}@c
@genericsubindex{classoid}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {classoid} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶CLASSOID ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION❩ reader method}@c
@methodsubindex{classoid}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-class} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CLASS generic reader}@c
@genericsubindex{definition-class}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definition-class} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CLASS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ reader method}@c
@methodsubindex{definition-class}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-compiler-macro} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-COMPILER-MACRO generic reader}@c
@genericsubindex{definition-compiler-macro}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definition-compiler-macro} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class, , @t{compiler-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-COMPILER-MACRO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ reader method}@c
@methodsubindex{definition-compiler-macro}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-condition} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CONDITION generic reader}@c
@genericsubindex{definition-condition}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definition-condition} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-CONDITION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ reader method}@c
@methodsubindex{definition-condition}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-function} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-FUNCTION generic reader}@c
@genericsubindex{definition-function}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definition-function} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION class, , @t{function-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-FUNCTION ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION❩ reader method}@c
@methodsubindex{definition-function}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCTION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-package} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-PACKAGE generic reader}@c
@genericsubindex{definition-package}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definition-package} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-PACKAGE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method}@c
@methodsubindex{definition-package}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-structure} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-STRUCTURE generic reader}@c
@genericsubindex{definition-structure}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {definition-structure} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class, , @t{structure-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶DEFINITION-STRUCTURE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ reader method}@c
@methodsubindex{definition-structure}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {document} (definition context &key &allow-other-keys)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT generic function}@c
@genericsubindex{document}@c
Render DEFINITION's documentation in CONTEXT.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render system DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render module DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class, , @t{lisp-file-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render lisp file DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render ASDF component DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Anchor@comma{} index and document component DEFINITION in CONTEXT.
Documentation is done in a @atchar{}table environment.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render package DEFINITION's documentation in context.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION class, , @t{typed-structure-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render typed structure DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION class, , @t{clos-structure-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-STRUCTURE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render CLOS structure DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION class, , @t{classoid-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASSOID-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render classoid DEFINITION's documentation in CONTEXT.
This is the default method used for conditions and classes@comma{}
which also documents direct default initargs.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION class, , @t{generic-setf-writer-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-WRITER-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render generic writer function DEFINITION's documentation in CONTEXT.
This is done only when merging with a corresponding reader is not possible.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION class, , @t{generic-reader-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-READER-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render generic reader function DEFINITION's documentation in CONTEXT.
Possibly merge documentation with a corresponding writer.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION class, , @t{generic-setf-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-SETF-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render generic setf DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION class, , @t{simple-generic-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-GENERIC-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render simple generic function DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION class, , @t{writer-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render writer DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION class, , @t{reader-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render function DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION class, , @t{simple-function-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SIMPLE-FUNCTION-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render simple function DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION class, , @t{writer-method-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶WRITER-METHOD-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render writer METHOD's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION class, , @t{reader-method-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶READER-METHOD-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render reader METHOD's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render METHOD's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION class, , @t{short-combination-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render short method combination DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render method combination DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION class, , @t{long-expander-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LONG-EXPANDER-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render long setf expander DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class, , @t{short-expander-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render short setf expander DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render type DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class, , @t{macro-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render macro DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render funcoid DEFINITION's documentation in CONTEXT.
This is the default method used for simple funcoids@comma{}
providing only basic information.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION class, , @t{typed-structure-slot-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render typed structure slot DEFINITION's documentation in CONTEXT.@*
- The source file is unavailable@comma{} but not documented at all anyway@comma{} since it
  is lexically the same as that of the parent classoid.@*
- The package is not documented@comma{} unless it differs from that of the parent
  classoid.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION class, , @t{clos-slot-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render CLOS slot DEFINITION's documentation in CONTEXT.@*
- The source file is not documented at all@comma{} since it is lexically the same as
  that of the parent classoid.@*
- The package is not documented@comma{} unless it differs from that of the parent
  classoid.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION class, , @t{varoid-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶DOCUMENT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶VAROID-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{document}@c
Render varoid DEFINITION's documentation in CONTEXT.
This is the default method used for simple varoids@comma{}
providing only basic information.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {expander} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER generic reader}@c
@genericsubindex{expander}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {expander} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ reader method}@c
@methodsubindex{expander}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@deffn {Reader Method} {expander} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXPANDER ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ reader method}@c
@methodsubindex{expander}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {external-symbols} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS generic reader}@c
@genericsubindex{external-symbols}@c
@deffnx {Generic Writer} {(setf external-symbols)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS❩ generic writer}@c
@genericsubindex{(setf external-symbols)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {external-symbols} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method}@c
@methodsubindex{external-symbols}@c
@deffnx {Writer Method} {(setf external-symbols)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method}@c
@methodsubindex{(setf external-symbols)}@c
The list of corresponding external symbols.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶EXTERNAL-SYMBOLS slot, , @t{external-symbols}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {finalize} (definition definitions)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE generic function}@c
@genericsubindex{finalize}@c
Finalize DEFINITION in DEFINITIONS.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/finalize․lisp file, , @t{finalize.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶PROGN method combination, , @t{progn}}.
@table @strong
@item Options
@t{:most-specific-first}
@end table
@item Methods
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute system DEFINITION's defsystem dependency definitions.
Those definitions are guaranteed to be in the original system's order.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute module DEFINITION's child definitions.@*
Those definitions are guaranteed to be in the module's original order.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION class, , @t{lisp-file-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶LISP-FILE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute Lisp file DEFINITION's definitions list.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute component DEFINITION's parent and dependency definitions.
Those definitions are guaranteed to be in the original component's order.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute package DEFINITION's use@comma{} used-by@comma{} and definitions lists.
New foreign package definitions may be created and added at the end of
DEFINITIONS in the process.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION class, , @t{typed-structure-slot-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPED-STRUCTURE-SLOT-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute typed structure slot DEFINITION's reader and writer definitions.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION class, , @t{clos-slot-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-SLOT-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute CLOS slot DEFINITION's reader and writer definitions.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN class, , @t{clos-classoid-mixin}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLOS-CLASSOID-MIXIN COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute classoid DEFINITION's super/sub classoids@comma{} and method definitions.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Computer method DEFINITION's specializer references.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION class, , @t{short-combination-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-COMBINATION-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute short combination DEFINITION's standalone combinator definition.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute method combination DEFINITION's users.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute generic function DEFINITION's method combination definition.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION class, , @t{short-expander-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SHORT-EXPANDER-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Computer short setf expander DEFINITION's standalone writer definition.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute setf expander DEFINTIION's standalone reader definition.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN class, , @t{expander-mixin}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-MIXIN COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute DEFINITION's expander-for and expanders-to references.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute symbol DEFINITION's home package definition.@*
New foreign package definitions may be created and added at the end of
DEFINITIONS in the process.
@end deffn
@deffn {Method} {finalize} progn (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}}, @ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FINALIZE PROGN ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION COMMON-LISP∶T❩ method}@c
@methodsubindex{finalize}@c
Compute DEFINITION's source file definition.
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {funcoid} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FUNCOID generic reader}@c
@genericsubindex{funcoid}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {funcoid} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION class, , @t{funcoid-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶FUNCOID ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION❩ reader method}@c
@methodsubindex{funcoid}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FUNCOID-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {generic} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶GENERIC generic reader}@c
@genericsubindex{generic}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {generic} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶GENERIC ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ reader method}@c
@methodsubindex{generic}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {hyperlinks} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶HYPERLINKS generic reader}@c
@genericsubindex{hyperlinks}@c
@deffnx {Generic Writer} {(setf hyperlinks)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶HYPERLINKS❩ generic writer}@c
@genericsubindex{(setf hyperlinks)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {hyperlinks} (@ref{go to the NET․DIDIERVERNA․DECLT∶∶CONTEXT class, , @t{context}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶HYPERLINKS ❨NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ reader method}@c
@methodsubindex{hyperlinks}@c
@deffnx {Writer Method} {(setf hyperlinks)} (@ref{go to the NET․DIDIERVERNA․DECLT∶∶CONTEXT class, , @t{context}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶HYPERLINKS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ writer method}@c
@methodsubindex{(setf hyperlinks)}@c
Whether to create hyperlinks for ASDF components.
Currently supported values are NIL@comma{} and :file-system.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT∶∶CONTEXT->NET․DIDIERVERNA․DECLT∶∶HYPERLINKS slot, , @t{hyperlinks}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {index-command-name} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME generic function}@c
@genericsubindex{index-command-name}@c
Return DEFINITION's index command name.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "systemindex"
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "moduleindex"
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class, , @t{file-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "fileindex"
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "packageindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/package․lisp file, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION class, , @t{class-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CLASS-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "classsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION class, , @t{condition-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONDITION-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "conditionsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION class, , @t{structure-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶STRUCTURE-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "structuresubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION class, , @t{generic-function-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶GENERIC-FUNCTION-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "genericsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION class, , @t{ordinary-function-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶ORDINARY-FUNCTION-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "functionsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "methodsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION class, , @t{combination-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMBINATION-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "combinationsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "expandersubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "typesubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION class, , @t{compiler-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPILER-MACRO-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "compilermacrosubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class, , @t{macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "macrosubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "slotsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION class, , @t{symbol-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "symbolmacrosubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION class, , @t{special-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "specialsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION class, , @t{constant-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶INDEX-COMMAND-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method}@c
@methodsubindex{index-command-name}@c
Return "constantsubindex".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {internal-symbols} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS generic reader}@c
@genericsubindex{internal-symbols}@c
@deffnx {Generic Writer} {(setf internal-symbols)} (object)
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS❩ generic writer}@c
@genericsubindex{(setf internal-symbols)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {internal-symbols} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS ❨NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ reader method}@c
@methodsubindex{internal-symbols}@c
@deffnx {Writer Method} {(setf internal-symbols)} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION class, , @t{package-definition}})
@anchor{go to the ❨SETF NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION❩ writer method}@c
@methodsubindex{(setf internal-symbols)}@c
The list of corresponding internal symbols.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/package․lisp file, , @t{package.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶PACKAGE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶INTERNAL-SYMBOLS slot, , @t{internal-symbols}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {macro} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MACRO generic reader}@c
@genericsubindex{macro}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {macro} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION class, , @t{macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MACRO ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION❩ reader method}@c
@methodsubindex{macro}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MACRO-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {module} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE generic reader}@c
@genericsubindex{module}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {module} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION class, , @t{module-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶MODULE ❨NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION❩ reader method}@c
@methodsubindex{module}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶MODULE-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {object} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT generic reader}@c
@genericsubindex{object}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {object} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ reader method}@c
@methodsubindex{object}@c
The corresponding Lisp object@comma{} or NIL.@*
Only constants@comma{} special variables@comma{} and symbol macros lack such an object.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {safe-name} (definition &optional qualified)
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME generic function}@c
@genericsubindex{safe-name}@c
Return DEFINITION's safe name@comma{} possibly QUALIFIED.@*
Safe names have blank characters replaced with visible Unicode symbols.
See `reveal' for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {safe-name} :around (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION class, , @t{file-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶FILE-DEFINITION❩ method}@c
@methodsubindex{safe-name}@c
Append DEFINITION's file extension at the end.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method}@c
@methodsubindex{safe-name}@c
Reveal component DEFINITION's name@comma{} possibly QUALIFIED.@*
A QUALIFIED component's name is of the form "path/to/component"@comma{} each
element being the name of a component's parent.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} :around (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION class, , @t{method-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶METHOD-DEFINITION❩ method}@c
@methodsubindex{safe-name}@c
When QUALIFIED@comma{} append method DEFINITION's qualifiers and specializers.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} :around (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ∶AROUND ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ method}@c
@methodsubindex{safe-name}@c
When QUALIFIED@comma{} prepend slot DEFINITION's classoid safe name.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN class, , @t{setf-mixin}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SETF-MIXIN❩ method}@c
@methodsubindex{safe-name}@c
Reveal setf DEFINITION's name@comma{} possibly QUALIFIED.@*
A QUALIFIED name is of the form "(setf package:[:]symbol)".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION class, , @t{symbol-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-DEFINITION❩ method}@c
@methodsubindex{safe-name}@c
Reveal symbol DEFINITION's name@comma{} possibly QUALIFIED.
A QUALIFIED name is of the form "package:[:]symbol".
@table @strong
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION class, , @t{definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶SAFE-NAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶DEFINITION❩ method}@c
@methodsubindex{safe-name}@c
Reveal unqualifiable DEFINITION's name. This is the default method.
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {slot} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SLOT generic reader}@c
@genericsubindex{slot}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {slot} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION class, , @t{slot-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SLOT ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION❩ reader method}@c
@methodsubindex{slot}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SLOT-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {source-pathname} (definition)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME generic function}@c
@genericsubindex{source-pathname}@c
Return DEFINITION's source pathname.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Source
@ref{go to the net․didierverna․declt․extract/src/definition․lisp file, , @t{definition.lisp}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Method} {source-pathname} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION class, , @t{component-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶COMPONENT-DEFINITION❩ method}@c
@methodsubindex{source-pathname}@c
Return component DEFINITION's source pathname.@*
This actually is the corresponding system's source file.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION class, , @t{expander-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶EXPANDER-DEFINITION❩ method}@c
@methodsubindex{source-pathname}@c
Return setf expander DEFINITION's source pathname.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION class, , @t{type-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶TYPE-DEFINITION❩ method}@c
@methodsubindex{source-pathname}@c
Return type DEFINITION's source pathname.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION class, , @t{symbol-macro-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYMBOL-MACRO-DEFINITION❩ method}@c
@methodsubindex{source-pathname}@c
Return symbol macro DEFINITION's source pathname.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION class, , @t{special-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SPECIAL-DEFINITION❩ method}@c
@methodsubindex{source-pathname}@c
Return special DEFINITION's source pathname.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION class, , @t{constant-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨NET․DIDIERVERNA․DECLT․EXTRACT∶CONSTANT-DEFINITION❩ method}@c
@methodsubindex{source-pathname}@c
Return constant DEFINITION's source pathname.
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/symbol․lisp file, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} (@ref{go to the COMMON-LISP∶T class, , @t{t}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SOURCE-PATHNAME ❨COMMON-LISP∶T❩ method}@c
@methodsubindex{source-pathname}@c
Return DEFINITION's object source pathname (this is the default method).
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {system} (object)
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM generic reader}@c
@genericsubindex{system}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Method Combination
@ref{go to the COMMON-LISP∶STANDARD method combination, , @t{standard}}.
@item Methods
@deffn {Reader Method} {system} (@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION class, , @t{system-definition}})
@anchor{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶∶SYSTEM ❨NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION❩ reader method}@c
@methodsubindex{system}@c
automatically generated reader method
@table @strong
@item Source
@ref{go to the net․didierverna․declt․extract/src/asdf․lisp file, , @t{asdf.lisp}}.
@end table
@table @strong
@item Target Slot
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT∶SYSTEM-DEFINITION->NET․DIDIERVERNA․DECLT․EXTRACT∶∶OBJECT slot, , @t{object}}.
@end table
@end deffn
@end table
@end deffn

@node Private structures, Private classes, Private generic functions, Internals
@subsection Structures
@deftp {Structure} {node}
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE structure}@c
@structuresubindex{node}@c
The NODE structure.@*
This structure holds Texinfo nodes.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/texi․lisp file, , @t{texi.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STRUCTURE-OBJECT structure, , @t{structure-object}}.
@item Direct slots
@defvr {Slot} name
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT․EXTRACT∶NAME slot}@c
@slotsubindex{name}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-NAME reader, , @t{node-name}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-NAME❩ writer, , @t{(setf node-name)}}.
@end table
@end defvr
@defvr {Slot} synopsis
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶SYNOPSIS slot}@c
@slotsubindex{synopsis}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SYNOPSIS reader, , @t{node-synopsis}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SYNOPSIS❩ writer, , @t{(setf node-synopsis)}}.
@end table
@end defvr
@defvr {Slot} section-type
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶SECTION-TYPE slot}@c
@slotsubindex{section-type}@c
@table @strong
@item Initform
@t{:numbered}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-TYPE reader, , @t{node-section-type}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-TYPE❩ writer, , @t{(setf node-section-type)}}.
@end table
@end defvr
@defvr {Slot} section-name
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶SECTION-NAME slot}@c
@slotsubindex{section-name}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-NAME reader, , @t{node-section-name}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-SECTION-NAME❩ writer, , @t{(setf node-section-name)}}.
@end table
@end defvr
@defvr {Slot} next
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶NEXT slot}@c
@slotsubindex{next}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-NEXT reader, , @t{node-next}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-NEXT❩ writer, , @t{(setf node-next)}}.
@end table
@end defvr
@defvr {Slot} previous
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶PREVIOUS slot}@c
@slotsubindex{previous}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-PREVIOUS reader, , @t{node-previous}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-PREVIOUS❩ writer, , @t{(setf node-previous)}}.
@end table
@end defvr
@defvr {Slot} up
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶UP slot}@c
@slotsubindex{up}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-UP reader, , @t{node-up}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-UP❩ writer, , @t{(setf node-up)}}.
@end table
@end defvr
@defvr {Slot} children
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT․EXTRACT∶CHILDREN slot}@c
@slotsubindex{children}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT․EXTRACT package, , @t{net.didierverna.declt.extract}}.
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-CHILDREN reader, , @t{node-children}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-CHILDREN❩ writer, , @t{(setf node-children)}}.
@end table
@end defvr
@defvr {Slot} before-menu-contents
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶BEFORE-MENU-CONTENTS slot}@c
@slotsubindex{before-menu-contents}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-BEFORE-MENU-CONTENTS reader, , @t{node-before-menu-contents}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-BEFORE-MENU-CONTENTS❩ writer, , @t{(setf node-before-menu-contents)}}.
@end table
@end defvr
@defvr {Slot} after-menu-contents
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶NODE->NET․DIDIERVERNA․DECLT∶∶AFTER-MENU-CONTENTS slot}@c
@slotsubindex{after-menu-contents}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶NODE-AFTER-MENU-CONTENTS reader, , @t{node-after-menu-contents}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶NODE-AFTER-MENU-CONTENTS❩ writer, , @t{(setf node-after-menu-contents)}}.
@end table
@end defvr
@end table
@end deftp

@node Private classes, , Private structures, Internals
@subsection Classes
@deftp {Class} {context}
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CONTEXT class}@c
@classsubindex{context}@c
The class of rendering contexts.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․DECLT package, , @t{net.didierverna.declt}}.
@item Source
@ref{go to the net․didierverna․declt․core/src/doc/doc․lisp file, , @t{doc.lisp}}.
@item Direct superclasses
@ref{go to the COMMON-LISP∶STANDARD-OBJECT class, , @t{standard-object}}.
@item Direct methods
@itemize @bullet
@item
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶HYPERLINKS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ writer method, , @t{(setf hyperlinks)}}.
@item
@ref{go to the NET․DIDIERVERNA․DECLT∶∶HYPERLINKS ❨NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ reader method, , @t{hyperlinks}}.
@end itemize
@item Direct slots
@defvr {Slot} hyperlinks
@anchor{go to the NET․DIDIERVERNA․DECLT∶∶CONTEXT->NET․DIDIERVERNA․DECLT∶∶HYPERLINKS slot}@c
@slotsubindex{hyperlinks}@c
Whether to create hyperlinks for ASDF components.
Currently supported values are NIL@comma{} and :file-system.
@table @strong
@item Initargs
@t{:hyperlinks}
@item Readers
@ref{go to the NET․DIDIERVERNA․DECLT∶∶HYPERLINKS ❨NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ reader method, , @t{hyperlinks}}.
@item Writers
@ref{go to the ❨SETF NET․DIDIERVERNA․DECLT∶∶HYPERLINKS❩ ❨COMMON-LISP∶T NET․DIDIERVERNA․DECLT∶∶CONTEXT❩ writer method, , @t{(setf hyperlinks)}}.
@end table
@end defvr
@end table
@end deftp



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c reference.texi ends here
