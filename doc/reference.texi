\input texinfo

@c reference.texi --- Reference manual

@c Copyright (C) 2010-2013, 2015-2022 Didier Verna

@c This file is part of Declt.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.
@c 
@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:

@c Generated automatically by Declt version 4.0 beta 2 "William Riker"
@c on Wed May 25 10:19:08 2022 GMT+1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename declt-reference.info
@settitle The Declt Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The Declt Reference Manual, version 4.0 beta 2 "William Riker".
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@tpindex @t{\name\}
@tpindex Module, @t{\name\}
@end macro

@c Files
@macro fileindex{name}
@tpindex @t{\name\}
@tpindex File, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro expandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro combinationsubindex{name}
@findex @r{Method Combination, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Declt Reference Manual: (declt-reference). The Declt Reference Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} 2010-2013@comma{} 2015-2022 Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Declt Reference Manual
@subtitle Documentation Extractor from Common Lisp to Texinfo, version 4.0 beta 2 "William Riker"

@author Didier Verna <@email{didier@atchar{}didierverna.net}>

@page
@quotation
This manual was generated automatically by Declt 4.0 beta 2 "William Riker" on Wed May 25 10:19:08 2022 GMT+1.
@end quotation
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Declt Reference Manual
This is the Declt Reference Manual, version 4.0 beta 2 "William Riker",
generated automatically by Declt version 4.0 beta 2 "William Riker"
on Wed May 25 10:19:08 2022 GMT+1.

@menu
* Copying:: The BSD License
* Introduction:: What Declt is all about
* Systems:: The systems documentation
* Modules:: The modules documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use@comma{} copy@comma{} modify@comma{} and distribute this software for any
purpose with or without fee is hereby granted@comma{} provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL@comma{} DIRECT@comma{} INDIRECT@comma{} OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE@comma{} DATA OR PROFITS@comma{} WHETHER IN AN
ACTION OF CONTRACT@comma{} NEGLIGENCE OR OTHER TORTIOUS ACTION@comma{} ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Systems, Copying, Top
@chapter Introduction
@macro declt
@t{Declt}
@end macro

@macro cl
Common Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@cindex Library
@declt{} (pronounce ``dec'let'') is a reference manual generator for
@cl{} libraries. A @declt{} manual documents one specified ASDF system
(considered as the ``main'' system), and all its local dependencies
(subsystems found in the same distribution). This is what is
collectively referred to as the @dfn{library}.

@cindex Definition
@declt{} doesn't perform any kind of static code analysis, but instead
loads the library, and then introspects the Lisp environment to discover
what ``belongs'' to it. The generated documentation includes the
description of both programmatic and ASDF components. Every such
component description is called a @dfn{definition}.

@declt{} manuals provide a detailed description of the library's
infrastructure by including definitions for every relevant ASDF
component (systems, modules, and files), and Lisp package.

Exported programmatic definitions are split from the internal ones,
which allows to separately browse either the library's public interface
or its implementation. Both sections of the manual include definitions
for constants, special variables, symbol macros, macros, @t{setf}
expanders, compiler macros, regular functions (including @t{setf} ones),
generic functions and methods (including @t{setf} ones), method
combinations, conditions, structures, classes, and types.

Programmatic definitions are as complete and exhaustive as introspection
can make them. @declt{} collects documentation strings, lambda lists
(including qualifiers and specializers where appropriate), slot
definitions (including type information, allocation type, initialization
arguments, @etc{}), definition sources, @etc{}

Every definition includes a full set of cross-references to related
ones: ASDF component dependencies, parents, and children, classes direct
methods, super- and sub-classes, slot readers and writers, @t{setf}
expanders access and update functions, @etc{}

Finally, @declt{} produces exhaustive and multiple-entry indexes to all
documented aspect of the library.

@declt{} manuals are generated in Texinfo format. From there it is
possible to produce readable / printable output in Info, HTML, PDF,
PostScript, @etc{}

The @declt{} Reference Manual, which you are currently reading,
is the primary example of documentation generated by @declt{} itself.
@ifinfo
See @xref{Top, , The Declt User Manual, declt-user},
@end ifinfo
@ifhtml
See @xref{Top, , The Declt User Manual, user},
@end ifhtml
@ifnotinfo
@ifnothtml
@xref{Top, , , user, The Declt User Manual},
@end ifnothtml
@end ifnotinfo
for a more human-readable guide to using @declt{}.



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Modules, Introduction, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The net․didierverna․declt system::
* The net․didierverna․declt․setup system::
* The net․didierverna․declt․core system::
* The net․didierverna․declt․assess system::
@end menu


@c --------------------------------
@c The net.didierverna.declt system
@c --------------------------------
@node The net․didierverna․declt system, The net․didierverna․declt․setup system, Systems, Systems
@section @t{net.didierverna.declt}
@anchor{❨1❩}@c
@systemindex{net.didierverna.declt}@c
A reference manual generator for Common Lisp libraries
@table @strong
@item Long Name
Documentation Extractor from Common Lisp to Texinfo
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}declt}
@item Source Control
@uref{https://github.com/didierverna/declt}
@item License
BSD
@item Long Description

Declt (pronounce dec'let) is a reference manual generator for Common Lisp.
It extracts and formats documentation from ASDF systems@comma{} including the system
itself@comma{} its local dependencies (subsystems)@comma{} components@comma{} packages and an
extensive list of definitions (variables@comma{} functions etc.). The formatted
documentation comes with full indexing and cross-references.@*

Reference manuals are generated in Texinfo format which can subsequently be
converted into info@comma{} HTML@comma{} DVI@comma{} PostScript or PDF.
@item If Feature
@t{:sbcl}
@item Dependencies
@itemize @bullet
@item
@ref{❨2❩, , @t{net.didierverna.declt.setup}}@: (system).
@item
@ref{❨3❩, , @t{net.didierverna.declt.core}}@: (system).
@end itemize
@item Source
@ref{❨10❩, , @t{net.didierverna.declt.asd}}.
@end table


@c --------------------------------------
@c The net.didierverna.declt.setup system
@c --------------------------------------
@node The net․didierverna․declt․setup system, The net․didierverna․declt․core system, The net․didierverna․declt system, Systems
@section @t{net.didierverna.declt.setup}
@anchor{❨2❩}@c
@systemindex{net.didierverna.declt.setup}@c
Declt's preload setup
@table @strong
@item Long Name
Documentation Extractor from Common Lisp to Texinfo@comma{} setup library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}declt}
@item Source Control
@uref{https://github.com/didierverna/declt}
@item License
BSD
@item Long Description

The Declt setup library provides support for various preload configuration
parameters and meta-utilities. For a more complete description of Declt@comma{}
see the `net.didierverna.declt' system.
@item Dependency
@t{named-readtables}@: (system).
@item Source
@ref{❨11❩, , @t{net.didierverna.declt.setup.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨14❩, , @t{package.lisp}}@: (file).
@item
@ref{❨5❩, , @t{src}}@: (module).
@end itemize
@end table


@c -------------------------------------
@c The net.didierverna.declt.core system
@c -------------------------------------
@node The net․didierverna․declt․core system, The net․didierverna․declt․assess system, The net․didierverna․declt․setup system, Systems
@section @t{net.didierverna.declt.core}
@anchor{❨3❩}@c
@systemindex{net.didierverna.declt.core}@c
Declt's core functionality
@table @strong
@item Long Name
Documentation Extractor from Common Lisp to Texinfo@comma{} core library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}declt}
@item Source Control
@uref{https://github.com/didierverna/declt}
@item License
BSD
@item Long Description

The Declt core library provides the main functionality of Declt. For a more
complete description of Declt@comma{} see the `net.didierverna.declt' system.
@item If Feature
@t{:sbcl}
@item Dependencies
@itemize @bullet
@item
@t{sb-introspect}@: (system)., required, for feature @t{:sbcl}
@item
@ref{❨2❩, , @t{net.didierverna.declt.setup}}@: (system).
@item
@ref{❨4❩, , @t{net.didierverna.declt.assess}}@: (system).
@end itemize
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨19❩, , @t{package.lisp}}@: (file).
@item
@ref{❨6❩, , @t{src}}@: (module).
@end itemize
@end table


@c ---------------------------------------
@c The net.didierverna.declt.assess system
@c ---------------------------------------
@node The net․didierverna․declt․assess system, , The net․didierverna․declt․core system, Systems
@section @t{net.didierverna.declt.assess}
@anchor{❨4❩}@c
@systemindex{net.didierverna.declt.assess}@c
Declt's information gathering pipeline stage
@table @strong
@item Long Name
Documentation Extractor from Common Lisp to Texinfo@comma{} assessment library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}declt}
@item Source Control
@uref{https://github.com/didierverna/declt}
@item License
BSD
@item Long Description
The Declt assessment library collects information from ASDF systems by
introspection@comma{} and produces an abstract representation@comma{} independent from both
the final manual's organization and the output format. For a more complete
description of Declt@comma{} see the `net.didierverna.declt' system.
@item If Feature
@t{:sbcl}
@item Dependencies
@itemize @bullet
@item
@t{sb-introspect}@: (system)., required, for feature @t{:sbcl}
@item
@ref{❨2❩, , @t{net.didierverna.declt.setup}}@: (system).
@end itemize
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨27❩, , @t{package.lisp}}@: (file).
@item
@ref{❨9❩, , @t{src}}@: (module).
@end itemize
@end table



@c ====================================================================
@c Modules
@c ====================================================================
@node Modules, Files, Systems, Top
@chapter Modules
Modules are listed depth-first from the system components tree.

@menu
* The net․didierverna․declt․setup/src module::
* The net․didierverna․declt․core/src module::
* The net․didierverna․declt․core/src/util module::
* The net․didierverna․declt․core/src/doc module::
* The net․didierverna․declt․assess/src module::
@end menu


@c ------------------------------------------
@c The net.didierverna.declt.setup/src module
@c ------------------------------------------
@node The net․didierverna․declt․setup/src module, The net․didierverna․declt․core/src module, Modules, Modules
@section @t{net.didierverna.declt.setup/src}
@anchor{❨5❩}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{❨14❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨11❩, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{❨2❩, , @t{net.didierverna.declt.setup}}@: (system).
@item Child Components
@itemize @bullet
@item
@ref{❨15❩, , @t{configuration.lisp}}@: (file).
@item
@ref{❨16❩, , @t{readtable.lisp}}@: (file).
@item
@ref{❨17❩, , @t{version.lisp}}@: (file).
@item
@ref{❨18❩, , @t{util.lisp}}@: (file).
@end itemize
@end table


@c -----------------------------------------
@c The net.didierverna.declt.core/src module
@c -----------------------------------------
@node The net․didierverna․declt․core/src module, The net․didierverna․declt․core/src/util module, The net․didierverna․declt․setup/src module, Modules
@section @t{net.didierverna.declt.core/src}
@anchor{❨6❩}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{❨19❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{net.didierverna.declt.core}}@: (system).
@item Child Components
@itemize @bullet
@item
@ref{❨7❩, , @t{util}}@: (module).
@item
@ref{❨8❩, , @t{doc}}@: (module).
@item
@ref{❨26❩, , @t{declt.lisp}}@: (file).
@end itemize
@end table


@c ----------------------------------------------
@c The net.didierverna.declt.core/src/util module
@c ----------------------------------------------
@node The net․didierverna․declt․core/src/util module, The net․didierverna․declt․core/src/doc module, The net․didierverna․declt․core/src module, Modules
@section @t{net.didierverna.declt.core/src/util}
@anchor{❨7❩}@c
@moduleindex{util}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Child Component
@ref{❨20❩, , @t{misc.lisp}}@: (file).
@end table


@c ---------------------------------------------
@c The net.didierverna.declt.core/src/doc module
@c ---------------------------------------------
@node The net․didierverna․declt․core/src/doc module, The net․didierverna․declt․assess/src module, The net․didierverna․declt․core/src/util module, Modules
@section @t{net.didierverna.declt.core/src/doc}
@anchor{❨8❩}@c
@moduleindex{doc}@c
@table @strong
@item Dependency
@ref{❨7❩, , @t{util}}@: (module).
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Child Components
@itemize @bullet
@item
@ref{❨21❩, , @t{texi.lisp}}@: (file).
@item
@ref{❨22❩, , @t{doc.lisp}}@: (file).
@item
@ref{❨23❩, , @t{symbol.lisp}}@: (file).
@item
@ref{❨24❩, , @t{package.lisp}}@: (file).
@item
@ref{❨25❩, , @t{asdf.lisp}}@: (file).
@end itemize
@end table


@c -------------------------------------------
@c The net.didierverna.declt.assess/src module
@c -------------------------------------------
@node The net․didierverna․declt․assess/src module, , The net․didierverna․declt․core/src/doc module, Modules
@section @t{net.didierverna.declt.assess/src}
@anchor{❨9❩}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{❨27❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨4❩, , @t{net.didierverna.declt.assess}}@: (system).
@item Child Components
@itemize @bullet
@item
@ref{❨28❩, , @t{util.lisp}}@: (file).
@item
@ref{❨29❩, , @t{definition.lisp}}@: (file).
@item
@ref{❨30❩, , @t{license.lisp}}@: (file).
@item
@ref{❨31❩, , @t{symbol.lisp}}@: (file).
@item
@ref{❨32❩, , @t{package.lisp}}@: (file).
@item
@ref{❨33❩, , @t{asdf.lisp}}@: (file).
@item
@ref{❨34❩, , @t{finalize.lisp}}@: (file).
@item
@ref{❨35❩, , @t{assess.lisp}}@: (file).
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Modules, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The net․didierverna․declt/net․didierverna․declt․asd file::
* The net․didierverna․declt․setup/net․didierverna․declt․setup․asd file::
* The net․didierverna․declt․core/net․didierverna․declt․core․asd file::
* The net․didierverna․declt․assess/net․didierverna․declt․assess․asd file::
* The net․didierverna․declt․setup/package․lisp file::
* The net․didierverna․declt․setup/src/configuration․lisp file::
* The net․didierverna․declt․setup/src/readtable․lisp file::
* The net․didierverna․declt․setup/src/version․lisp file::
* The net․didierverna․declt․setup/src/util․lisp file::
* The net․didierverna․declt․core/package․lisp file::
* The net․didierverna․declt․core/src/util/misc․lisp file::
* The net․didierverna․declt․core/src/doc/texi․lisp file::
* The net․didierverna․declt․core/src/doc/doc․lisp file::
* The net․didierverna․declt․core/src/doc/symbol․lisp file::
* The net․didierverna․declt․core/src/doc/package․lisp file::
* The net․didierverna․declt․core/src/doc/asdf․lisp file::
* The net․didierverna․declt․core/src/declt․lisp file::
* The net․didierverna․declt․assess/package․lisp file::
* The net․didierverna․declt․assess/src/util․lisp file::
* The net․didierverna․declt․assess/src/definition․lisp file::
* The net․didierverna․declt․assess/src/license․lisp file::
* The net․didierverna․declt․assess/src/symbol․lisp file::
* The net․didierverna․declt․assess/src/package․lisp file::
* The net․didierverna․declt․assess/src/asdf․lisp file::
* The net․didierverna․declt․assess/src/finalize․lisp file::
* The net․didierverna․declt․assess/src/assess․lisp file::
@end menu

@node The net․didierverna․declt/net․didierverna․declt․asd file, The net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, Lisp files, Lisp files
@subsection @t{net.didierverna.declt/net.didierverna.declt.asd}
@anchor{❨10❩}@c
@fileindex{net.didierverna.declt.asd}@c
@table @strong
@item Source
@ref{❨10❩, , @t{net.didierverna.declt.asd}}.
@item Parent Component
@ref{❨1❩, , @t{net.didierverna.declt}}@: (system).
@item ASDF Systems
@ref{❨1❩, , @t{net.didierverna.declt}}.
@end table

@node The net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, The net․didierverna․declt․core/net․didierverna․declt․core․asd file, The net․didierverna․declt/net․didierverna․declt․asd file, Lisp files
@subsection @t{net.didierverna.declt.setup/net.didierverna.declt.setup.asd}
@anchor{❨11❩}@c
@fileindex{net.didierverna.declt.setup.asd}@c
@table @strong
@item Source
@ref{❨11❩, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{❨2❩, , @t{net.didierverna.declt.setup}}@: (system).
@item ASDF Systems
@ref{❨2❩, , @t{net.didierverna.declt.setup}}.
@end table

@node The net․didierverna․declt․core/net․didierverna․declt․core․asd file, The net․didierverna․declt․assess/net․didierverna․declt․assess․asd file, The net․didierverna․declt․setup/net․didierverna․declt․setup․asd file, Lisp files
@subsection @t{net.didierverna.declt.core/net.didierverna.declt.core.asd}
@anchor{❨12❩}@c
@fileindex{net.didierverna.declt.core.asd}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{net.didierverna.declt.core}}@: (system).
@item ASDF Systems
@ref{❨3❩, , @t{net.didierverna.declt.core}}.
@end table

@node The net․didierverna․declt․assess/net․didierverna․declt․assess․asd file, The net․didierverna․declt․setup/package․lisp file, The net․didierverna․declt․core/net․didierverna․declt․core․asd file, Lisp files
@subsection @t{net.didierverna.declt.assess/net.didierverna.declt.assess.asd}
@anchor{❨13❩}@c
@fileindex{net.didierverna.declt.assess.asd}@c
@table @strong
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨4❩, , @t{net.didierverna.declt.assess}}@: (system).
@item ASDF Systems
@ref{❨4❩, , @t{net.didierverna.declt.assess}}.
@end table

@node The net․didierverna․declt․setup/package․lisp file, The net․didierverna․declt․setup/src/configuration․lisp file, The net․didierverna․declt․assess/net․didierverna․declt․assess․asd file, Lisp files
@subsection @t{net.didierverna.declt.setup/package.lisp}
@anchor{❨14❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{❨11❩, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{❨2❩, , @t{net.didierverna.declt.setup}}@: (system).
@item Packages
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@end table

@node The net․didierverna․declt․setup/src/configuration․lisp file, The net․didierverna․declt․setup/src/readtable․lisp file, The net․didierverna․declt․setup/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.setup/src/configuration.lisp}
@anchor{❨15❩}@c
@fileindex{configuration.lisp}@c
@table @strong
@item Source
@ref{❨11❩, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{❨5❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨593❩, , @t{configuration}}@: (function).
@item
@ref{❨604❩, , @t{configure}}@: (function).
@end itemize
@item Internals
@ref{❨616❩, , @t{*configuration*}}@: (special variable).
@end table

@node The net․didierverna․declt․setup/src/readtable․lisp file, The net․didierverna․declt․setup/src/version․lisp file, The net․didierverna․declt․setup/src/configuration․lisp file, Lisp files
@subsection @t{net.didierverna.declt.setup/src/readtable.lisp}
@anchor{❨16❩}@c
@fileindex{readtable.lisp}@c
@table @strong
@item Dependency
@ref{❨15❩, , @t{configuration.lisp}}@: (file).
@item Source
@ref{❨11❩, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{❨5❩, , @t{src}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨618❩, , @t{clindent}}@: (function).
@item
@ref{❨614❩, , @t{defindent}}@: (macro).
@item
@ref{❨619❩, , @t{i-reader}}@: (function).
@end itemize
@end table

@node The net․didierverna․declt․setup/src/version․lisp file, The net․didierverna․declt․setup/src/util․lisp file, The net․didierverna․declt․setup/src/readtable․lisp file, Lisp files
@subsection @t{net.didierverna.declt.setup/src/version.lisp}
@anchor{❨17❩}@c
@fileindex{version.lisp}@c
@table @strong
@item Dependency
@ref{❨16❩, , @t{readtable.lisp}}@: (file).
@item Source
@ref{❨11❩, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{❨5❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨594❩, , @t{*copyright-years*}}@: (special variable).
@item
@ref{❨611❩, , @t{*release-major-level*}}@: (special variable).
@item
@ref{❨603❩, , @t{*release-minor-level*}}@: (special variable).
@item
@ref{❨605❩, , @t{*release-name*}}@: (special variable).
@item
@ref{❨598❩, , @t{*release-status*}}@: (special variable).
@item
@ref{❨597❩, , @t{*release-status-level*}}@: (special variable).
@item
@ref{❨602❩, , @t{version}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨615❩, , @t{%version}}@: (function).
@item
@ref{❨617❩, , @t{release-status-number}}@: (function).
@end itemize
@end table

@node The net․didierverna․declt․setup/src/util․lisp file, The net․didierverna․declt․core/package․lisp file, The net․didierverna․declt․setup/src/version․lisp file, Lisp files
@subsection @t{net.didierverna.declt.setup/src/util.lisp}
@anchor{❨18❩}@c
@fileindex{util.lisp}@c
@table @strong
@item Dependency
@ref{❨16❩, , @t{readtable.lisp}}@: (file).
@item Source
@ref{❨11❩, , @t{net.didierverna.declt.setup.asd}}.
@item Parent Component
@ref{❨5❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨600❩, , @t{abstract-class}}@: (class).
@item
@ref{❨610❩, , @t{declare-valid-superclass}}@: (macro).
@item
@ref{❨595❩, , @t{defabstract}}@: (macro).
@item
@ref{❨607❩, , @t{endpush}}@: (macro).
@item
@ref{❨606❩, , @t{find*}}@: (function).
@item
@ref{❨855❩, , @t{make-instance}}@: (method).
@item
@ref{❨612❩, , @t{mapcat}}@: (function).
@item
@ref{❨601❩, , @t{non-empty-string}}@: (type).
@item
@ref{❨608❩, , @t{non-empty-string-p}}@: (function).
@item
@ref{❨599❩, , @t{retain}}@: (function).
@item
@ref{❨853❩, , @t{validate-superclass}}@: (method).
@item
@ref{❨854❩, , @t{validate-superclass}}@: (method).
@item
@ref{❨613❩, , @t{when-let}}@: (macro).
@item
@ref{❨596❩, , @t{when-let*}}@: (macro).
@item
@ref{❨609❩, , @t{while}}@: (macro).
@end itemize
@end table

@node The net․didierverna․declt․core/package․lisp file, The net․didierverna․declt․core/src/util/misc․lisp file, The net․didierverna․declt․setup/src/util․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/package.lisp}
@anchor{❨19❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{net.didierverna.declt.core}}@: (system).
@item Packages
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Public Interface
@ref{❨621❩, , @t{nickname-package}}@: (function).
@end table

@node The net․didierverna․declt․core/src/util/misc․lisp file, The net․didierverna․declt․core/src/doc/texi․lisp file, The net․didierverna․declt․core/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/util/misc.lisp}
@anchor{❨20❩}@c
@fileindex{misc.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨7❩, , @t{util}}@: (module).
@item Internals
@ref{❨631❩, , @t{current-time-string}}@: (function).
@end table

@node The net․didierverna․declt․core/src/doc/texi․lisp file, The net․didierverna․declt․core/src/doc/doc․lisp file, The net․didierverna․declt․core/src/util/misc․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/texi.lisp}
@anchor{❨21❩}@c
@fileindex{texi.lisp}@c
@table @strong
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨8❩, , @t{doc}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨642❩, , @t{%deffn}}@: (function).
@item
@ref{❨638❩, , @t{*fragile-characters*}}@: (special variable).
@item
@ref{❨746❩, , @t{*section-names*}}@: (special variable).
@item
@ref{❨720❩, , @t{*special-characters*}}@: (special variable).
@item
@ref{❨712❩, , @t{@atchar{}anchor}}@: (function).
@item
@ref{❨673❩, , @t{@atchar{}deffn}}@: (function).
@item
@ref{❨639❩, , @t{@atchar{}deffnx}}@: (function).
@item
@ref{❨830❩, , @t{@atchar{}deftp}}@: (function).
@item
@ref{❨688❩, , @t{@atchar{}defvr}}@: (function).
@item
@ref{❨759❩, , @t{@atchar{}end}}@: (function).
@item
@ref{❨714❩, , @t{@atchar{}item}}@: (function).
@item
@ref{❨692❩, , @t{@atchar{}itemize}}@: (function).
@item
@ref{❨689❩, , @t{@atchar{}multitable}}@: (function).
@item
@ref{❨717❩, , @t{@atchar{}ref}}@: (function).
@item
@ref{❨827❩, , @t{@atchar{}table}}@: (function).
@item
@ref{❨762❩, , @t{add-child}}@: (function).
@item
@ref{❨754❩, , @t{copy-node}}@: (function).
@item
@ref{❨783❩, , @t{deffn}}@: (macro).
@item
@ref{❨719❩, , @t{deftp}}@: (macro).
@item
@ref{❨636❩, , @t{defvr}}@: (macro).
@item
@ref{❨629❩, , @t{escape}}@: (function).
@item
@ref{❨693❩, , @t{escape-anchor}}@: (function).
@item
@ref{❨643❩, , @t{escape-label}}@: (function).
@item
@ref{❨630❩, , @t{escape-lambda-list}}@: (function).
@item
@ref{❨771❩, , @t{first-word-length}}@: (function).
@item
@ref{❨763❩, , @t{item}}@: (macro).
@item
@ref{❨829❩, , @t{itemize}}@: (macro).
@item
@ref{❨760❩, , @t{itemize-list}}@: (function).
@item
@ref{❨745❩, , @t{make-node}}@: (function).
@item
@ref{❨637❩, , @t{multitable}}@: (macro).
@item
@ref{❨696❩, , @t{node}}@: (structure).
@item
@ref{❨623❩, , @t{node-after-menu-contents}}@: (reader).
@item
@ref{❨624❩, , @t{(setf node-after-menu-contents)}}@: (writer).
@item
@ref{❨757❩, , @t{node-before-menu-contents}}@: (reader).
@item
@ref{❨758❩, , @t{(setf node-before-menu-contents)}}@: (writer).
@item
@ref{❨774❩, , @t{node-children}}@: (reader).
@item
@ref{❨775❩, , @t{(setf node-children)}}@: (writer).
@item
@ref{❨755❩, , @t{node-name}}@: (reader).
@item
@ref{❨756❩, , @t{(setf node-name)}}@: (writer).
@item
@ref{❨752❩, , @t{node-next}}@: (reader).
@item
@ref{❨753❩, , @t{(setf node-next)}}@: (writer).
@item
@ref{❨709❩, , @t{node-p}}@: (function).
@item
@ref{❨625❩, , @t{node-previous}}@: (reader).
@item
@ref{❨626❩, , @t{(setf node-previous)}}@: (writer).
@item
@ref{❨707❩, , @t{node-section-name}}@: (reader).
@item
@ref{❨708❩, , @t{(setf node-section-name)}}@: (writer).
@item
@ref{❨721❩, , @t{node-section-type}}@: (reader).
@item
@ref{❨722❩, , @t{(setf node-section-type)}}@: (writer).
@item
@ref{❨684❩, , @t{node-synopsis}}@: (reader).
@item
@ref{❨685❩, , @t{(setf node-synopsis)}}@: (writer).
@item
@ref{❨768❩, , @t{node-up}}@: (reader).
@item
@ref{❨769❩, , @t{(setf node-up)}}@: (writer).
@item
@ref{❨773❩, , @t{read-next-line}}@: (function).
@item
@ref{❨694❩, , @t{render-node}}@: (function).
@item
@ref{❨711❩, , @t{render-text}}@: (function).
@item
@ref{❨640❩, , @t{render-to-string}}@: (macro).
@item
@ref{❨831❩, , @t{render-top-node}}@: (function).
@item
@ref{❨691❩, , @t{table}}@: (macro).
@end itemize
@end table

@node The net․didierverna․declt․core/src/doc/doc․lisp file, The net․didierverna․declt․core/src/doc/symbol․lisp file, The net․didierverna․declt․core/src/doc/texi․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/doc.lisp}
@anchor{❨22❩}@c
@fileindex{doc.lisp}@c
@table @strong
@item Dependency
@ref{❨21❩, , @t{texi.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨8❩, , @t{doc}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨767❩, , @t{*blanks*}}@: (special variable).
@item
@ref{❨833❩, , @t{anchor}}@: (function).
@item
@ref{❨695❩, , @t{anchor-and-index}}@: (function).
@item
@ref{❨772❩, , @t{anchor-name}}@: (function).
@item
@ref{❨646❩, , @t{category-name}}@: (generic function).
@item
@ref{❨679❩, , @t{context}}@: (class).
@item
@ref{❨750❩, , @t{declt-notice}}@: (reader method).
@item
@ref{❨634❩, , @t{default-values}}@: (reader method).
@item
@ref{❨786❩, , @t{document}}@: (generic function).
@item
@ref{❨826❩, , @t{document}}@: (method combination).
@item
@ref{❨678❩, , @t{foreign-definitions}}@: (reader method).
@item
@ref{❨686❩, , @t{index}}@: (function).
@item
@ref{❨723❩, , @t{index-command-name}}@: (generic function).
@item
@ref{❨785❩, , @t{locations}}@: (reader method).
@item
@ref{❨751❩, , @t{long-title}}@: (function).
@item
@ref{❨747❩, , @t{make-context}}@: (function).
@item
@ref{❨748❩, , @t{reference}}@: (function).
@item
@ref{❨744❩, , @t{render-docstring}}@: (function).
@item
@ref{❨715❩, , @t{render-references}}@: (function).
@item
@ref{❨761❩, , @t{reveal}}@: (function).
@item
@ref{❨776❩, , @t{safe-name}}@: (generic function).
@end itemize
@end table

@node The net․didierverna․declt․core/src/doc/symbol․lisp file, The net․didierverna․declt․core/src/doc/package․lisp file, The net․didierverna․declt․core/src/doc/doc․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/symbol.lisp}
@anchor{❨23❩}@c
@fileindex{symbol.lisp}@c
@table @strong
@item Dependency
@ref{❨22❩, , @t{doc.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨8❩, , @t{doc}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨674❩, , @t{*categories*}}@: (special variable).
@item
@ref{❨832❩, , @t{add-categories-node}}@: (function).
@item
@ref{❨676❩, , @t{add-category-node}}@: (function).
@item
@ref{❨632❩, , @t{add-definitions-node}}@: (function).
@item
@ref{❨651❩, , @t{category-name}}@: (method).
@item
@ref{❨652❩, , @t{category-name}}@: (method).
@item
@ref{❨653❩, , @t{category-name}}@: (method).
@item
@ref{❨654❩, , @t{category-name}}@: (method).
@item
@ref{❨655❩, , @t{category-name}}@: (method).
@item
@ref{❨656❩, , @t{category-name}}@: (method).
@item
@ref{❨657❩, , @t{category-name}}@: (method).
@item
@ref{❨658❩, , @t{category-name}}@: (method).
@item
@ref{❨659❩, , @t{category-name}}@: (method).
@item
@ref{❨660❩, , @t{category-name}}@: (method).
@item
@ref{❨661❩, , @t{category-name}}@: (method).
@item
@ref{❨662❩, , @t{category-name}}@: (method).
@item
@ref{❨663❩, , @t{category-name}}@: (method).
@item
@ref{❨664❩, , @t{category-name}}@: (method).
@item
@ref{❨665❩, , @t{category-name}}@: (method).
@item
@ref{❨666❩, , @t{category-name}}@: (method).
@item
@ref{❨667❩, , @t{category-name}}@: (method).
@item
@ref{❨668❩, , @t{category-name}}@: (method).
@item
@ref{❨669❩, , @t{category-name}}@: (method).
@item
@ref{❨670❩, , @t{category-name}}@: (method).
@item
@ref{❨671❩, , @t{category-name}}@: (method).
@item
@ref{❨672❩, , @t{category-name}}@: (method).
@item
@ref{❨793❩, , @t{document}}@: (method).
@item
@ref{❨794❩, , @t{document}}@: (method).
@item
@ref{❨795❩, , @t{document}}@: (method).
@item
@ref{❨796❩, , @t{document}}@: (method).
@item
@ref{❨797❩, , @t{document}}@: (method).
@item
@ref{❨798❩, , @t{document}}@: (method).
@item
@ref{❨799❩, , @t{document}}@: (method).
@item
@ref{❨800❩, , @t{document}}@: (method).
@item
@ref{❨801❩, , @t{document}}@: (method).
@item
@ref{❨802❩, , @t{document}}@: (method).
@item
@ref{❨803❩, , @t{document}}@: (method).
@item
@ref{❨804❩, , @t{document}}@: (method).
@item
@ref{❨805❩, , @t{document}}@: (method).
@item
@ref{❨806❩, , @t{document}}@: (method).
@item
@ref{❨807❩, , @t{document}}@: (method).
@item
@ref{❨808❩, , @t{document}}@: (method).
@item
@ref{❨809❩, , @t{document}}@: (method).
@item
@ref{❨810❩, , @t{document}}@: (method).
@item
@ref{❨811❩, , @t{document}}@: (method).
@item
@ref{❨812❩, , @t{document}}@: (method).
@item
@ref{❨813❩, , @t{document}}@: (method).
@item
@ref{❨814❩, , @t{document}}@: (method).
@item
@ref{❨815❩, , @t{document}}@: (method).
@item
@ref{❨816❩, , @t{document}}@: (method).
@item
@ref{❨817❩, , @t{document}}@: (method).
@item
@ref{❨818❩, , @t{document}}@: (method).
@item
@ref{❨819❩, , @t{document}}@: (method).
@item
@ref{❨820❩, , @t{document}}@: (method).
@item
@ref{❨821❩, , @t{document}}@: (method).
@item
@ref{❨822❩, , @t{document}}@: (method).
@item
@ref{❨823❩, , @t{document}}@: (method).
@item
@ref{❨824❩, , @t{document}}@: (method).
@item
@ref{❨728❩, , @t{index-command-name}}@: (method).
@item
@ref{❨729❩, , @t{index-command-name}}@: (method).
@item
@ref{❨730❩, , @t{index-command-name}}@: (method).
@item
@ref{❨731❩, , @t{index-command-name}}@: (method).
@item
@ref{❨732❩, , @t{index-command-name}}@: (method).
@item
@ref{❨733❩, , @t{index-command-name}}@: (method).
@item
@ref{❨734❩, , @t{index-command-name}}@: (method).
@item
@ref{❨735❩, , @t{index-command-name}}@: (method).
@item
@ref{❨736❩, , @t{index-command-name}}@: (method).
@item
@ref{❨737❩, , @t{index-command-name}}@: (method).
@item
@ref{❨738❩, , @t{index-command-name}}@: (method).
@item
@ref{❨739❩, , @t{index-command-name}}@: (method).
@item
@ref{❨740❩, , @t{index-command-name}}@: (method).
@item
@ref{❨741❩, , @t{index-command-name}}@: (method).
@item
@ref{❨742❩, , @t{index-command-name}}@: (method).
@item
@ref{❨743❩, , @t{index-command-name}}@: (method).
@item
@ref{❨627❩, , @t{merge-expander-p}}@: (function).
@item
@ref{❨764❩, , @t{merge-generic-writer}}@: (function).
@item
@ref{❨628❩, , @t{merge-methods}}@: (function).
@item
@ref{❨710❩, , @t{merge-ordinary-writer}}@: (function).
@item
@ref{❨765❩, , @t{render-definition-core}}@: (function).
@item
@ref{❨716❩, , @t{render-headline}}@: (function).
@item
@ref{❨622❩, , @t{render-package-reference}}@: (function).
@item
@ref{❨770❩, , @t{safe-lambda-list}}@: (function).
@item
@ref{❨779❩, , @t{safe-name}}@: (method).
@item
@ref{❨780❩, , @t{safe-name}}@: (method).
@item
@ref{❨781❩, , @t{safe-name}}@: (method).
@item
@ref{❨645❩, , @t{safe-specializers}}@: (function).
@end itemize
@end table

@node The net․didierverna․declt․core/src/doc/package․lisp file, The net․didierverna․declt․core/src/doc/asdf․lisp file, The net․didierverna․declt․core/src/doc/symbol․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/package.lisp}
@anchor{❨24❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Dependency
@ref{❨23❩, , @t{symbol.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨8❩, , @t{doc}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨675❩, , @t{add-packages-node}}@: (function).
@item
@ref{❨650❩, , @t{category-name}}@: (method).
@item
@ref{❨792❩, , @t{document}}@: (method).
@item
@ref{❨727❩, , @t{index-command-name}}@: (method).
@end itemize
@end table

@node The net․didierverna․declt․core/src/doc/asdf․lisp file, The net․didierverna․declt․core/src/declt․lisp file, The net․didierverna․declt․core/src/doc/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/doc/asdf.lisp}
@anchor{❨25❩}@c
@fileindex{asdf.lisp}@c
@table @strong
@item Dependency
@ref{❨24❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨8❩, , @t{doc}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨635❩, , @t{add-files-node}}@: (function).
@item
@ref{❨718❩, , @t{add-modules-node}}@: (function).
@item
@ref{❨641❩, , @t{add-systems-node}}@: (function).
@item
@ref{❨647❩, , @t{category-name}}@: (method).
@item
@ref{❨648❩, , @t{category-name}}@: (method).
@item
@ref{❨649❩, , @t{category-name}}@: (method).
@item
@ref{❨787❩, , @t{document}}@: (method).
@item
@ref{❨788❩, , @t{document}}@: (method).
@item
@ref{❨789❩, , @t{document}}@: (method).
@item
@ref{❨790❩, , @t{document}}@: (method).
@item
@ref{❨791❩, , @t{document}}@: (method).
@item
@ref{❨644❩, , @t{file-node}}@: (function).
@item
@ref{❨724❩, , @t{index-command-name}}@: (method).
@item
@ref{❨725❩, , @t{index-command-name}}@: (method).
@item
@ref{❨726❩, , @t{index-command-name}}@: (method).
@item
@ref{❨690❩, , @t{render-dependencies}}@: (function).
@item
@ref{❨687❩, , @t{render-dependency}}@: (function).
@item
@ref{❨777❩, , @t{safe-name}}@: (method).
@item
@ref{❨778❩, , @t{safe-name}}@: (method).
@end itemize
@end table

@node The net․didierverna․declt․core/src/declt․lisp file, The net․didierverna․declt․assess/package․lisp file, The net․didierverna․declt․core/src/doc/asdf․lisp file, Lisp files
@subsection @t{net.didierverna.declt.core/src/declt.lisp}
@anchor{❨26❩}@c
@fileindex{declt.lisp}@c
@table @strong
@item Dependency
@ref{❨8❩, , @t{doc}}@: (module).
@item Source
@ref{❨12❩, , @t{net.didierverna.declt.core.asd}}.
@item Parent Component
@ref{❨6❩, , @t{src}}@: (module).
@item Public Interface
@ref{❨620❩, , @t{declt}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨766❩, , @t{declt-1}}@: (function).
@item
@ref{❨828❩, , @t{render-header}}@: (function).
@item
@ref{❨713❩, , @t{select-keys}}@: (function).
@end itemize
@end table

@node The net․didierverna․declt․assess/package․lisp file, The net․didierverna․declt․assess/src/util․lisp file, The net․didierverna․declt․core/src/declt․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/package.lisp}
@anchor{❨27❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨4❩, , @t{net.didierverna.declt.assess}}@: (system).
@item Packages
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@end table

@node The net․didierverna․declt․assess/src/util․lisp file, The net․didierverna․declt․assess/src/definition․lisp file, The net․didierverna․declt․assess/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/src/util.lisp}
@anchor{❨28❩}@c
@fileindex{util.lisp}@c
@table @strong
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨9❩, , @t{src}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨566❩, , @t{one-liner-p}}@: (function).
@item
@ref{❨569❩, , @t{parse-contact(s)}}@: (function).
@item
@ref{❨501❩, , @t{parse-contact-string}}@: (function).
@item
@ref{❨509❩, , @t{reorder-dependency-def}}@: (function).
@item
@ref{❨533❩, , @t{reordered-dependency-def-system}}@: (function).
@item
@ref{❨492❩, , @t{source-by-name}}@: (function).
@item
@ref{❨512❩, , @t{source-by-object}}@: (function).
@item
@ref{❨506❩, , @t{validate-email}}@: (function).
@end itemize
@end table

@node The net․didierverna․declt․assess/src/definition․lisp file, The net․didierverna․declt․assess/src/license․lisp file, The net․didierverna․declt․assess/src/util․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/src/definition.lisp}
@anchor{❨29❩}@c
@fileindex{definition.lisp}@c
@table @strong
@item Dependency
@ref{❨28❩, , @t{util.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨9❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨385❩, , @t{definition}}@: (class).
@item
@ref{❨393❩, , @t{docstring}}@: (generic function).
@item
@ref{❨241❩, , @t{foreignp}}@: (reader method).
@item
@ref{❨243❩, , @t{(setf foreignp)}}@: (writer method).
@item
@ref{❨257❩, , @t{name}}@: (generic function).
@item
@ref{❨321❩, , @t{object}}@: (reader method).
@item
@ref{❨847❩, , @t{print-object}}@: (method).
@item
@ref{❨382❩, , @t{private-definitions}}@: (generic function).
@item
@ref{❨296❩, , @t{public-definitions}}@: (generic function).
@item
@ref{❨450❩, , @t{source-file}}@: (reader method).
@item
@ref{❨452❩, , @t{(setf source-file)}}@: (writer method).
@item
@ref{❨173❩, , @t{uid}}@: (reader method).
@item
@ref{❨175❩, , @t{(setf uid)}}@: (writer method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨524❩, , @t{domesticp}}@: (function).
@item
@ref{❨515❩, , @t{find-definition}}@: (function).
@item
@ref{❨576❩, , @t{source-pathname}}@: (generic function).
@end itemize
@end table

@node The net․didierverna․declt․assess/src/license․lisp file, The net․didierverna․declt․assess/src/symbol․lisp file, The net․didierverna․declt․assess/src/definition․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/src/license.lisp}
@anchor{❨30❩}@c
@fileindex{license.lisp}@c
@table @strong
@item Dependency
@ref{❨29❩, , @t{definition.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨9❩, , @t{src}}@: (module).
@item Internals
@ref{❨508❩, , @t{*licenses*}}@: (special variable).
@end table

@node The net․didierverna․declt․assess/src/symbol․lisp file, The net․didierverna․declt․assess/src/package․lisp file, The net․didierverna․declt․assess/src/license․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/src/symbol.lisp}
@anchor{❨31❩}@c
@fileindex{symbol.lisp}@c
@table @strong
@item Dependency
@ref{❨30❩, , @t{license.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨9❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨135❩, , @t{accessor-method-definition}}@: (class).
@item
@ref{❨229❩, , @t{accessor-mixin}}@: (class).
@item
@ref{❨215❩, , @t{alias-definition}}@: (class).
@item
@ref{❨79❩, , @t{allocation}}@: (function).
@item
@ref{❨417❩, , @t{class-definition}}@: (class).
@item
@ref{❨438❩, , @t{classoid}}@: (reader method).
@item
@ref{❨337❩, , @t{classoid-definition}}@: (class).
@item
@ref{❨200❩, , @t{clients}}@: (reader method).
@item
@ref{❨202❩, , @t{(setf clients)}}@: (writer method).
@item
@ref{❨177❩, , @t{clos-classoid-mixin}}@: (class).
@item
@ref{❨128❩, , @t{clos-slot-definition}}@: (class).
@item
@ref{❨221❩, , @t{clos-structure-definition}}@: (class).
@item
@ref{❨73❩, , @t{combination}}@: (reader method).
@item
@ref{❨74❩, , @t{combination}}@: (reader method).
@item
@ref{❨76❩, , @t{(setf combination)}}@: (writer method).
@item
@ref{❨203❩, , @t{combination-definition}}@: (class).
@item
@ref{❨314❩, , @t{combination-options}}@: (function).
@item
@ref{❨95❩, , @t{compiler-macro-alias-definition}}@: (class).
@item
@ref{❨390❩, , @t{compiler-macro-definition}}@: (class).
@item
@ref{❨421❩, , @t{condition-definition}}@: (class).
@item
@ref{❨392❩, , @t{constant-definition}}@: (class).
@item
@ref{❨486❩, , @t{definition-class}}@: (reader method).
@item
@ref{❨435❩, , @t{definition-compiler-macro}}@: (reader method).
@item
@ref{❨488❩, , @t{definition-condition}}@: (reader method).
@item
@ref{❨290❩, , @t{definition-function}}@: (reader method).
@item
@ref{❨51❩, , @t{definition-method}}@: (reader method).
@item
@ref{❨313❩, , @t{definition-structure}}@: (reader method).
@item
@ref{❨426❩, , @t{definition-symbol}}@: (reader method).
@item
@ref{❨430❩, , @t{direct-default-initargs}}@: (function).
@item
@ref{❨40❩, , @t{direct-methods}}@: (reader method).
@item
@ref{❨42❩, , @t{(setf direct-methods)}}@: (writer method).
@item
@ref{❨169❩, , @t{direct-slots}}@: (reader method).
@item
@ref{❨171❩, , @t{(setf direct-slots)}}@: (writer method).
@item
@ref{❨459❩, , @t{direct-subclasses}}@: (reader method).
@item
@ref{❨461❩, , @t{(setf direct-subclasses)}}@: (writer method).
@item
@ref{❨59❩, , @t{direct-subclassoids}}@: (reader method).
@item
@ref{❨61❩, , @t{(setf direct-subclassoids)}}@: (writer method).
@item
@ref{❨106❩, , @t{direct-subconditions}}@: (reader method).
@item
@ref{❨108❩, , @t{(setf direct-subconditions)}}@: (writer method).
@item
@ref{❨250❩, , @t{direct-substructures}}@: (reader method).
@item
@ref{❨252❩, , @t{(setf direct-substructures)}}@: (writer method).
@item
@ref{❨226❩, , @t{direct-superclasses}}@: (reader method).
@item
@ref{❨228❩, , @t{(setf direct-superclasses)}}@: (writer method).
@item
@ref{❨343❩, , @t{direct-superclassoids}}@: (reader method).
@item
@ref{❨345❩, , @t{(setf direct-superclassoids)}}@: (writer method).
@item
@ref{❨304❩, , @t{direct-superconditions}}@: (reader method).
@item
@ref{❨306❩, , @t{(setf direct-superconditions)}}@: (writer method).
@item
@ref{❨118❩, , @t{direct-superstructures}}@: (reader method).
@item
@ref{❨120❩, , @t{(setf direct-superstructures)}}@: (writer method).
@item
@ref{❨395❩, , @t{docstring}}@: (method).
@item
@ref{❨396❩, , @t{docstring}}@: (method).
@item
@ref{❨397❩, , @t{docstring}}@: (method).
@item
@ref{❨398❩, , @t{docstring}}@: (method).
@item
@ref{❨399❩, , @t{docstring}}@: (method).
@item
@ref{❨400❩, , @t{docstring}}@: (method).
@item
@ref{❨401❩, , @t{docstring}}@: (method).
@item
@ref{❨402❩, , @t{docstring}}@: (method).
@item
@ref{❨403❩, , @t{docstring}}@: (method).
@item
@ref{❨404❩, , @t{docstring}}@: (method).
@item
@ref{❨405❩, , @t{docstring}}@: (method).
@item
@ref{❨53❩, , @t{element-type}}@: (reader method).
@item
@ref{❨55❩, , @t{(setf element-type)}}@: (writer method).
@item
@ref{❨245❩, , @t{expander}}@: (reader method).
@item
@ref{❨246❩, , @t{expander}}@: (reader method).
@item
@ref{❨123❩, , @t{expander-definition}}@: (class).
@item
@ref{❨442❩, , @t{expander-for}}@: (reader method).
@item
@ref{❨444❩, , @t{(setf expander-for)}}@: (writer method).
@item
@ref{❨463❩, , @t{expanders-to}}@: (reader method).
@item
@ref{❨465❩, , @t{(setf expanders-to)}}@: (writer method).
@item
@ref{❨478❩, , @t{funcoid}}@: (reader method).
@item
@ref{❨291❩, , @t{funcoid-definition}}@: (class).
@item
@ref{❨263❩, , @t{function-alias-definition}}@: (class).
@item
@ref{❨270❩, , @t{function-definition}}@: (class).
@item
@ref{❨329❩, , @t{generic}}@: (reader method).
@item
@ref{❨274❩, , @t{generic-accessor-definition}}@: (class).
@item
@ref{❨45❩, , @t{generic-function-definition}}@: (class).
@item
@ref{❨56❩, , @t{generic-reader-definition}}@: (class).
@item
@ref{❨346❩, , @t{generic-writer-definition}}@: (class).
@item
@ref{❨196❩, , @t{home-package}}@: (reader method).
@item
@ref{❨198❩, , @t{(setf home-package)}}@: (writer method).
@item
@ref{❨453❩, , @t{identity-with-one-argument}}@: (function).
@item
@ref{❨264❩, , @t{initargs}}@: (function).
@item
@ref{❨207❩, , @t{initform}}@: (function).
@item
@ref{❨843❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨846❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨850❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨466❩, , @t{lambda-list}}@: (generic function).
@item
@ref{❨429❩, , @t{long-combination-definition}}@: (class).
@item
@ref{❨43❩, , @t{long-expander-definition}}@: (class).
@item
@ref{❨341❩, , @t{macro}}@: (reader method).
@item
@ref{❨416❩, , @t{macro-alias-definition}}@: (class).
@item
@ref{❨266❩, , @t{macro-definition}}@: (class).
@item
@ref{❨85❩, , @t{method-definition}}@: (class).
@item
@ref{❨92❩, , @t{method-definition-p}}@: (function).
@item
@ref{❨81❩, , @t{methods}}@: (reader method).
@item
@ref{❨83❩, , @t{(setf methods)}}@: (writer method).
@item
@ref{❨260❩, , @t{name}}@: (method).
@item
@ref{❨261❩, , @t{name}}@: (method).
@item
@ref{❨262❩, , @t{name}}@: (method).
@item
@ref{❨265❩, , @t{ordinary-accessor-definition}}@: (class).
@item
@ref{❨436❩, , @t{ordinary-function-definition}}@: (class).
@item
@ref{❨186❩, , @t{ordinary-reader-definition}}@: (class).
@item
@ref{❨193❩, , @t{ordinary-writer-definition}}@: (class).
@item
@ref{❨377❩, , @t{owner}}@: (reader method).
@item
@ref{❨378❩, , @t{owner}}@: (reader method).
@item
@ref{❨380❩, , @t{(setf owner)}}@: (writer method).
@item
@ref{❨381❩, , @t{(setf owner)}}@: (writer method).
@item
@ref{❨294❩, , @t{publicp}}@: (function).
@item
@ref{❨475❩, , @t{qualifiers}}@: (function).
@item
@ref{❨97❩, , @t{reader-method-definition}}@: (class).
@item
@ref{❨89❩, , @t{reader-method-definition-p}}@: (function).
@item
@ref{❨234❩, , @t{readers}}@: (reader method).
@item
@ref{❨236❩, , @t{(setf readers)}}@: (writer method).
@item
@ref{❨331❩, , @t{referee}}@: (reader method).
@item
@ref{❨333❩, , @t{(setf referee)}}@: (writer method).
@item
@ref{❨237❩, , @t{setfable-funcoid-definition}}@: (class).
@item
@ref{❨366❩, , @t{setfp}}@: (reader method).
@item
@ref{❨367❩, , @t{setfp}}@: (reader method).
@item
@ref{❨231❩, , @t{short-combination-definition}}@: (class).
@item
@ref{❨479❩, , @t{short-expander-definition}}@: (class).
@item
@ref{❨122❩, , @t{short-expander-definition-p}}@: (function).
@item
@ref{❨78❩, , @t{slot}}@: (reader method).
@item
@ref{❨159❩, , @t{slot-definition}}@: (class).
@item
@ref{❨94❩, , @t{special-definition}}@: (class).
@item
@ref{❨182❩, , @t{specializers}}@: (reader method).
@item
@ref{❨184❩, , @t{(setf specializers)}}@: (writer method).
@item
@ref{❨190❩, , @t{standalone-combinator}}@: (reader method).
@item
@ref{❨192❩, , @t{(setf standalone-combinator)}}@: (writer method).
@item
@ref{❨358❩, , @t{standalone-reader}}@: (reader method).
@item
@ref{❨360❩, , @t{(setf standalone-reader)}}@: (writer method).
@item
@ref{❨63❩, , @t{standalone-writer}}@: (reader method).
@item
@ref{❨65❩, , @t{(setf standalone-writer)}}@: (writer method).
@item
@ref{❨285❩, , @t{structure-definition}}@: (class).
@item
@ref{❨141❩, , @t{structure-type}}@: (reader method).
@item
@ref{❨143❩, , @t{(setf structure-type)}}@: (writer method).
@item
@ref{❨218❩, , @t{symbol-definition}}@: (class).
@item
@ref{❨144❩, , @t{symbol-definition-p}}@: (function).
@item
@ref{❨145❩, , @t{symbol-macro-definition}}@: (class).
@item
@ref{❨248❩, , @t{target-slot}}@: (reader method).
@item
@ref{❨322❩, , @t{type-definition}}@: (class).
@item
@ref{❨431❩, , @t{typed-structure-definition}}@: (class).
@item
@ref{❨127❩, , @t{typed-structure-slot-definition}}@: (class).
@item
@ref{❨334❩, , @t{value-type}}@: (generic function).
@item
@ref{❨129❩, , @t{variable-definition}}@: (class).
@item
@ref{❨44❩, , @t{varoid-definition}}@: (class).
@item
@ref{❨268❩, , @t{writer-method-definition}}@: (class).
@item
@ref{❨185❩, , @t{writer-method-definition-p}}@: (function).
@item
@ref{❨446❩, , @t{writers}}@: (reader method).
@item
@ref{❨448❩, , @t{(setf writers)}}@: (writer method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨571❩, , @t{definition-source-by-name}}@: (function).
@item
@ref{❨521❩, , @t{make-classoid-definition}}@: (function).
@item
@ref{❨507❩, , @t{make-clos-slot-definition}}@: (function).
@item
@ref{❨590❩, , @t{make-combination-definition}}@: (function).
@item
@ref{❨528❩, , @t{make-compiler-macro-alias-definition}}@: (function).
@item
@ref{❨541❩, , @t{make-compiler-macro-definition}}@: (function).
@item
@ref{❨502❩, , @t{make-constant-definition}}@: (function).
@item
@ref{❨540❩, , @t{make-expander-definition}}@: (function).
@item
@ref{❨568❩, , @t{make-function-alias-definition}}@: (function).
@item
@ref{❨491❩, , @t{make-generic-function-definition}}@: (function).
@item
@ref{❨532❩, , @t{make-macro-alias-definition}}@: (function).
@item
@ref{❨516❩, , @t{make-macro-definition}}@: (function).
@item
@ref{❨592❩, , @t{make-method-definition}}@: (function).
@item
@ref{❨499❩, , @t{make-ordinary-function-definition}}@: (function).
@item
@ref{❨523❩, , @t{make-special-definition}}@: (function).
@item
@ref{❨589❩, , @t{make-symbol-macro-definition}}@: (function).
@item
@ref{❨500❩, , @t{make-type-definition}}@: (function).
@item
@ref{❨493❩, , @t{make-typed-structure-slot-definition}}@: (function).
@item
@ref{❨543❩, , @t{method-name}}@: (function).
@item
@ref{❨578❩, , @t{source-pathname}}@: (method).
@item
@ref{❨579❩, , @t{source-pathname}}@: (method).
@item
@ref{❨580❩, , @t{source-pathname}}@: (method).
@item
@ref{❨581❩, , @t{source-pathname}}@: (method).
@item
@ref{❨582❩, , @t{source-pathname}}@: (method).
@item
@ref{❨583❩, , @t{source-pathname}}@: (method).
@item
@ref{❨584❩, , @t{source-pathname}}@: (method).
@item
@ref{❨585❩, , @t{source-pathname}}@: (method).
@end itemize
@end table

@node The net․didierverna․declt․assess/src/package․lisp file, The net․didierverna․declt․assess/src/asdf․lisp file, The net․didierverna․declt․assess/src/symbol․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/src/package.lisp}
@anchor{❨32❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Dependency
@ref{❨31❩, , @t{symbol.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨9❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨188❩, , @t{definition-package}}@: (reader method).
@item
@ref{❨352❩, , @t{definitions}}@: (reader method).
@item
@ref{❨356❩, , @t{(setf definitions)}}@: (writer method).
@item
@ref{❨844❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨259❩, , @t{name}}@: (method).
@item
@ref{❨288❩, , @t{nicknames}}@: (function).
@item
@ref{❨208❩, , @t{package-definition}}@: (class).
@item
@ref{❨413❩, , @t{package-definition-p}}@: (function).
@item
@ref{❨383❩, , @t{private-definitions}}@: (method).
@item
@ref{❨297❩, , @t{public-definitions}}@: (method).
@item
@ref{❨362❩, , @t{use-list}}@: (reader method).
@item
@ref{❨364❩, , @t{(setf use-list)}}@: (writer method).
@item
@ref{❨309❩, , @t{used-by-list}}@: (reader method).
@item
@ref{❨311❩, , @t{(setf used-by-list)}}@: (writer method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨496❩, , @t{external-symbols}}@: (reader method).
@item
@ref{❨498❩, , @t{(setf external-symbols)}}@: (writer method).
@item
@ref{❨535❩, , @t{internal-symbols}}@: (reader method).
@item
@ref{❨537❩, , @t{(setf internal-symbols)}}@: (writer method).
@item
@ref{❨518❩, , @t{make-package-definition}}@: (function).
@item
@ref{❨527❩, , @t{package-external-symbols}}@: (function).
@item
@ref{❨511❩, , @t{package-internal-symbols}}@: (function).
@end itemize
@end table

@node The net․didierverna․declt․assess/src/asdf․lisp file, The net․didierverna․declt․assess/src/finalize․lisp file, The net․didierverna․declt․assess/src/package․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/src/asdf.lisp}
@anchor{❨33❩}@c
@fileindex{asdf.lisp}@c
@table @strong
@item Dependency
@ref{❨32❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨9❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨112❩, , @t{authors}}@: (reader method).
@item
@ref{❨114❩, , @t{(setf authors)}}@: (writer method).
@item
@ref{❨57❩, , @t{bug-tracker}}@: (function).
@item
@ref{❨287❩, , @t{c-file-definition}}@: (class).
@item
@ref{❨482❩, , @t{children}}@: (reader method).
@item
@ref{❨484❩, , @t{(setf children)}}@: (writer method).
@item
@ref{❨411❩, , @t{cl-source-file.asd}}@: (class).
@item
@ref{❨428❩, , @t{component}}@: (reader method).
@item
@ref{❨130❩, , @t{component-definition}}@: (class).
@item
@ref{❨71❩, , @t{component-definition-p}}@: (function).
@item
@ref{❨319❩, , @t{definition-version}}@: (function).
@item
@ref{❨351❩, , @t{definitions}}@: (reader method).
@item
@ref{❨355❩, , @t{(setf definitions)}}@: (writer method).
@item
@ref{❨300❩, , @t{defsystem-dependencies}}@: (reader method).
@item
@ref{❨302❩, , @t{(setf defsystem-dependencies)}}@: (writer method).
@item
@ref{❨325❩, , @t{dependencies}}@: (reader method).
@item
@ref{❨327❩, , @t{(setf dependencies)}}@: (writer method).
@item
@ref{❨115❩, , @t{description}}@: (function).
@item
@ref{❨295❩, , @t{doc-file-definition}}@: (class).
@item
@ref{❨394❩, , @t{docstring}}@: (method).
@item
@ref{❨90❩, , @t{extension}}@: (function).
@item
@ref{❨415❩, , @t{file}}@: (reader method).
@item
@ref{❨347❩, , @t{file-definition}}@: (class).
@item
@ref{❨206❩, , @t{file-definition-p}}@: (function).
@item
@ref{❨91❩, , @t{homepage}}@: (function).
@item
@ref{❨224❩, , @t{html-file-definition}}@: (class).
@item
@ref{❨476❩, , @t{if-feature}}@: (function).
@item
@ref{❨839❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨840❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨841❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨93❩, , @t{java-file-definition}}@: (class).
@item
@ref{❨96❩, , @t{license-name}}@: (function).
@item
@ref{❨272❩, , @t{lisp-file-definition}}@: (class).
@item
@ref{❨307❩, , @t{lisp-file-definition-p}}@: (function).
@item
@ref{❨165❩, , @t{location}}@: (reader method).
@item
@ref{❨167❩, , @t{(setf location)}}@: (writer method).
@item
@ref{❨70❩, , @t{long-description}}@: (function).
@item
@ref{❨121❩, , @t{long-name}}@: (function).
@item
@ref{❨49❩, , @t{mailto}}@: (function).
@item
@ref{❨102❩, , @t{maintainers}}@: (reader method).
@item
@ref{❨104❩, , @t{(setf maintainers)}}@: (writer method).
@item
@ref{❨158❩, , @t{module}}@: (reader method).
@item
@ref{❨98❩, , @t{module-definition}}@: (class).
@item
@ref{❨176❩, , @t{module-definition-p}}@: (function).
@item
@ref{❨258❩, , @t{name}}@: (method).
@item
@ref{❨153❩, , @t{parent}}@: (reader method).
@item
@ref{❨155❩, , @t{(setf parent)}}@: (writer method).
@item
@ref{❨116❩, , @t{source-control}}@: (function).
@item
@ref{❨110❩, , @t{source-file-definition}}@: (class).
@item
@ref{❨156❩, , @t{static-file-definition}}@: (class).
@item
@ref{❨440❩, , @t{system}}@: (reader method).
@item
@ref{❨146❩, , @t{system-definition}}@: (class).
@item
@ref{❨269❩, , @t{system-definition-p}}@: (function).
@item
@ref{❨84❩, , @t{system-file-definition}}@: (class).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨525❩, , @t{make-file-definition}}@: (function).
@item
@ref{❨575❩, , @t{make-module-definition}}@: (function).
@item
@ref{❨519❩, , @t{make-system-definition}}@: (function).
@item
@ref{❨539❩, , @t{make-system-file-definition}}@: (function).
@item
@ref{❨591❩, , @t{make-system-file-definitions}}@: (function).
@item
@ref{❨577❩, , @t{source-pathname}}@: (method).
@end itemize
@end table

@node The net․didierverna․declt․assess/src/finalize․lisp file, The net․didierverna․declt․assess/src/assess․lisp file, The net․didierverna․declt․assess/src/asdf․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/src/finalize.lisp}
@anchor{❨34❩}@c
@fileindex{finalize.lisp}@c
@table @strong
@item Dependency
@ref{❨33❩, , @t{asdf.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨9❩, , @t{src}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨517❩, , @t{*stabilized*}}@: (special variable).
@item
@ref{❨587❩, , @t{destabilize}}@: (macro).
@item
@ref{❨572❩, , @t{finalize}}@: (function).
@item
@ref{❨514❩, , @t{freeze}}@: (function).
@item
@ref{❨530❩, , @t{new-funcoid-definition}}@: (function).
@item
@ref{❨567❩, , @t{new-generic-definition}}@: (function).
@item
@ref{❨505❩, , @t{resolve-dependency-specification}}@: (function).
@item
@ref{❨545❩, , @t{stabilize}}@: (generic function).
@item
@ref{❨531❩, , @t{stabilize-clos-classoid-slot}}@: (function).
@item
@ref{❨494❩, , @t{stabilize-clos-structure-slot}}@: (function).
@end itemize
@end table

@node The net․didierverna․declt․assess/src/assess․lisp file, , The net․didierverna․declt․assess/src/finalize․lisp file, Lisp files
@subsection @t{net.didierverna.declt.assess/src/assess.lisp}
@anchor{❨35❩}@c
@fileindex{assess.lisp}@c
@table @strong
@item Dependency
@ref{❨34❩, , @t{finalize.lisp}}@: (file).
@item Source
@ref{❨13❩, , @t{net.didierverna.declt.assess.asd}}.
@item Parent Component
@ref{❨9❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨109❩, , @t{assess}}@: (function).
@item
@ref{❨254❩, , @t{conclusion}}@: (reader method).
@item
@ref{❨256❩, , @t{(setf conclusion)}}@: (writer method).
@item
@ref{❨67❩, , @t{contacts}}@: (reader method).
@item
@ref{❨69❩, , @t{(setf contacts)}}@: (writer method).
@item
@ref{❨316❩, , @t{copyright-years}}@: (reader method).
@item
@ref{❨318❩, , @t{(setf copyright-years)}}@: (writer method).
@item
@ref{❨350❩, , @t{definitions}}@: (reader method).
@item
@ref{❨354❩, , @t{(setf definitions)}}@: (writer method).
@item
@ref{❨137❩, , @t{introduction}}@: (reader method).
@item
@ref{❨139❩, , @t{(setf introduction)}}@: (writer method).
@item
@ref{❨408❩, , @t{library-name}}@: (reader method).
@item
@ref{❨410❩, , @t{(setf library-name)}}@: (writer method).
@item
@ref{❨369❩, , @t{library-version}}@: (reader method).
@item
@ref{❨371❩, , @t{(setf library-version)}}@: (writer method).
@item
@ref{❨373❩, , @t{license}}@: (reader method).
@item
@ref{❨375❩, , @t{(setf license)}}@: (writer method).
@item
@ref{❨845❩, , @t{print-object}}@: (method).
@item
@ref{❨275❩, , @t{report}}@: (class).
@item
@ref{❨455❩, , @t{tagline}}@: (reader method).
@item
@ref{❨457❩, , @t{(setf tagline)}}@: (writer method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨574❩, , @t{components}}@: (function).
@item
@ref{❨526❩, , @t{file-components}}@: (function).
@item
@ref{❨538❩, , @t{funcoid-name}}@: (function).
@item
@ref{❨510❩, , @t{load-system}}@: (function).
@item
@ref{❨490❩, , @t{make-all-file-definitions}}@: (function).
@item
@ref{❨588❩, , @t{make-all-module-definitions}}@: (function).
@item
@ref{❨544❩, , @t{make-all-package-definitions}}@: (function).
@item
@ref{❨520❩, , @t{make-all-symbol-definitions}}@: (function).
@item
@ref{❨529❩, , @t{make-all-system-definitions}}@: (function).
@item
@ref{❨513❩, , @t{make-report}}@: (function).
@item
@ref{❨573❩, , @t{make-symbol-definitions}}@: (function).
@item
@ref{❨503❩, , @t{module-components}}@: (function).
@item
@ref{❨504❩, , @t{package-symbols}}@: (function).
@item
@ref{❨542❩, , @t{sub-component-p}}@: (function).
@item
@ref{❨570❩, , @t{subsystem}}@: (function).
@item
@ref{❨522❩, , @t{subsystems}}@: (function).
@item
@ref{❨489❩, , @t{system-dependencies}}@: (function).
@end itemize
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The net․didierverna․declt․assess package::
* The net․didierverna․declt․setup package::
* The net․didierverna․declt package::
@end menu


@c ----------------------------------------
@c The net.didierverna.declt.assess package
@c ----------------------------------------
@node The net․didierverna․declt․assess package, The net․didierverna․declt․setup package, Packages, Packages
@section @t{net.didierverna.declt.assess}
@anchor{❨36❩}@c
@packageindex{net.didierverna.declt.assess}@c
The Declt assessment library's package.
@table @strong
@item Source
@ref{❨27❩, , @t{package.lisp}}.
@item Use List
@itemize @bullet
@item
@t{common-lisp}.
@item
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@end itemize
@item Used By List
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Public Interface
@itemize @bullet
@item
@ref{❨135❩, , @t{accessor-method-definition}}@: (class).
@item
@ref{❨229❩, , @t{accessor-mixin}}@: (class).
@item
@ref{❨215❩, , @t{alias-definition}}@: (class).
@item
@ref{❨79❩, , @t{allocation}}@: (function).
@item
@ref{❨109❩, , @t{assess}}@: (function).
@item
@ref{❨111❩, , @t{authors}}@: (generic reader).
@item
@ref{❨113❩, , @t{(setf authors)}}@: (generic writer).
@item
@ref{❨57❩, , @t{bug-tracker}}@: (function).
@item
@ref{❨287❩, , @t{c-file-definition}}@: (class).
@item
@ref{❨481❩, , @t{children}}@: (generic reader).
@item
@ref{❨483❩, , @t{(setf children)}}@: (generic writer).
@item
@ref{❨704❩, , @t{children}}@: (slot).
@item
@ref{❨411❩, , @t{cl-source-file.asd}}@: (class).
@item
@ref{❨417❩, , @t{class-definition}}@: (class).
@item
@ref{❨437❩, , @t{classoid}}@: (generic reader).
@item
@ref{❨337❩, , @t{classoid-definition}}@: (class).
@item
@ref{❨199❩, , @t{clients}}@: (generic reader).
@item
@ref{❨201❩, , @t{(setf clients)}}@: (generic writer).
@item
@ref{❨177❩, , @t{clos-classoid-mixin}}@: (class).
@item
@ref{❨128❩, , @t{clos-slot-definition}}@: (class).
@item
@ref{❨221❩, , @t{clos-structure-definition}}@: (class).
@item
@ref{❨72❩, , @t{combination}}@: (generic reader).
@item
@ref{❨75❩, , @t{(setf combination)}}@: (generic writer).
@item
@ref{❨203❩, , @t{combination-definition}}@: (class).
@item
@ref{❨314❩, , @t{combination-options}}@: (function).
@item
@ref{❨95❩, , @t{compiler-macro-alias-definition}}@: (class).
@item
@ref{❨390❩, , @t{compiler-macro-definition}}@: (class).
@item
@ref{❨427❩, , @t{component}}@: (generic reader).
@item
@ref{❨130❩, , @t{component-definition}}@: (class).
@item
@ref{❨71❩, , @t{component-definition-p}}@: (function).
@item
@ref{❨253❩, , @t{conclusion}}@: (generic reader).
@item
@ref{❨255❩, , @t{(setf conclusion)}}@: (generic writer).
@item
@ref{❨421❩, , @t{condition-definition}}@: (class).
@item
@ref{❨392❩, , @t{constant-definition}}@: (class).
@item
@ref{❨66❩, , @t{contacts}}@: (generic reader).
@item
@ref{❨68❩, , @t{(setf contacts)}}@: (generic writer).
@item
@ref{❨315❩, , @t{copyright-years}}@: (generic reader).
@item
@ref{❨317❩, , @t{(setf copyright-years)}}@: (generic writer).
@item
@ref{❨385❩, , @t{definition}}@: (class).
@item
@ref{❨485❩, , @t{definition-class}}@: (generic reader).
@item
@ref{❨434❩, , @t{definition-compiler-macro}}@: (generic reader).
@item
@ref{❨487❩, , @t{definition-condition}}@: (generic reader).
@item
@ref{❨289❩, , @t{definition-function}}@: (generic reader).
@item
@ref{❨50❩, , @t{definition-method}}@: (generic reader).
@item
@ref{❨187❩, , @t{definition-package}}@: (generic reader).
@item
@ref{❨312❩, , @t{definition-structure}}@: (generic reader).
@item
@ref{❨425❩, , @t{definition-symbol}}@: (generic reader).
@item
@ref{❨319❩, , @t{definition-version}}@: (function).
@item
@ref{❨349❩, , @t{definitions}}@: (generic reader).
@item
@ref{❨353❩, , @t{(setf definitions)}}@: (generic writer).
@item
@ref{❨299❩, , @t{defsystem-dependencies}}@: (generic reader).
@item
@ref{❨301❩, , @t{(setf defsystem-dependencies)}}@: (generic writer).
@item
@ref{❨324❩, , @t{dependencies}}@: (generic reader).
@item
@ref{❨326❩, , @t{(setf dependencies)}}@: (generic writer).
@item
@ref{❨115❩, , @t{description}}@: (function).
@item
@ref{❨430❩, , @t{direct-default-initargs}}@: (function).
@item
@ref{❨39❩, , @t{direct-methods}}@: (generic reader).
@item
@ref{❨41❩, , @t{(setf direct-methods)}}@: (generic writer).
@item
@ref{❨168❩, , @t{direct-slots}}@: (generic reader).
@item
@ref{❨170❩, , @t{(setf direct-slots)}}@: (generic writer).
@item
@ref{❨458❩, , @t{direct-subclasses}}@: (generic reader).
@item
@ref{❨460❩, , @t{(setf direct-subclasses)}}@: (generic writer).
@item
@ref{❨58❩, , @t{direct-subclassoids}}@: (generic reader).
@item
@ref{❨60❩, , @t{(setf direct-subclassoids)}}@: (generic writer).
@item
@ref{❨105❩, , @t{direct-subconditions}}@: (generic reader).
@item
@ref{❨107❩, , @t{(setf direct-subconditions)}}@: (generic writer).
@item
@ref{❨249❩, , @t{direct-substructures}}@: (generic reader).
@item
@ref{❨251❩, , @t{(setf direct-substructures)}}@: (generic writer).
@item
@ref{❨225❩, , @t{direct-superclasses}}@: (generic reader).
@item
@ref{❨227❩, , @t{(setf direct-superclasses)}}@: (generic writer).
@item
@ref{❨342❩, , @t{direct-superclassoids}}@: (generic reader).
@item
@ref{❨344❩, , @t{(setf direct-superclassoids)}}@: (generic writer).
@item
@ref{❨303❩, , @t{direct-superconditions}}@: (generic reader).
@item
@ref{❨305❩, , @t{(setf direct-superconditions)}}@: (generic writer).
@item
@ref{❨117❩, , @t{direct-superstructures}}@: (generic reader).
@item
@ref{❨119❩, , @t{(setf direct-superstructures)}}@: (generic writer).
@item
@ref{❨295❩, , @t{doc-file-definition}}@: (class).
@item
@ref{❨393❩, , @t{docstring}}@: (generic function).
@item
@ref{❨52❩, , @t{element-type}}@: (generic reader).
@item
@ref{❨54❩, , @t{(setf element-type)}}@: (generic writer).
@item
@ref{❨244❩, , @t{expander}}@: (generic reader).
@item
@ref{❨123❩, , @t{expander-definition}}@: (class).
@item
@ref{❨441❩, , @t{expander-for}}@: (generic reader).
@item
@ref{❨443❩, , @t{(setf expander-for)}}@: (generic writer).
@item
@ref{❨462❩, , @t{expanders-to}}@: (generic reader).
@item
@ref{❨464❩, , @t{(setf expanders-to)}}@: (generic writer).
@item
@ref{❨90❩, , @t{extension}}@: (function).
@item
@ref{❨414❩, , @t{file}}@: (generic reader).
@item
@ref{❨347❩, , @t{file-definition}}@: (class).
@item
@ref{❨206❩, , @t{file-definition-p}}@: (function).
@item
@ref{❨240❩, , @t{foreignp}}@: (generic reader).
@item
@ref{❨242❩, , @t{(setf foreignp)}}@: (generic writer).
@item
@ref{❨477❩, , @t{funcoid}}@: (generic reader).
@item
@ref{❨291❩, , @t{funcoid-definition}}@: (class).
@item
@ref{❨263❩, , @t{function-alias-definition}}@: (class).
@item
@ref{❨270❩, , @t{function-definition}}@: (class).
@item
@ref{❨328❩, , @t{generic}}@: (generic reader).
@item
@ref{❨274❩, , @t{generic-accessor-definition}}@: (class).
@item
@ref{❨45❩, , @t{generic-function-definition}}@: (class).
@item
@ref{❨56❩, , @t{generic-reader-definition}}@: (class).
@item
@ref{❨346❩, , @t{generic-writer-definition}}@: (class).
@item
@ref{❨195❩, , @t{home-package}}@: (generic reader).
@item
@ref{❨197❩, , @t{(setf home-package)}}@: (generic writer).
@item
@ref{❨91❩, , @t{homepage}}@: (function).
@item
@ref{❨224❩, , @t{html-file-definition}}@: (class).
@item
@ref{❨453❩, , @t{identity-with-one-argument}}@: (function).
@item
@ref{❨476❩, , @t{if-feature}}@: (function).
@item
@ref{❨264❩, , @t{initargs}}@: (function).
@item
@ref{❨207❩, , @t{initform}}@: (function).
@item
@ref{❨136❩, , @t{introduction}}@: (generic reader).
@item
@ref{❨138❩, , @t{(setf introduction)}}@: (generic writer).
@item
@ref{❨93❩, , @t{java-file-definition}}@: (class).
@item
@ref{❨466❩, , @t{lambda-list}}@: (generic function).
@item
@ref{❨407❩, , @t{library-name}}@: (generic reader).
@item
@ref{❨409❩, , @t{(setf library-name)}}@: (generic writer).
@item
@ref{❨368❩, , @t{library-version}}@: (generic reader).
@item
@ref{❨370❩, , @t{(setf library-version)}}@: (generic writer).
@item
@ref{❨372❩, , @t{license}}@: (generic reader).
@item
@ref{❨374❩, , @t{(setf license)}}@: (generic writer).
@item
@ref{❨96❩, , @t{license-name}}@: (function).
@item
@ref{❨272❩, , @t{lisp-file-definition}}@: (class).
@item
@ref{❨307❩, , @t{lisp-file-definition-p}}@: (function).
@item
@ref{❨164❩, , @t{location}}@: (generic reader).
@item
@ref{❨166❩, , @t{(setf location)}}@: (generic writer).
@item
@ref{❨429❩, , @t{long-combination-definition}}@: (class).
@item
@ref{❨70❩, , @t{long-description}}@: (function).
@item
@ref{❨43❩, , @t{long-expander-definition}}@: (class).
@item
@ref{❨121❩, , @t{long-name}}@: (function).
@item
@ref{❨340❩, , @t{macro}}@: (generic reader).
@item
@ref{❨416❩, , @t{macro-alias-definition}}@: (class).
@item
@ref{❨266❩, , @t{macro-definition}}@: (class).
@item
@ref{❨49❩, , @t{mailto}}@: (function).
@item
@ref{❨101❩, , @t{maintainers}}@: (generic reader).
@item
@ref{❨103❩, , @t{(setf maintainers)}}@: (generic writer).
@item
@ref{❨85❩, , @t{method-definition}}@: (class).
@item
@ref{❨92❩, , @t{method-definition-p}}@: (function).
@item
@ref{❨80❩, , @t{methods}}@: (generic reader).
@item
@ref{❨82❩, , @t{(setf methods)}}@: (generic writer).
@item
@ref{❨157❩, , @t{module}}@: (generic reader).
@item
@ref{❨98❩, , @t{module-definition}}@: (class).
@item
@ref{❨176❩, , @t{module-definition-p}}@: (function).
@item
@ref{❨257❩, , @t{name}}@: (generic function).
@item
@ref{❨697❩, , @t{name}}@: (slot).
@item
@ref{❨288❩, , @t{nicknames}}@: (function).
@item
@ref{❨320❩, , @t{object}}@: (generic reader).
@item
@ref{❨265❩, , @t{ordinary-accessor-definition}}@: (class).
@item
@ref{❨436❩, , @t{ordinary-function-definition}}@: (class).
@item
@ref{❨186❩, , @t{ordinary-reader-definition}}@: (class).
@item
@ref{❨193❩, , @t{ordinary-writer-definition}}@: (class).
@item
@ref{❨376❩, , @t{owner}}@: (generic reader).
@item
@ref{❨379❩, , @t{(setf owner)}}@: (generic writer).
@item
@ref{❨208❩, , @t{package-definition}}@: (class).
@item
@ref{❨413❩, , @t{package-definition-p}}@: (function).
@item
@ref{❨152❩, , @t{parent}}@: (generic reader).
@item
@ref{❨154❩, , @t{(setf parent)}}@: (generic writer).
@item
@ref{❨382❩, , @t{private-definitions}}@: (generic function).
@item
@ref{❨296❩, , @t{public-definitions}}@: (generic function).
@item
@ref{❨294❩, , @t{publicp}}@: (function).
@item
@ref{❨475❩, , @t{qualifiers}}@: (function).
@item
@ref{❨97❩, , @t{reader-method-definition}}@: (class).
@item
@ref{❨89❩, , @t{reader-method-definition-p}}@: (function).
@item
@ref{❨233❩, , @t{readers}}@: (generic reader).
@item
@ref{❨235❩, , @t{(setf readers)}}@: (generic writer).
@item
@ref{❨330❩, , @t{referee}}@: (generic reader).
@item
@ref{❨332❩, , @t{(setf referee)}}@: (generic writer).
@item
@ref{❨275❩, , @t{report}}@: (class).
@item
@ref{❨237❩, , @t{setfable-funcoid-definition}}@: (class).
@item
@ref{❨365❩, , @t{setfp}}@: (generic reader).
@item
@ref{❨231❩, , @t{short-combination-definition}}@: (class).
@item
@ref{❨479❩, , @t{short-expander-definition}}@: (class).
@item
@ref{❨122❩, , @t{short-expander-definition-p}}@: (function).
@item
@ref{❨77❩, , @t{slot}}@: (generic reader).
@item
@ref{❨159❩, , @t{slot-definition}}@: (class).
@item
@ref{❨116❩, , @t{source-control}}@: (function).
@item
@ref{❨449❩, , @t{source-file}}@: (generic reader).
@item
@ref{❨451❩, , @t{(setf source-file)}}@: (generic writer).
@item
@ref{❨110❩, , @t{source-file-definition}}@: (class).
@item
@ref{❨94❩, , @t{special-definition}}@: (class).
@item
@ref{❨181❩, , @t{specializers}}@: (generic reader).
@item
@ref{❨183❩, , @t{(setf specializers)}}@: (generic writer).
@item
@ref{❨189❩, , @t{standalone-combinator}}@: (generic reader).
@item
@ref{❨191❩, , @t{(setf standalone-combinator)}}@: (generic writer).
@item
@ref{❨357❩, , @t{standalone-reader}}@: (generic reader).
@item
@ref{❨359❩, , @t{(setf standalone-reader)}}@: (generic writer).
@item
@ref{❨62❩, , @t{standalone-writer}}@: (generic reader).
@item
@ref{❨64❩, , @t{(setf standalone-writer)}}@: (generic writer).
@item
@ref{❨156❩, , @t{static-file-definition}}@: (class).
@item
@ref{❨285❩, , @t{structure-definition}}@: (class).
@item
@ref{❨140❩, , @t{structure-type}}@: (generic reader).
@item
@ref{❨142❩, , @t{(setf structure-type)}}@: (generic writer).
@item
@ref{❨218❩, , @t{symbol-definition}}@: (class).
@item
@ref{❨144❩, , @t{symbol-definition-p}}@: (function).
@item
@ref{❨145❩, , @t{symbol-macro-definition}}@: (class).
@item
@ref{❨439❩, , @t{system}}@: (generic reader).
@item
@ref{❨146❩, , @t{system-definition}}@: (class).
@item
@ref{❨269❩, , @t{system-definition-p}}@: (function).
@item
@ref{❨84❩, , @t{system-file-definition}}@: (class).
@item
@ref{❨454❩, , @t{tagline}}@: (generic reader).
@item
@ref{❨456❩, , @t{(setf tagline)}}@: (generic writer).
@item
@ref{❨247❩, , @t{target-slot}}@: (generic reader).
@item
@ref{❨322❩, , @t{type-definition}}@: (class).
@item
@ref{❨431❩, , @t{typed-structure-definition}}@: (class).
@item
@ref{❨127❩, , @t{typed-structure-slot-definition}}@: (class).
@item
@ref{❨172❩, , @t{uid}}@: (generic reader).
@item
@ref{❨174❩, , @t{(setf uid)}}@: (generic writer).
@item
@ref{❨361❩, , @t{use-list}}@: (generic reader).
@item
@ref{❨363❩, , @t{(setf use-list)}}@: (generic writer).
@item
@ref{❨308❩, , @t{used-by-list}}@: (generic reader).
@item
@ref{❨310❩, , @t{(setf used-by-list)}}@: (generic writer).
@item
@ref{❨334❩, , @t{value-type}}@: (generic function).
@item
@ref{❨129❩, , @t{variable-definition}}@: (class).
@item
@ref{❨44❩, , @t{varoid-definition}}@: (class).
@item
@ref{❨268❩, , @t{writer-method-definition}}@: (class).
@item
@ref{❨185❩, , @t{writer-method-definition-p}}@: (function).
@item
@ref{❨445❩, , @t{writers}}@: (generic reader).
@item
@ref{❨447❩, , @t{(setf writers)}}@: (generic writer).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨508❩, , @t{*licenses*}}@: (special variable).
@item
@ref{❨517❩, , @t{*stabilized*}}@: (special variable).
@item
@ref{❨574❩, , @t{components}}@: (function).
@item
@ref{❨571❩, , @t{definition-source-by-name}}@: (function).
@item
@ref{❨587❩, , @t{destabilize}}@: (macro).
@item
@ref{❨524❩, , @t{domesticp}}@: (function).
@item
@ref{❨495❩, , @t{external-symbols}}@: (generic reader).
@item
@ref{❨497❩, , @t{(setf external-symbols)}}@: (generic writer).
@item
@ref{❨526❩, , @t{file-components}}@: (function).
@item
@ref{❨572❩, , @t{finalize}}@: (function).
@item
@ref{❨515❩, , @t{find-definition}}@: (function).
@item
@ref{❨514❩, , @t{freeze}}@: (function).
@item
@ref{❨538❩, , @t{funcoid-name}}@: (function).
@item
@ref{❨534❩, , @t{internal-symbols}}@: (generic reader).
@item
@ref{❨536❩, , @t{(setf internal-symbols)}}@: (generic writer).
@item
@ref{❨510❩, , @t{load-system}}@: (function).
@item
@ref{❨490❩, , @t{make-all-file-definitions}}@: (function).
@item
@ref{❨588❩, , @t{make-all-module-definitions}}@: (function).
@item
@ref{❨544❩, , @t{make-all-package-definitions}}@: (function).
@item
@ref{❨520❩, , @t{make-all-symbol-definitions}}@: (function).
@item
@ref{❨529❩, , @t{make-all-system-definitions}}@: (function).
@item
@ref{❨521❩, , @t{make-classoid-definition}}@: (function).
@item
@ref{❨507❩, , @t{make-clos-slot-definition}}@: (function).
@item
@ref{❨590❩, , @t{make-combination-definition}}@: (function).
@item
@ref{❨528❩, , @t{make-compiler-macro-alias-definition}}@: (function).
@item
@ref{❨541❩, , @t{make-compiler-macro-definition}}@: (function).
@item
@ref{❨502❩, , @t{make-constant-definition}}@: (function).
@item
@ref{❨540❩, , @t{make-expander-definition}}@: (function).
@item
@ref{❨525❩, , @t{make-file-definition}}@: (function).
@item
@ref{❨568❩, , @t{make-function-alias-definition}}@: (function).
@item
@ref{❨491❩, , @t{make-generic-function-definition}}@: (function).
@item
@ref{❨532❩, , @t{make-macro-alias-definition}}@: (function).
@item
@ref{❨516❩, , @t{make-macro-definition}}@: (function).
@item
@ref{❨592❩, , @t{make-method-definition}}@: (function).
@item
@ref{❨575❩, , @t{make-module-definition}}@: (function).
@item
@ref{❨499❩, , @t{make-ordinary-function-definition}}@: (function).
@item
@ref{❨518❩, , @t{make-package-definition}}@: (function).
@item
@ref{❨513❩, , @t{make-report}}@: (function).
@item
@ref{❨523❩, , @t{make-special-definition}}@: (function).
@item
@ref{❨573❩, , @t{make-symbol-definitions}}@: (function).
@item
@ref{❨589❩, , @t{make-symbol-macro-definition}}@: (function).
@item
@ref{❨519❩, , @t{make-system-definition}}@: (function).
@item
@ref{❨539❩, , @t{make-system-file-definition}}@: (function).
@item
@ref{❨591❩, , @t{make-system-file-definitions}}@: (function).
@item
@ref{❨500❩, , @t{make-type-definition}}@: (function).
@item
@ref{❨493❩, , @t{make-typed-structure-slot-definition}}@: (function).
@item
@ref{❨543❩, , @t{method-name}}@: (function).
@item
@ref{❨503❩, , @t{module-components}}@: (function).
@item
@ref{❨530❩, , @t{new-funcoid-definition}}@: (function).
@item
@ref{❨567❩, , @t{new-generic-definition}}@: (function).
@item
@ref{❨566❩, , @t{one-liner-p}}@: (function).
@item
@ref{❨527❩, , @t{package-external-symbols}}@: (function).
@item
@ref{❨511❩, , @t{package-internal-symbols}}@: (function).
@item
@ref{❨504❩, , @t{package-symbols}}@: (function).
@item
@ref{❨569❩, , @t{parse-contact(s)}}@: (function).
@item
@ref{❨501❩, , @t{parse-contact-string}}@: (function).
@item
@ref{❨509❩, , @t{reorder-dependency-def}}@: (function).
@item
@ref{❨533❩, , @t{reordered-dependency-def-system}}@: (function).
@item
@ref{❨505❩, , @t{resolve-dependency-specification}}@: (function).
@item
@ref{❨492❩, , @t{source-by-name}}@: (function).
@item
@ref{❨512❩, , @t{source-by-object}}@: (function).
@item
@ref{❨576❩, , @t{source-pathname}}@: (generic function).
@item
@ref{❨545❩, , @t{stabilize}}@: (generic function).
@item
@ref{❨531❩, , @t{stabilize-clos-classoid-slot}}@: (function).
@item
@ref{❨494❩, , @t{stabilize-clos-structure-slot}}@: (function).
@item
@ref{❨542❩, , @t{sub-component-p}}@: (function).
@item
@ref{❨570❩, , @t{subsystem}}@: (function).
@item
@ref{❨522❩, , @t{subsystems}}@: (function).
@item
@ref{❨489❩, , @t{system-dependencies}}@: (function).
@item
@ref{❨506❩, , @t{validate-email}}@: (function).
@end itemize
@end table


@c ---------------------------------------
@c The net.didierverna.declt.setup package
@c ---------------------------------------
@node The net․didierverna․declt․setup package, The net․didierverna․declt package, The net․didierverna․declt․assess package, Packages
@section @t{net.didierverna.declt.setup}
@anchor{❨37❩}@c
@packageindex{net.didierverna.declt.setup}@c
The Declt setup library's package.
@table @strong
@item Source
@ref{❨14❩, , @t{package.lisp}}.
@item Use List
@t{common-lisp}.
@item Used By List
@itemize @bullet
@item
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@end itemize
@item Public Interface
@itemize @bullet
@item
@ref{❨594❩, , @t{*copyright-years*}}@: (special variable).
@item
@ref{❨611❩, , @t{*release-major-level*}}@: (special variable).
@item
@ref{❨603❩, , @t{*release-minor-level*}}@: (special variable).
@item
@ref{❨605❩, , @t{*release-name*}}@: (special variable).
@item
@ref{❨598❩, , @t{*release-status*}}@: (special variable).
@item
@ref{❨597❩, , @t{*release-status-level*}}@: (special variable).
@item
@ref{❨600❩, , @t{abstract-class}}@: (class).
@item
@ref{❨593❩, , @t{configuration}}@: (function).
@item
@ref{❨604❩, , @t{configure}}@: (function).
@item
@ref{❨610❩, , @t{declare-valid-superclass}}@: (macro).
@item
@ref{❨595❩, , @t{defabstract}}@: (macro).
@item
@ref{❨607❩, , @t{endpush}}@: (macro).
@item
@ref{❨606❩, , @t{find*}}@: (function).
@item
@ref{❨612❩, , @t{mapcat}}@: (function).
@item
@ref{❨601❩, , @t{non-empty-string}}@: (type).
@item
@ref{❨608❩, , @t{non-empty-string-p}}@: (function).
@item
@ref{❨599❩, , @t{retain}}@: (function).
@item
@ref{❨602❩, , @t{version}}@: (function).
@item
@ref{❨613❩, , @t{when-let}}@: (macro).
@item
@ref{❨596❩, , @t{when-let*}}@: (macro).
@item
@ref{❨609❩, , @t{while}}@: (macro).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨615❩, , @t{%version}}@: (function).
@item
@ref{❨616❩, , @t{*configuration*}}@: (special variable).
@item
@ref{❨618❩, , @t{clindent}}@: (function).
@item
@ref{❨614❩, , @t{defindent}}@: (macro).
@item
@ref{❨619❩, , @t{i-reader}}@: (function).
@item
@ref{❨617❩, , @t{release-status-number}}@: (function).
@end itemize
@end table


@c ---------------------------------
@c The net.didierverna.declt package
@c ---------------------------------
@node The net․didierverna․declt package, , The net․didierverna․declt․setup package, Packages
@section @t{net.didierverna.declt}
@anchor{❨38❩}@c
@packageindex{net.didierverna.declt}@c
The Declt library's package.
@table @strong
@item Source
@ref{❨19❩, , @t{package.lisp}}.
@item Nickname
@t{declt}
@item Use List
@itemize @bullet
@item
@t{common-lisp}.
@item
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@end itemize
@item Public Interface
@itemize @bullet
@item
@ref{❨620❩, , @t{declt}}@: (function).
@item
@ref{❨621❩, , @t{nickname-package}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨642❩, , @t{%deffn}}@: (function).
@item
@ref{❨767❩, , @t{*blanks*}}@: (special variable).
@item
@ref{❨674❩, , @t{*categories*}}@: (special variable).
@item
@ref{❨638❩, , @t{*fragile-characters*}}@: (special variable).
@item
@ref{❨746❩, , @t{*section-names*}}@: (special variable).
@item
@ref{❨720❩, , @t{*special-characters*}}@: (special variable).
@item
@ref{❨712❩, , @t{@atchar{}anchor}}@: (function).
@item
@ref{❨673❩, , @t{@atchar{}deffn}}@: (function).
@item
@ref{❨639❩, , @t{@atchar{}deffnx}}@: (function).
@item
@ref{❨830❩, , @t{@atchar{}deftp}}@: (function).
@item
@ref{❨688❩, , @t{@atchar{}defvr}}@: (function).
@item
@ref{❨759❩, , @t{@atchar{}end}}@: (function).
@item
@ref{❨714❩, , @t{@atchar{}item}}@: (function).
@item
@ref{❨692❩, , @t{@atchar{}itemize}}@: (function).
@item
@ref{❨689❩, , @t{@atchar{}multitable}}@: (function).
@item
@ref{❨717❩, , @t{@atchar{}ref}}@: (function).
@item
@ref{❨827❩, , @t{@atchar{}table}}@: (function).
@item
@ref{❨832❩, , @t{add-categories-node}}@: (function).
@item
@ref{❨676❩, , @t{add-category-node}}@: (function).
@item
@ref{❨762❩, , @t{add-child}}@: (function).
@item
@ref{❨632❩, , @t{add-definitions-node}}@: (function).
@item
@ref{❨635❩, , @t{add-files-node}}@: (function).
@item
@ref{❨718❩, , @t{add-modules-node}}@: (function).
@item
@ref{❨675❩, , @t{add-packages-node}}@: (function).
@item
@ref{❨641❩, , @t{add-systems-node}}@: (function).
@item
@ref{❨833❩, , @t{anchor}}@: (function).
@item
@ref{❨695❩, , @t{anchor-and-index}}@: (function).
@item
@ref{❨772❩, , @t{anchor-name}}@: (function).
@item
@ref{❨646❩, , @t{category-name}}@: (generic function).
@item
@ref{❨679❩, , @t{context}}@: (class).
@item
@ref{❨754❩, , @t{copy-node}}@: (function).
@item
@ref{❨631❩, , @t{current-time-string}}@: (function).
@item
@ref{❨766❩, , @t{declt-1}}@: (function).
@item
@ref{❨749❩, , @t{declt-notice}}@: (generic reader).
@item
@ref{❨633❩, , @t{default-values}}@: (generic reader).
@item
@ref{❨783❩, , @t{deffn}}@: (macro).
@item
@ref{❨719❩, , @t{deftp}}@: (macro).
@item
@ref{❨636❩, , @t{defvr}}@: (macro).
@item
@ref{❨786❩, , @t{document}}@: (generic function).
@item
@ref{❨826❩, , @t{document}}@: (method combination).
@item
@ref{❨629❩, , @t{escape}}@: (function).
@item
@ref{❨693❩, , @t{escape-anchor}}@: (function).
@item
@ref{❨643❩, , @t{escape-label}}@: (function).
@item
@ref{❨630❩, , @t{escape-lambda-list}}@: (function).
@item
@ref{❨644❩, , @t{file-node}}@: (function).
@item
@ref{❨771❩, , @t{first-word-length}}@: (function).
@item
@ref{❨677❩, , @t{foreign-definitions}}@: (generic reader).
@item
@ref{❨686❩, , @t{index}}@: (function).
@item
@ref{❨723❩, , @t{index-command-name}}@: (generic function).
@item
@ref{❨763❩, , @t{item}}@: (macro).
@item
@ref{❨829❩, , @t{itemize}}@: (macro).
@item
@ref{❨760❩, , @t{itemize-list}}@: (function).
@item
@ref{❨784❩, , @t{locations}}@: (generic reader).
@item
@ref{❨751❩, , @t{long-title}}@: (function).
@item
@ref{❨747❩, , @t{make-context}}@: (function).
@item
@ref{❨745❩, , @t{make-node}}@: (function).
@item
@ref{❨627❩, , @t{merge-expander-p}}@: (function).
@item
@ref{❨764❩, , @t{merge-generic-writer}}@: (function).
@item
@ref{❨628❩, , @t{merge-methods}}@: (function).
@item
@ref{❨710❩, , @t{merge-ordinary-writer}}@: (function).
@item
@ref{❨637❩, , @t{multitable}}@: (macro).
@item
@ref{❨696❩, , @t{node}}@: (structure).
@item
@ref{❨623❩, , @t{node-after-menu-contents}}@: (reader).
@item
@ref{❨624❩, , @t{(setf node-after-menu-contents)}}@: (writer).
@item
@ref{❨757❩, , @t{node-before-menu-contents}}@: (reader).
@item
@ref{❨758❩, , @t{(setf node-before-menu-contents)}}@: (writer).
@item
@ref{❨774❩, , @t{node-children}}@: (reader).
@item
@ref{❨775❩, , @t{(setf node-children)}}@: (writer).
@item
@ref{❨755❩, , @t{node-name}}@: (reader).
@item
@ref{❨756❩, , @t{(setf node-name)}}@: (writer).
@item
@ref{❨752❩, , @t{node-next}}@: (reader).
@item
@ref{❨753❩, , @t{(setf node-next)}}@: (writer).
@item
@ref{❨709❩, , @t{node-p}}@: (function).
@item
@ref{❨625❩, , @t{node-previous}}@: (reader).
@item
@ref{❨626❩, , @t{(setf node-previous)}}@: (writer).
@item
@ref{❨707❩, , @t{node-section-name}}@: (reader).
@item
@ref{❨708❩, , @t{(setf node-section-name)}}@: (writer).
@item
@ref{❨721❩, , @t{node-section-type}}@: (reader).
@item
@ref{❨722❩, , @t{(setf node-section-type)}}@: (writer).
@item
@ref{❨684❩, , @t{node-synopsis}}@: (reader).
@item
@ref{❨685❩, , @t{(setf node-synopsis)}}@: (writer).
@item
@ref{❨768❩, , @t{node-up}}@: (reader).
@item
@ref{❨769❩, , @t{(setf node-up)}}@: (writer).
@item
@ref{❨773❩, , @t{read-next-line}}@: (function).
@item
@ref{❨748❩, , @t{reference}}@: (function).
@item
@ref{❨765❩, , @t{render-definition-core}}@: (function).
@item
@ref{❨690❩, , @t{render-dependencies}}@: (function).
@item
@ref{❨687❩, , @t{render-dependency}}@: (function).
@item
@ref{❨744❩, , @t{render-docstring}}@: (function).
@item
@ref{❨828❩, , @t{render-header}}@: (function).
@item
@ref{❨716❩, , @t{render-headline}}@: (function).
@item
@ref{❨694❩, , @t{render-node}}@: (function).
@item
@ref{❨622❩, , @t{render-package-reference}}@: (function).
@item
@ref{❨715❩, , @t{render-references}}@: (function).
@item
@ref{❨711❩, , @t{render-text}}@: (function).
@item
@ref{❨640❩, , @t{render-to-string}}@: (macro).
@item
@ref{❨831❩, , @t{render-top-node}}@: (function).
@item
@ref{❨761❩, , @t{reveal}}@: (function).
@item
@ref{❨770❩, , @t{safe-lambda-list}}@: (function).
@item
@ref{❨776❩, , @t{safe-name}}@: (generic function).
@item
@ref{❨645❩, , @t{safe-specializers}}@: (function).
@item
@ref{❨713❩, , @t{select-keys}}@: (function).
@item
@ref{❨691❩, , @t{table}}@: (macro).
@end itemize
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Public Interface::
* Internals::
@end menu


@c ----------------
@c Public Interface
@c ----------------
@node Public Interface, Internals, Definitions, Definitions
@section Public Interface
@menu
* Public special variables::
* Public macros::
* Public ordinary functions::
* Public generic functions::
* Public standalone methods::
* Public classes::
* Public types::
@end menu

@node Public special variables, Public macros, Public Interface, Public Interface
@subsection Special variables
@defvr {Special Variable} {*copyright-years*}
@anchor{❨594❩}@c
@specialsubindex{*copyright-years*}@c
A string denoting the copyright years for the whole project.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-major-level*}
@anchor{❨611❩}@c
@specialsubindex{*release-major-level*}@c
The major level of this release.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-minor-level*}
@anchor{❨603❩}@c
@specialsubindex{*release-minor-level*}@c
The minor level of this release.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-name*}
@anchor{❨605❩}@c
@specialsubindex{*release-name*}@c
The name of this release.@*
The general naming theme for Declt is "Star Trek characters".
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-status*}
@anchor{❨598❩}@c
@specialsubindex{*release-status*}@c
The status of this release.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-status-level*}
@anchor{❨597❩}@c
@specialsubindex{*release-status-level*}@c
The status level of this release.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr

@node Public macros, Public ordinary functions, Public special variables, Public Interface
@subsection Macros
@deffn {Macro} {declare-valid-superclass} (class superclass)
@anchor{❨610❩}@c
@macrosubindex{declare-valid-superclass}@c
Validate SUPERCLASS classes for CLASS classes.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {defabstract} (class super-classes slots &rest options)
@anchor{❨595❩}@c
@macrosubindex{defabstract}@c
Like DEFCLASS@comma{} but define an abstract class.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {endpush} (object place)
@anchor{❨607❩}@c
@macrosubindex{endpush}@c
Push OBJECT at the end of PLACE.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {when-let} (bindings &body body)
@anchor{❨613❩}@c
@macrosubindex{when-let}@c
Execute BODY only when all BINDINGS are non-nil.@*
BINDINGS must be either a single binding of the form (VARIABLE VALUE)@comma{}
or a list of such. VALUEs are computed sequentially in the specified order@comma{}
and then VARIABLEs are bound to the corresponding VALUEs. If all VALUEs are
non-nil@comma{} BODY is executed.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {when-let*} (bindings &body body)
@anchor{❨596❩}@c
@macrosubindex{when-let*}@c
Execute BODY only when all BINDINGS are non-nil.@*
BINDINGS must be either a single binding of the form (VARIABLE VALUE)@comma{}@*
or a list of such. VARIABLEs are bound to their respective VALUE sequentially@comma{}
so that each VALUE expression may refer to a previously bound VARIABLE.
Execution stops completely as soon as a null VALUE is encountered. Otherwise@comma{}
BODY is executed as an implicit PROGN.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {while} (test &body body)
@anchor{❨609❩}@c
@macrosubindex{while}@c
Execute BODY while TEST.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn

@node Public ordinary functions, Public generic functions, Public macros, Public Interface
@subsection Ordinary functions
@deffn {Function} {allocation} (definition)
@anchor{❨79❩}@c
@functionsubindex{allocation}@c
Return CLOS slot DEFINITION's allocation type.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {assess} (system-name &key introspection-level library-name tagline library-version contact copyright-years license introduction conclusion)
@anchor{❨109❩}@c
@functionsubindex{assess}@c
Extract and return documentation information for ASDF SYSTEM-NAME.@*
The documentation information is returned in a REPORT structure@comma{} which see.

SYSTEM-NAME is an ASDF system designator. The following keyword parameters
allow to specify or override some bits of information.@*
- INTROSPECTION-LEVEL: how hard to introspect the Lisp environment. At level 1
  (the default)@comma{} scan only the symbols from domestic packages. At level 2@comma{}
  scan all accessible symbols in the Lisp environment. Some additional
  information may be discovered in the process@comma{} at the expense of a much
  higher computation time.@*
- LIBRARY-NAME: name of the library being documented. Defaults to the system
  name.@*
- TAGLINE: small text to be used as the manual's subtitle@comma{} or NIL.
  Defaults to the system long name or description.@*
- LIBRARY-VERSION: version information@comma{} or NIL.@*
  Defaults to the system version.@*
- CONTACT: contact information@comma{} or NIL. The default value is computed from the
  system maintainer(s)@comma{} author(s)@comma{} and mailto information. Accepts a contact
  string@comma{} or a list of such. See `parse-contact-string' for more information.
- COPYRIGHT-YEARS: copyright years information or NIL. Defaults to the current
  year.@*
- LICENSE: license information. Defaults to NIL. Also accepts :mit@comma{} :boost@comma{}
  :bsd@comma{} :gpl@comma{} :lgpl@comma{} and :ms-pl.@*
- INTRODUCTION: introduction chapter contents in Texinfo format.@*
  Defaults to NIL.@*
- CONCLUSION: conclusion chapter contents in Texinfo format.@*
  Defaults to NIL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {bug-tracker} (definition)
@anchor{❨57❩}@c
@functionsubindex{bug-tracker}@c
Return system DEFINITION's bug tracker@comma{} or NIL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {combination-options} (definition)
@anchor{❨314❩}@c
@functionsubindex{combination-options}@c
Return generic function DEFINITION's method combination options.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {component-definition-p} (definition)
@anchor{❨71❩}@c
@functionsubindex{component-definition-p}@c
Return T if DEFINITION is a component definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {configuration} (key)
@anchor{❨593❩}@c
@functionsubindex{configuration}@c
Return KEY's value in the current Declt configuration.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end deffn
@deffn {Function} {configure} (key value)
@anchor{❨604❩}@c
@functionsubindex{configure}@c
Set KEY to VALUE in the current Declt configuration.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end deffn
@deffn {Function} {declt} (system-name &rest keys &key introspection-level library-name tagline library-version contact copyright-years license introduction conclusion locations default-values foreign-definitions declt-notice output-directory file-name info-name info-category)
@anchor{❨620❩}@c
@functionsubindex{declt}@c
Generate a reference manual for ASDF SYSTEM-NAME.@*
The reference manual is currently generated in Texinfo format.@*

For a description of SYSTEM-NAME@comma{} INTROSPECTION-LEVEL@comma{} LIBRARY-NAME@comma{} TAGLINE@comma{}
LIBRARY-VERSION@comma{} CONTACT@comma{} COPYRIGHT-YEARS@comma{} LICENSE@comma{} INTRODUCTION@comma{} and
CONCLUSION@comma{} see `assess'.@*

For a description of LOCATIONS@comma{} DEFAULT-VALUES@comma{} FOREIGN-DEFINITIONS@comma{} and
DECLT-NOTICE@comma{} see `make-context'.@*

The following keyword parameters are also available.@*
- OUTPUT-DIRECTORY: output directory for the generated reference manual.
  Defaults to the current directory.@*
- FILE-NAME: base name for the generated reference manual@comma{} sans extension.
  Defaults to the system name.@*
- INFO-NAME: base name for the subsequent Info file@comma{} sans extension (this
  name appears in the Texinfo file). Defaults to FILE-NAME.@*
- INFO-CATEGORY: category under which to install the Info file (technically@comma{}
  this provides the value for Texinfo's @atchar{}dircategory command).@*
  Defaults to "Common Lisp".
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨26❩, , @t{declt.lisp}}.
@end table
@end deffn
@deffn {Function} {definition-version} (definition)
@anchor{❨319❩}@c
@functionsubindex{definition-version}@c
Return component DEFINITION's version string.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {description} (definition)
@anchor{❨115❩}@c
@functionsubindex{description}@c
Return component DEFINITION's description.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {direct-default-initargs} (definition)
@anchor{❨430❩}@c
@functionsubindex{direct-default-initargs}@c
Return CLOS classoid mixin DEFINITION's direct default initargs.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {extension} (definition)
@anchor{❨90❩}@c
@functionsubindex{extension}@c
Return file DEFINITION's file extension@comma{} if any.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {file-definition-p} (definition)
@anchor{❨206❩}@c
@functionsubindex{file-definition-p}@c
Return T if DEFINITION is a file definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {find*} (object list &key test key pre-test)
@anchor{❨606❩}@c
@functionsubindex{find*}@c
Return the first finding of OBJECT in LIST@comma{} or NIL.@*
Each item in LIST is TESTed with EQ by default. TEST is performed on the item
itself by default@comma{} or on the result of applying KEY to it. Optionally@comma{} only
items satisfying PRE-TEST are considered.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {homepage} (definition)
@anchor{❨91❩}@c
@functionsubindex{homepage}@c
Return system DEFINITION's homepage@comma{} or NIL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {identity-with-one-argument} (definition)
@anchor{❨453❩}@c
@functionsubindex{identity-with-one-argument}@c
Return short combination DEFINITION's :identity-with-one-argument option.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {if-feature} (definition)
@anchor{❨476❩}@c
@functionsubindex{if-feature}@c
Return component DEFINITION's if-feature.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {initargs} (definition)
@anchor{❨264❩}@c
@functionsubindex{initargs}@c
Return CLOS slot DEFINITION's initargs.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {initform} (definition)
@anchor{❨207❩}@c
@functionsubindex{initform}@c
Return CLOS slot DEFINITION's initform.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {license-name} (definition)
@anchor{❨96❩}@c
@functionsubindex{license-name}@c
Return system DEFINITION's license name@comma{} or NIL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {lisp-file-definition-p} (definition)
@anchor{❨307❩}@c
@functionsubindex{lisp-file-definition-p}@c
Return T if DEFINITION is a Lisp file definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {long-description} (definition)
@anchor{❨70❩}@c
@functionsubindex{long-description}@c
Return component DEFINITION's long description.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {long-name} (definition)
@anchor{❨121❩}@c
@functionsubindex{long-name}@c
Return system DEFINITION's long name@comma{} or NIL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {mailto} (definition)
@anchor{❨49❩}@c
@functionsubindex{mailto}@c
Return system DEFINITION's mailto@comma{} or NIL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {mapcat} (function &rest lists)
@anchor{❨612❩}@c
@functionsubindex{mapcat}@c
Short for "mapconcat": non destructive version of MAPCAN.
That is@comma{} concatenate the results with APPEND rather than NCONC.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {method-definition-p} (definition)
@anchor{❨92❩}@c
@functionsubindex{method-definition-p}@c
Return T if DEFINITION is a method definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {module-definition-p} (definition)
@anchor{❨176❩}@c
@functionsubindex{module-definition-p}@c
Return T if DEFINITION is a module definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {nickname-package} (&optional nickname)
@anchor{❨621❩}@c
@functionsubindex{nickname-package}@c
Add NICKNAME (:DECLT by default) to the :NET.DIDIERVERNA.DECLT package.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨19❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {nicknames} (package-definition)
@anchor{❨288❩}@c
@functionsubindex{nicknames}@c
Return the list of nicknames for PACKAGE-DEFINITION.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {non-empty-string-p} (object)
@anchor{❨608❩}@c
@functionsubindex{non-empty-string-p}@c
Return T if OBJECT is a non-empty string.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {package-definition-p} (definition)
@anchor{❨413❩}@c
@functionsubindex{package-definition-p}@c
Return T if DEFINITION is a package definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {publicp} (definition)
@anchor{❨294❩}@c
@functionsubindex{publicp}@c
Return T is DEFINITION is public.@*
A definition is public when the symbol naming it has a home package@comma{}
and is exported from it.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {qualifiers} (definition)
@anchor{❨475❩}@c
@functionsubindex{qualifiers}@c
Return method DEFINITION's method qualifiers.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {reader-method-definition-p} (definition)
@anchor{❨89❩}@c
@functionsubindex{reader-method-definition-p}@c
Return T if DEFINITION is a reader method definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {retain} (object list &key test key pre-test)
@anchor{❨599❩}@c
@functionsubindex{retain}@c
Return a copy of LIST from which only OBJECT is retained.@*
Each item in LIST is TESTed with EQ by default. TEST is performed on the item
itself by default@comma{} or on the result of applying KEY to it. Optionally@comma{} only
items satisfying PRE-TEST are considered.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {short-expander-definition-p} (definition)
@anchor{❨122❩}@c
@functionsubindex{short-expander-definition-p}@c
Return T if DEFINITION is a short expander definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {source-control} (definition)
@anchor{❨116❩}@c
@functionsubindex{source-control}@c
Return system DEFINITION's source control@comma{} or NIL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {symbol-definition-p} (definition)
@anchor{❨144❩}@c
@functionsubindex{symbol-definition-p}@c
Return T if DEFINITION is a symbol definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {system-definition-p} (definition)
@anchor{❨269❩}@c
@functionsubindex{system-definition-p}@c
Return T if DEFINITION is a system definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {version} (&optional type)
@anchor{❨602❩}@c
@functionsubindex{version}@c
Return the current version of Declt.@*
TYPE can be one of :number@comma{} :short or :long.@*

A version number is computed as major*10000 + minor*100 + patchlevel@comma{} leaving
two digits for each level. Alpha@comma{} beta and rc status are ignored in version
numbers.@*

A short version is something like 1.3@lbracechar{}a@comma{}b@comma{}rc@rbracechar{}4@comma{} or 1.3.4 for patchlevel.
Alpha@comma{} beta or rc levels start at 1. Patchlevels start at 0 but are ignored
in the output@comma{} so that 1.3.0 appears as just 1.3.@*

A long version is something like@*
1.3 @lbracechar{}alpha@comma{}beta@comma{}release candidate@comma{}patchlevel@rbracechar{} 4 "James T. Kirk". As for
the short version@comma{} a patchlevel of 0 is ignored in the output.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {writer-method-definition-p} (definition)
@anchor{❨185❩}@c
@functionsubindex{writer-method-definition-p}@c
Return T if DEFINITION is a writer method definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn

@node Public generic functions, Public standalone methods, Public ordinary functions, Public Interface
@subsection Generic functions
@deffn {Generic Reader} {authors} (object)
@anchor{❨111❩}@c
@genericsubindex{authors}@c
@deffnx {Generic Writer} {(setf authors)} (object)
@anchor{❨113❩}@c
@genericsubindex{(setf authors)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {authors} ((system-definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨112❩}@c
@methodsubindex{authors}@c
@deffnx {Writer Method} {(setf authors)} ((system-definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨114❩}@c
@methodsubindex{(setf authors)}@c
The list of parsed author contacts.@*
See `parse-contact-string' for more information.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨150❩, , @t{authors}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {children} (object)
@anchor{❨481❩}@c
@genericsubindex{children}@c
@deffnx {Generic Writer} {(setf children)} (object)
@anchor{❨483❩}@c
@genericsubindex{(setf children)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {children} ((module-definition @ref{❨98❩, , @t{module-definition}}))
@anchor{❨482❩}@c
@methodsubindex{children}@c
@deffnx {Writer Method} {(setf children)} ((module-definition @ref{❨98❩, , @t{module-definition}}))
@anchor{❨484❩}@c
@methodsubindex{(setf children)}@c
The list of child definitions for this definition's module.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨100❩, , @t{children}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {classoid} (object)
@anchor{❨437❩}@c
@genericsubindex{classoid}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {classoid} ((classoid-definition @ref{❨337❩, , @t{classoid-definition}}))
@anchor{❨438❩}@c
@methodsubindex{classoid}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨338❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {clients} (object)
@anchor{❨199❩}@c
@genericsubindex{clients}@c
@deffnx {Generic Writer} {(setf clients)} (object)
@anchor{❨201❩}@c
@genericsubindex{(setf clients)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {clients} ((combination-definition @ref{❨203❩, , @t{combination-definition}}))
@anchor{❨200❩}@c
@methodsubindex{clients}@c
@deffnx {Writer Method} {(setf clients)} ((combination-definition @ref{❨203❩, , @t{combination-definition}}))
@anchor{❨202❩}@c
@methodsubindex{(setf clients)}@c
The list of client definitions for this definition's method combnination.
These are generic functions using this combination.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨205❩, , @t{clients}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {combination} (object)
@anchor{❨72❩}@c
@genericsubindex{combination}@c
@deffnx {Generic Writer} {(setf combination)} (object)
@anchor{❨75❩}@c
@genericsubindex{(setf combination)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {combination} ((generic-function-definition @ref{❨45❩, , @t{generic-function-definition}}))
@anchor{❨74❩}@c
@methodsubindex{combination}@c
@deffnx {Writer Method} {(setf combination)} ((generic-function-definition @ref{❨45❩, , @t{generic-function-definition}}))
@anchor{❨76❩}@c
@methodsubindex{(setf combination)}@c
The method combination definition for this definition's generic function.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨48❩, , @t{combination}}.
@end table
@end deffn
@deffn {Reader Method} {combination} ((combination-definition @ref{❨203❩, , @t{combination-definition}}))
@anchor{❨73❩}@c
@methodsubindex{combination}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨204❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {component} (object)
@anchor{❨427❩}@c
@genericsubindex{component}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {component} ((component-definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨428❩}@c
@methodsubindex{component}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨131❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {conclusion} (object)
@anchor{❨253❩}@c
@genericsubindex{conclusion}@c
@deffnx {Generic Writer} {(setf conclusion)} (object)
@anchor{❨255❩}@c
@genericsubindex{(setf conclusion)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {conclusion} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨254❩}@c
@methodsubindex{conclusion}@c
@deffnx {Writer Method} {(setf conclusion)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨256❩}@c
@methodsubindex{(setf conclusion)}@c
Contents for a conclusion chapter.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨283❩, , @t{conclusion}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {contacts} (object)
@anchor{❨66❩}@c
@genericsubindex{contacts}@c
@deffnx {Generic Writer} {(setf contacts)} (object)
@anchor{❨68❩}@c
@genericsubindex{(setf contacts)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {contacts} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨67❩}@c
@methodsubindex{contacts}@c
@deffnx {Writer Method} {(setf contacts)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨69❩}@c
@methodsubindex{(setf contacts)}@c
The list of contacts for the library.@*
Each element is of the form (NAME . EMAIL) where both NAME and EMAIL are
strings or NIL@comma{} and cannot be null at the same time.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨279❩, , @t{contacts}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {copyright-years} (object)
@anchor{❨315❩}@c
@genericsubindex{copyright-years}@c
@deffnx {Generic Writer} {(setf copyright-years)} (object)
@anchor{❨317❩}@c
@genericsubindex{(setf copyright-years)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {copyright-years} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨316❩}@c
@methodsubindex{copyright-years}@c
@deffnx {Writer Method} {(setf copyright-years)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨318❩}@c
@methodsubindex{(setf copyright-years)}@c
A copyright years string.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨280❩, , @t{copyright-years}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-class} (object)
@anchor{❨485❩}@c
@genericsubindex{definition-class}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definition-class} ((class-definition @ref{❨417❩, , @t{class-definition}}))
@anchor{❨486❩}@c
@methodsubindex{definition-class}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨418❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-compiler-macro} (object)
@anchor{❨434❩}@c
@genericsubindex{definition-compiler-macro}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definition-compiler-macro} ((compiler-macro-definition @ref{❨390❩, , @t{compiler-macro-definition}}))
@anchor{❨435❩}@c
@methodsubindex{definition-compiler-macro}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨391❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-condition} (object)
@anchor{❨487❩}@c
@genericsubindex{definition-condition}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definition-condition} ((condition-definition @ref{❨421❩, , @t{condition-definition}}))
@anchor{❨488❩}@c
@methodsubindex{definition-condition}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨422❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-function} (object)
@anchor{❨289❩}@c
@genericsubindex{definition-function}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definition-function} ((function-definition @ref{❨270❩, , @t{function-definition}}))
@anchor{❨290❩}@c
@methodsubindex{definition-function}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨271❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-method} (object)
@anchor{❨50❩}@c
@genericsubindex{definition-method}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definition-method} ((method-definition @ref{❨85❩, , @t{method-definition}}))
@anchor{❨51❩}@c
@methodsubindex{definition-method}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨86❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-package} (object)
@anchor{❨187❩}@c
@genericsubindex{definition-package}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definition-package} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨188❩}@c
@methodsubindex{definition-package}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@item Target Slot
@ref{❨209❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-structure} (object)
@anchor{❨312❩}@c
@genericsubindex{definition-structure}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definition-structure} ((structure-definition @ref{❨285❩, , @t{structure-definition}}))
@anchor{❨313❩}@c
@methodsubindex{definition-structure}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨286❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definition-symbol} (object)
@anchor{❨425❩}@c
@genericsubindex{definition-symbol}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definition-symbol} ((symbol-definition @ref{❨218❩, , @t{symbol-definition}}))
@anchor{❨426❩}@c
@methodsubindex{definition-symbol}@c
The symbol naming this definition.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨219❩, , @t{symbol}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {definitions} (object)
@anchor{❨349❩}@c
@genericsubindex{definitions}@c
@deffnx {Generic Writer} {(setf definitions)} (object)
@anchor{❨353❩}@c
@genericsubindex{(setf definitions)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {definitions} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨350❩}@c
@methodsubindex{definitions}@c
@deffnx {Writer Method} {(setf definitions)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨354❩}@c
@methodsubindex{(setf definitions)}@c
The list of definitions.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨284❩, , @t{definitions}}.
@end table
@end deffn
@deffn {Reader Method} {definitions} ((lisp-file-definition @ref{❨272❩, , @t{lisp-file-definition}}))
@anchor{❨351❩}@c
@methodsubindex{definitions}@c
@deffnx {Writer Method} {(setf definitions)} ((lisp-file-definition @ref{❨272❩, , @t{lisp-file-definition}}))
@anchor{❨355❩}@c
@methodsubindex{(setf definitions)}@c
The list of definitions for this definition's file.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨273❩, , @t{definitions}}.
@end table
@end deffn
@deffn {Reader Method} {definitions} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨352❩}@c
@methodsubindex{definitions}@c
@deffnx {Writer Method} {(setf definitions)} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨356❩}@c
@methodsubindex{(setf definitions)}@c
The list of corresponding definitions.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@item Target Slot
@ref{❨214❩, , @t{definitions}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {defsystem-dependencies} (object)
@anchor{❨299❩}@c
@genericsubindex{defsystem-dependencies}@c
@deffnx {Generic Writer} {(setf defsystem-dependencies)} (object)
@anchor{❨301❩}@c
@genericsubindex{(setf defsystem-dependencies)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {defsystem-dependencies} ((system-definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨300❩}@c
@methodsubindex{defsystem-dependencies}@c
@deffnx {Writer Method} {(setf defsystem-dependencies)} ((system-definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨302❩}@c
@methodsubindex{(setf defsystem-dependencies)}@c
The list of defsystem dependency definitions.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨151❩, , @t{defsystem-dependencies}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {dependencies} (object)
@anchor{❨324❩}@c
@genericsubindex{dependencies}@c
@deffnx {Generic Writer} {(setf dependencies)} (object)
@anchor{❨326❩}@c
@genericsubindex{(setf dependencies)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {dependencies} ((component-definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨325❩}@c
@methodsubindex{dependencies}@c
@deffnx {Writer Method} {(setf dependencies)} ((component-definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨327❩}@c
@methodsubindex{(setf dependencies)}@c
The list of dependency definitions for this definition's component.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨134❩, , @t{dependencies}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-methods} (object)
@anchor{❨39❩}@c
@genericsubindex{direct-methods}@c
@deffnx {Generic Writer} {(setf direct-methods)} (object)
@anchor{❨41❩}@c
@genericsubindex{(setf direct-methods)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-methods} ((clos-classoid-mixin @ref{❨177❩, , @t{clos-classoid-mixin}}))
@anchor{❨40❩}@c
@methodsubindex{direct-methods}@c
@deffnx {Writer Method} {(setf direct-methods)} ((clos-classoid-mixin @ref{❨177❩, , @t{clos-classoid-mixin}}))
@anchor{❨42❩}@c
@methodsubindex{(setf direct-methods)}@c
The list of direct method definitions for this definition's classoid.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨180❩, , @t{direct-methods}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-slots} (object)
@anchor{❨168❩}@c
@genericsubindex{direct-slots}@c
@deffnx {Generic Writer} {(setf direct-slots)} (object)
@anchor{❨170❩}@c
@genericsubindex{(setf direct-slots)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-slots} ((classoid-definition @ref{❨337❩, , @t{classoid-definition}}))
@anchor{❨169❩}@c
@methodsubindex{direct-slots}@c
@deffnx {Writer Method} {(setf direct-slots)} ((classoid-definition @ref{❨337❩, , @t{classoid-definition}}))
@anchor{❨171❩}@c
@methodsubindex{(setf direct-slots)}@c
The list of direct slot definitions for this definition's classoid.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨339❩, , @t{direct-slots}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-subclasses} (object)
@anchor{❨458❩}@c
@genericsubindex{direct-subclasses}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-subclasses} ((class-definition @ref{❨417❩, , @t{class-definition}}))
@anchor{❨459❩}@c
@methodsubindex{direct-subclasses}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨420❩, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-subclasses)} (object)
@anchor{❨460❩}@c
@genericsubindex{(setf direct-subclasses)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Writer Method} {(setf direct-subclasses)} ((class-definition @ref{❨417❩, , @t{class-definition}}))
@anchor{❨461❩}@c
@methodsubindex{(setf direct-subclasses)}@c
automatically generated writer method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨420❩, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-subclassoids} (object)
@anchor{❨58❩}@c
@genericsubindex{direct-subclassoids}@c
@deffnx {Generic Writer} {(setf direct-subclassoids)} (object)
@anchor{❨60❩}@c
@genericsubindex{(setf direct-subclassoids)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-subclassoids} ((clos-classoid-mixin @ref{❨177❩, , @t{clos-classoid-mixin}}))
@anchor{❨59❩}@c
@methodsubindex{direct-subclassoids}@c
@deffnx {Writer Method} {(setf direct-subclassoids)} ((clos-classoid-mixin @ref{❨177❩, , @t{clos-classoid-mixin}}))
@anchor{❨61❩}@c
@methodsubindex{(setf direct-subclassoids)}@c
The list of direct subclassoid definitions for this definition's classoid.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨179❩, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-subconditions} (object)
@anchor{❨105❩}@c
@genericsubindex{direct-subconditions}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-subconditions} ((condition-definition @ref{❨421❩, , @t{condition-definition}}))
@anchor{❨106❩}@c
@methodsubindex{direct-subconditions}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨424❩, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-subconditions)} (object)
@anchor{❨107❩}@c
@genericsubindex{(setf direct-subconditions)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Writer Method} {(setf direct-subconditions)} ((condition-definition @ref{❨421❩, , @t{condition-definition}}))
@anchor{❨108❩}@c
@methodsubindex{(setf direct-subconditions)}@c
automatically generated writer method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨424❩, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-substructures} (object)
@anchor{❨249❩}@c
@genericsubindex{direct-substructures}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-substructures} ((clos-structure-definition @ref{❨221❩, , @t{clos-structure-definition}}))
@anchor{❨250❩}@c
@methodsubindex{direct-substructures}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨223❩, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-substructures)} (object)
@anchor{❨251❩}@c
@genericsubindex{(setf direct-substructures)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Writer Method} {(setf direct-substructures)} ((clos-structure-definition @ref{❨221❩, , @t{clos-structure-definition}}))
@anchor{❨252❩}@c
@methodsubindex{(setf direct-substructures)}@c
automatically generated writer method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨223❩, , @t{direct-subclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-superclasses} (object)
@anchor{❨225❩}@c
@genericsubindex{direct-superclasses}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-superclasses} ((class-definition @ref{❨417❩, , @t{class-definition}}))
@anchor{❨226❩}@c
@methodsubindex{direct-superclasses}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨419❩, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-superclasses)} (object)
@anchor{❨227❩}@c
@genericsubindex{(setf direct-superclasses)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Writer Method} {(setf direct-superclasses)} ((class-definition @ref{❨417❩, , @t{class-definition}}))
@anchor{❨228❩}@c
@methodsubindex{(setf direct-superclasses)}@c
automatically generated writer method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨419❩, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-superclassoids} (object)
@anchor{❨342❩}@c
@genericsubindex{direct-superclassoids}@c
@deffnx {Generic Writer} {(setf direct-superclassoids)} (object)
@anchor{❨344❩}@c
@genericsubindex{(setf direct-superclassoids)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-superclassoids} ((clos-classoid-mixin @ref{❨177❩, , @t{clos-classoid-mixin}}))
@anchor{❨343❩}@c
@methodsubindex{direct-superclassoids}@c
@deffnx {Writer Method} {(setf direct-superclassoids)} ((clos-classoid-mixin @ref{❨177❩, , @t{clos-classoid-mixin}}))
@anchor{❨345❩}@c
@methodsubindex{(setf direct-superclassoids)}@c
The list of direct superclassoid definitions for this definition's classoid.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨178❩, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-superconditions} (object)
@anchor{❨303❩}@c
@genericsubindex{direct-superconditions}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-superconditions} ((condition-definition @ref{❨421❩, , @t{condition-definition}}))
@anchor{❨304❩}@c
@methodsubindex{direct-superconditions}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨423❩, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-superconditions)} (object)
@anchor{❨305❩}@c
@genericsubindex{(setf direct-superconditions)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Writer Method} {(setf direct-superconditions)} ((condition-definition @ref{❨421❩, , @t{condition-definition}}))
@anchor{❨306❩}@c
@methodsubindex{(setf direct-superconditions)}@c
automatically generated writer method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨423❩, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {direct-superstructures} (object)
@anchor{❨117❩}@c
@genericsubindex{direct-superstructures}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {direct-superstructures} ((clos-structure-definition @ref{❨221❩, , @t{clos-structure-definition}}))
@anchor{❨118❩}@c
@methodsubindex{direct-superstructures}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨222❩, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Writer} {(setf direct-superstructures)} (object)
@anchor{❨119❩}@c
@genericsubindex{(setf direct-superstructures)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Writer Method} {(setf direct-superstructures)} ((clos-structure-definition @ref{❨221❩, , @t{clos-structure-definition}}))
@anchor{❨120❩}@c
@methodsubindex{(setf direct-superstructures)}@c
automatically generated writer method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨222❩, , @t{direct-superclassoids}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {docstring} (definition)
@anchor{❨393❩}@c
@genericsubindex{docstring}@c
Return DEFINITION's docstring (Lisp documentation).
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Methods
@deffn {Method} {docstring} ((definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨394❩}@c
@methodsubindex{docstring}@c
Return component DEFINITION's description.
This is the same as the `description' function.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨263❩, , @t{function-alias-definition}}))
@anchor{❨395❩}@c
@methodsubindex{docstring}@c
Return function alias DEFINITION's docstring.
This is the docstring attached to DEFINITION's name@comma{}
rather than the one attached to the function.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨95❩, , @t{compiler-macro-alias-definition}}))
@anchor{❨396❩}@c
@methodsubindex{docstring}@c
Return compiler macro alias DEFINITION's docstring.@*
This is the docstring attached to DEFINITION's name@comma{}
rather than the one attached to the compiler macro function.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨416❩, , @t{macro-alias-definition}}))
@anchor{❨397❩}@c
@methodsubindex{docstring}@c
Return macro alias DEFINITION's docstring.@*
This is the docstring attached to DEFINITION's symbol@comma{}
rather than the one attached to the macro function.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨127❩, , @t{typed-structure-slot-definition}}))
@anchor{❨398❩}@c
@methodsubindex{docstring}@c
Return NIL.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨128❩, , @t{clos-slot-definition}}))
@anchor{❨399❩}@c
@methodsubindex{docstring}@c
Return CLOS slot DEFINITION's docstring.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨431❩, , @t{typed-structure-definition}}))
@anchor{❨400❩}@c
@methodsubindex{docstring}@c
Return typed structure DEFINITION's docstring.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨203❩, , @t{combination-definition}}))
@anchor{❨401❩}@c
@methodsubindex{docstring}@c
Return method combination DEFINITION's docstring.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨123❩, , @t{expander-definition}}))
@anchor{❨402❩}@c
@methodsubindex{docstring}@c
Return setf expander DEFINITION's docstring.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨322❩, , @t{type-definition}}))
@anchor{❨403❩}@c
@methodsubindex{docstring}@c
Return type DEFINITION's docstring.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨145❩, , @t{symbol-macro-definition}}))
@anchor{❨404❩}@c
@methodsubindex{docstring}@c
Return NIL (symbol macros don't have a docstring).
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} ((definition @ref{❨129❩, , @t{variable-definition}}))
@anchor{❨405❩}@c
@methodsubindex{docstring}@c
Return variable DEFINITION's docstring.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {docstring} (definition)
@anchor{❨406❩}@c
@methodsubindex{docstring}@c
Return DEFINITION's object canonical documentation.
This is the default method.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {element-type} (object)
@anchor{❨52❩}@c
@genericsubindex{element-type}@c
@deffnx {Generic Writer} {(setf element-type)} (object)
@anchor{❨54❩}@c
@genericsubindex{(setf element-type)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {element-type} ((typed-structure-definition @ref{❨431❩, , @t{typed-structure-definition}}))
@anchor{❨53❩}@c
@methodsubindex{element-type}@c
@deffnx {Writer Method} {(setf element-type)} ((typed-structure-definition @ref{❨431❩, , @t{typed-structure-definition}}))
@anchor{❨55❩}@c
@methodsubindex{(setf element-type)}@c
The structure's element type.@*
It is T for list structures@comma{} but may be something else for vector ones.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨433❩, , @t{element-type}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {expander} (object)
@anchor{❨244❩}@c
@genericsubindex{expander}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {expander} ((expander-definition @ref{❨123❩, , @t{expander-definition}}))
@anchor{❨245❩}@c
@methodsubindex{expander}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨124❩, , @t{object}}.
@end table
@end deffn
@deffn {Reader Method} {expander} ((type-definition @ref{❨322❩, , @t{type-definition}}))
@anchor{❨246❩}@c
@methodsubindex{expander}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨323❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {expander-for} (object)
@anchor{❨441❩}@c
@genericsubindex{expander-for}@c
@deffnx {Generic Writer} {(setf expander-for)} (object)
@anchor{❨443❩}@c
@genericsubindex{(setf expander-for)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {expander-for} ((setfable-funcoid-definition @ref{❨237❩, , @t{setfable-funcoid-definition}}))
@anchor{❨442❩}@c
@methodsubindex{expander-for}@c
@deffnx {Writer Method} {(setf expander-for)} ((setfable-funcoid-definition @ref{❨237❩, , @t{setfable-funcoid-definition}}))
@anchor{❨444❩}@c
@methodsubindex{(setf expander-for)}@c
A setf expander definition for this funcoid@comma{} or NIL.@*
This is the definition of a setf expander that expands forms identical to this
funcoid's signature. There can be only one. Note that the Common Lisp standard
does not impose any actual relation between the setf expander and its
access-fn. In fact@comma{} the access-fn may not even exist at all. However@comma{} if it
does@comma{} it is very likely that it is a reader for the place updated by this setf
expander.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨238❩, , @t{expander-for}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {expanders-to} (object)
@anchor{❨462❩}@c
@genericsubindex{expanders-to}@c
@deffnx {Generic Writer} {(setf expanders-to)} (object)
@anchor{❨464❩}@c
@genericsubindex{(setf expanders-to)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {expanders-to} ((setfable-funcoid-definition @ref{❨237❩, , @t{setfable-funcoid-definition}}))
@anchor{❨463❩}@c
@methodsubindex{expanders-to}@c
@deffnx {Writer Method} {(setf expanders-to)} ((setfable-funcoid-definition @ref{❨237❩, , @t{setfable-funcoid-definition}}))
@anchor{❨465❩}@c
@methodsubindex{(setf expanders-to)}@c
The list of setf expander definitions to this funcoid.@*
This is a list of definitions for short form setf expanders that have this
funcoid as their update-fn. There might be more than one.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨239❩, , @t{expanders-to}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {file} (object)
@anchor{❨414❩}@c
@genericsubindex{file}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {file} ((file-definition @ref{❨347❩, , @t{file-definition}}))
@anchor{❨415❩}@c
@methodsubindex{file}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨348❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {foreignp} (object)
@anchor{❨240❩}@c
@genericsubindex{foreignp}@c
@deffnx {Generic Writer} {(setf foreignp)} (object)
@anchor{❨242❩}@c
@genericsubindex{(setf foreignp)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {foreignp} ((definition @ref{❨385❩, , @t{definition}}))
@anchor{❨241❩}@c
@methodsubindex{foreignp}@c
@deffnx {Writer Method} {(setf foreignp)} ((definition @ref{❨385❩, , @t{definition}}))
@anchor{❨243❩}@c
@methodsubindex{(setf foreignp)}@c
Whether this definition is foreign.
@table @strong
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Target Slot
@ref{❨389❩, , @t{foreign}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {funcoid} (object)
@anchor{❨477❩}@c
@genericsubindex{funcoid}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {funcoid} ((funcoid-definition @ref{❨291❩, , @t{funcoid-definition}}))
@anchor{❨478❩}@c
@methodsubindex{funcoid}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨292❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {generic} (object)
@anchor{❨328❩}@c
@genericsubindex{generic}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {generic} ((generic-function-definition @ref{❨45❩, , @t{generic-function-definition}}))
@anchor{❨329❩}@c
@methodsubindex{generic}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨46❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {home-package} (object)
@anchor{❨195❩}@c
@genericsubindex{home-package}@c
@deffnx {Generic Writer} {(setf home-package)} (object)
@anchor{❨197❩}@c
@genericsubindex{(setf home-package)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {home-package} ((symbol-definition @ref{❨218❩, , @t{symbol-definition}}))
@anchor{❨196❩}@c
@methodsubindex{home-package}@c
@deffnx {Writer Method} {(setf home-package)} ((symbol-definition @ref{❨218❩, , @t{symbol-definition}}))
@anchor{❨198❩}@c
@methodsubindex{(setf home-package)}@c
The home package definition for this definition's symbol.@*
Every definition gets a home package@comma{} even foreign ones. A home package can
only be null when the definition's symbol is uninterned.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨220❩, , @t{home-package}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {introduction} (object)
@anchor{❨136❩}@c
@genericsubindex{introduction}@c
@deffnx {Generic Writer} {(setf introduction)} (object)
@anchor{❨138❩}@c
@genericsubindex{(setf introduction)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {introduction} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨137❩}@c
@methodsubindex{introduction}@c
@deffnx {Writer Method} {(setf introduction)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨139❩}@c
@methodsubindex{(setf introduction)}@c
Contents for an introduction chapter.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨282❩, , @t{introduction}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {lambda-list} (definition)
@anchor{❨466❩}@c
@genericsubindex{lambda-list}@c
Return funcoid DEFINITION's lambda-list.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Methods
@deffn {Method} {lambda-list} ((definition @ref{❨215❩, , @t{alias-definition}}))
@anchor{❨467❩}@c
@methodsubindex{lambda-list}@c
Return the lambda-list of alias DEFINITION's referee.
@table @strong
@end table
@end deffn
@deffn {Method} {lambda-list} ((definition @ref{❨85❩, , @t{method-definition}}))
@anchor{❨468❩}@c
@methodsubindex{lambda-list}@c
Return method DEFINITION's method lambda-list.
@table @strong
@end table
@end deffn
@deffn {Method} {lambda-list} ((definition @ref{❨203❩, , @t{combination-definition}}))
@anchor{❨469❩}@c
@methodsubindex{lambda-list}@c
Return method combination DEFINITION's lambda-list.
@table @strong
@end table
@end deffn
@deffn {Method} {lambda-list} ((definition @ref{❨43❩, , @t{long-expander-definition}}))
@anchor{❨470❩}@c
@methodsubindex{lambda-list}@c
Return long setf expander DEFINITION's expander function's lambda-list.
@table @strong
@end table
@end deffn
@deffn {Method} {lambda-list} ((definition @ref{❨479❩, , @t{short-expander-definition}}))
@anchor{❨471❩}@c
@methodsubindex{lambda-list}@c
Return short setf expander DEFINITION's lambda-list.@*
This lambda-list is computed as the shortened version of DEFINITION's
update-fn lambda-list@comma{} because setf expanders pass the new value as the last
argument to their operator.@*
If the expander's update-fn is not defined@comma{} return two values: NIL and T.
@table @strong
@end table
@end deffn
@deffn {Method} {lambda-list} ((definition @ref{❨322❩, , @t{type-definition}}))
@anchor{❨472❩}@c
@methodsubindex{lambda-list}@c
Return type DEFINITION's type lambda-list.
@table @strong
@end table
@end deffn
@deffn {Method} {lambda-list} ((definition @ref{❨291❩, , @t{funcoid-definition}}))
@anchor{❨473❩}@c
@methodsubindex{lambda-list}@c
Return funcoid DEFINITION's function lambda-list.
This is the default method.
@table @strong
@end table
@end deffn
@deffn {Method} {lambda-list} :around ((definition @ref{❨291❩, , @t{funcoid-definition}}))
@anchor{❨474❩}@c
@methodsubindex{lambda-list}@c
Return only the lambda-list's CDR for setf definitions.@*
This only applies to compiler macros and functions (to filter out the
parameter corresponding to the new value) but does nothing on setf expanders
because their primary methods already do the filtering (differently).
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {library-name} (object)
@anchor{❨407❩}@c
@genericsubindex{library-name}@c
@deffnx {Generic Writer} {(setf library-name)} (object)
@anchor{❨409❩}@c
@genericsubindex{(setf library-name)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {library-name} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨408❩}@c
@methodsubindex{library-name}@c
@deffnx {Writer Method} {(setf library-name)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨410❩}@c
@methodsubindex{(setf library-name)}@c
The library's name.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨276❩, , @t{library-name}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {library-version} (object)
@anchor{❨368❩}@c
@genericsubindex{library-version}@c
@deffnx {Generic Writer} {(setf library-version)} (object)
@anchor{❨370❩}@c
@genericsubindex{(setf library-version)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {library-version} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨369❩}@c
@methodsubindex{library-version}@c
@deffnx {Writer Method} {(setf library-version)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨371❩}@c
@methodsubindex{(setf library-version)}@c
The library's version.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨278❩, , @t{library-version}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {license} (object)
@anchor{❨372❩}@c
@genericsubindex{license}@c
@deffnx {Generic Writer} {(setf license)} (object)
@anchor{❨374❩}@c
@genericsubindex{(setf license)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {license} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨373❩}@c
@methodsubindex{license}@c
@deffnx {Writer Method} {(setf license)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨375❩}@c
@methodsubindex{(setf license)}@c
The library's license.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨281❩, , @t{license}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {location} (object)
@anchor{❨164❩}@c
@genericsubindex{location}@c
@deffnx {Generic Writer} {(setf location)} (object)
@anchor{❨166❩}@c
@genericsubindex{(setf location)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {location} ((component-definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨165❩}@c
@methodsubindex{location}@c
@deffnx {Writer Method} {(setf location)} ((component-definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨167❩}@c
@methodsubindex{(setf location)}@c
The component's location (a namestring).
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨132❩, , @t{location}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {macro} (object)
@anchor{❨340❩}@c
@genericsubindex{macro}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {macro} ((macro-definition @ref{❨266❩, , @t{macro-definition}}))
@anchor{❨341❩}@c
@methodsubindex{macro}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨267❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {maintainers} (object)
@anchor{❨101❩}@c
@genericsubindex{maintainers}@c
@deffnx {Generic Writer} {(setf maintainers)} (object)
@anchor{❨103❩}@c
@genericsubindex{(setf maintainers)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {maintainers} ((system-definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨102❩}@c
@methodsubindex{maintainers}@c
@deffnx {Writer Method} {(setf maintainers)} ((system-definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨104❩}@c
@methodsubindex{(setf maintainers)}@c
The list of parsed maintainer contacts.@*
See `parse-contact-string' for more information.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨149❩, , @t{maintainers}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {methods} (object)
@anchor{❨80❩}@c
@genericsubindex{methods}@c
@deffnx {Generic Writer} {(setf methods)} (object)
@anchor{❨82❩}@c
@genericsubindex{(setf methods)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {methods} ((generic-function-definition @ref{❨45❩, , @t{generic-function-definition}}))
@anchor{❨81❩}@c
@methodsubindex{methods}@c
@deffnx {Writer Method} {(setf methods)} ((generic-function-definition @ref{❨45❩, , @t{generic-function-definition}}))
@anchor{❨83❩}@c
@methodsubindex{(setf methods)}@c
The list of method definitions for this definition's generic function.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨47❩, , @t{methods}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {module} (object)
@anchor{❨157❩}@c
@genericsubindex{module}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {module} ((module-definition @ref{❨98❩, , @t{module-definition}}))
@anchor{❨158❩}@c
@methodsubindex{module}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨99❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {name} (definition)
@anchor{❨257❩}@c
@genericsubindex{name}@c
The definition's name.@*
This is the native Lisp name for the definition's corresponding object.
It's either a string (for ASDF components and packages)@comma{} a symbol@comma{}
or a list of the form (setf symbol).
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Methods
@deffn {Method} {name} ((definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨258❩}@c
@methodsubindex{name}@c
Return component DEFINITION's component name.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {name} ((definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨259❩}@c
@methodsubindex{name}@c
Return package DEFINITION's package name.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {name} :around ((definition @ref{❨215❩, , @t{alias-definition}}))
@anchor{❨260❩}@c
@methodsubindex{name}@c
Wrap alias DEFINITION's name in a SETF list when appropriate.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {name} :around ((definition @ref{❨291❩, , @t{funcoid-definition}}))
@anchor{❨261❩}@c
@methodsubindex{name}@c
Wrap funcoid DEFINITION's name in a SETF list when appropriate.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {name} ((definition @ref{❨218❩, , @t{symbol-definition}}))
@anchor{❨262❩}@c
@methodsubindex{name}@c
Return symbol DEFINITION's symbol.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {object} (object)
@anchor{❨320❩}@c
@genericsubindex{object}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {object} ((definition @ref{❨385❩, , @t{definition}}))
@anchor{❨321❩}@c
@methodsubindex{object}@c
The corresponding Lisp object@comma{} or NIL.@*
Only constants@comma{} special variables@comma{} symbol macros@comma{} and aliases lack such an
object.
@table @strong
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Target Slot
@ref{❨386❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {owner} (object)
@anchor{❨376❩}@c
@genericsubindex{owner}@c
@deffnx {Generic Writer} {(setf owner)} (object)
@anchor{❨379❩}@c
@genericsubindex{(setf owner)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {owner} ((slot-definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨377❩}@c
@methodsubindex{owner}@c
@deffnx {Writer Method} {(setf owner)} ((slot-definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨380❩}@c
@methodsubindex{(setf owner)}@c
The definition for the owner of this definition's slot.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨161❩, , @t{owner}}.
@end table
@end deffn
@deffn {Reader Method} {owner} ((method-definition @ref{❨85❩, , @t{method-definition}}))
@anchor{❨378❩}@c
@methodsubindex{owner}@c
@deffnx {Writer Method} {(setf owner)} ((method-definition @ref{❨85❩, , @t{method-definition}}))
@anchor{❨381❩}@c
@methodsubindex{(setf owner)}@c
The generic function definition for this definition's method.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨87❩, , @t{owner}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {parent} (object)
@anchor{❨152❩}@c
@genericsubindex{parent}@c
@deffnx {Generic Writer} {(setf parent)} (object)
@anchor{❨154❩}@c
@genericsubindex{(setf parent)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {parent} ((component-definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨153❩}@c
@methodsubindex{parent}@c
@deffnx {Writer Method} {(setf parent)} ((component-definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨155❩}@c
@methodsubindex{(setf parent)}@c
The parent definition for this definition's component.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨133❩, , @t{parent}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {private-definitions} (object)
@anchor{❨382❩}@c
@genericsubindex{private-definitions}@c
Return OBJECT's private definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Methods
@deffn {Method} {private-definitions} ((definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨383❩}@c
@methodsubindex{private-definitions}@c
Return package DEFINITION's private definitions.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {private-definitions} (object)
@anchor{❨384❩}@c
@methodsubindex{private-definitions}@c
Return OBJECT's private definitions from its definitions list.
This is the default method for heterogeneous definitions lists.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {public-definitions} (object)
@anchor{❨296❩}@c
@genericsubindex{public-definitions}@c
Return OBJECT's public definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Methods
@deffn {Method} {public-definitions} ((definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨297❩}@c
@methodsubindex{public-definitions}@c
Return package DEFINITION's public definitions.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {public-definitions} (object)
@anchor{❨298❩}@c
@methodsubindex{public-definitions}@c
Return OBJECT's public definitions from its definitions list.
This is the default method for heterogeneous definitions lists.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {readers} (object)
@anchor{❨233❩}@c
@genericsubindex{readers}@c
@deffnx {Generic Writer} {(setf readers)} (object)
@anchor{❨235❩}@c
@genericsubindex{(setf readers)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {readers} ((slot-definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨234❩}@c
@methodsubindex{readers}@c
@deffnx {Writer Method} {(setf readers)} ((slot-definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨236❩}@c
@methodsubindex{(setf readers)}@c
The list of definitions for this definition's slot readers.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨162❩, , @t{readers}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {referee} (object)
@anchor{❨330❩}@c
@genericsubindex{referee}@c
@deffnx {Generic Writer} {(setf referee)} (object)
@anchor{❨332❩}@c
@genericsubindex{(setf referee)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {referee} ((alias-definition @ref{❨215❩, , @t{alias-definition}}))
@anchor{❨331❩}@c
@methodsubindex{referee}@c
@deffnx {Writer Method} {(setf referee)} ((alias-definition @ref{❨215❩, , @t{alias-definition}}))
@anchor{❨333❩}@c
@methodsubindex{(setf referee)}@c
The original definition this definition aliases.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨217❩, , @t{referee}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {setfp} (object)
@anchor{❨365❩}@c
@genericsubindex{setfp}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {setfp} ((alias-definition @ref{❨215❩, , @t{alias-definition}}))
@anchor{❨366❩}@c
@methodsubindex{setfp}@c
Whether this is a setf alias definition.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨216❩, , @t{setf}}.
@end table
@end deffn
@deffn {Reader Method} {setfp} ((funcoid-definition @ref{❨291❩, , @t{funcoid-definition}}))
@anchor{❨367❩}@c
@methodsubindex{setfp}@c
Whether this is a setf definition.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨293❩, , @t{setf}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {slot} (object)
@anchor{❨77❩}@c
@genericsubindex{slot}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {slot} ((slot-definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨78❩}@c
@methodsubindex{slot}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨160❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {source-file} (object)
@anchor{❨449❩}@c
@genericsubindex{source-file}@c
@deffnx {Generic Writer} {(setf source-file)} (object)
@anchor{❨451❩}@c
@genericsubindex{(setf source-file)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {source-file} ((definition @ref{❨385❩, , @t{definition}}))
@anchor{❨450❩}@c
@methodsubindex{source-file}@c
@deffnx {Writer Method} {(setf source-file)} ((definition @ref{❨385❩, , @t{definition}}))
@anchor{❨452❩}@c
@methodsubindex{(setf source-file)}@c
The source file definition for this definition's object.
@table @strong
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Target Slot
@ref{❨388❩, , @t{source-file}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {specializers} (object)
@anchor{❨181❩}@c
@genericsubindex{specializers}@c
@deffnx {Generic Writer} {(setf specializers)} (object)
@anchor{❨183❩}@c
@genericsubindex{(setf specializers)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {specializers} ((method-definition @ref{❨85❩, , @t{method-definition}}))
@anchor{❨182❩}@c
@methodsubindex{specializers}@c
@deffnx {Writer Method} {(setf specializers)} ((method-definition @ref{❨85❩, , @t{method-definition}}))
@anchor{❨184❩}@c
@methodsubindex{(setf specializers)}@c
The specializers of this definition's method.@*
This is a list of either class definitions (for regular specializers)@comma{}
or raw EQL specializers.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨88❩, , @t{specializers}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {standalone-combinator} (object)
@anchor{❨189❩}@c
@genericsubindex{standalone-combinator}@c
@deffnx {Generic Writer} {(setf standalone-combinator)} (object)
@anchor{❨191❩}@c
@genericsubindex{(setf standalone-combinator)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {standalone-combinator} ((short-combination-definition @ref{❨231❩, , @t{short-combination-definition}}))
@anchor{❨190❩}@c
@methodsubindex{standalone-combinator}@c
@deffnx {Writer Method} {(setf standalone-combinator)} ((short-combination-definition @ref{❨231❩, , @t{short-combination-definition}}))
@anchor{❨192❩}@c
@methodsubindex{(setf standalone-combinator)}@c
The corresponding standalone combinator definition@comma{} or NIL.@*
This is a function or macro definition. Note that if this definition
is unavailable@comma{} it means that the method combination itself cannot be used
(yet).
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨232❩, , @t{standalone-combinator}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {standalone-reader} (object)
@anchor{❨357❩}@c
@genericsubindex{standalone-reader}@c
@deffnx {Generic Writer} {(setf standalone-reader)} (object)
@anchor{❨359❩}@c
@genericsubindex{(setf standalone-reader)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {standalone-reader} ((expander-definition @ref{❨123❩, , @t{expander-definition}}))
@anchor{❨358❩}@c
@methodsubindex{standalone-reader}@c
@deffnx {Writer Method} {(setf standalone-reader)} ((expander-definition @ref{❨123❩, , @t{expander-definition}}))
@anchor{❨360❩}@c
@methodsubindex{(setf standalone-reader)}@c
A standalone reader definition for this definition's expander@comma{} or NIL.@*
If it exists@comma{} it's a definition for a function or macro with the same
signature as that of the expander's access-fn. Note that the Common Lisp
standard does not impose any actual relation between the setf expander and its
access-fn. In fact@comma{} the access-fn may not even exist at all. However@comma{} if it
does@comma{} it is very likely that it is a reader for the place updated by this setf
expander.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨126❩, , @t{standalone-reader}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {standalone-writer} (object)
@anchor{❨62❩}@c
@genericsubindex{standalone-writer}@c
@deffnx {Generic Writer} {(setf standalone-writer)} (object)
@anchor{❨64❩}@c
@genericsubindex{(setf standalone-writer)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {standalone-writer} ((short-expander-definition @ref{❨479❩, , @t{short-expander-definition}}))
@anchor{❨63❩}@c
@methodsubindex{standalone-writer}@c
@deffnx {Writer Method} {(setf standalone-writer)} ((short-expander-definition @ref{❨479❩, , @t{short-expander-definition}}))
@anchor{❨65❩}@c
@methodsubindex{(setf standalone-writer)}@c
A standalone writer definition for this definition's expander@comma{} or NIL.
This is a function or macro definition. Note that if this definition
is unavailable@comma{} it means that the expander itself cannot be used (yet).
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨480❩, , @t{standalone-writer}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {structure-type} (object)
@anchor{❨140❩}@c
@genericsubindex{structure-type}@c
@deffnx {Generic Writer} {(setf structure-type)} (object)
@anchor{❨142❩}@c
@genericsubindex{(setf structure-type)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {structure-type} ((typed-structure-definition @ref{❨431❩, , @t{typed-structure-definition}}))
@anchor{❨141❩}@c
@methodsubindex{structure-type}@c
@deffnx {Writer Method} {(setf structure-type)} ((typed-structure-definition @ref{❨431❩, , @t{typed-structure-definition}}))
@anchor{❨143❩}@c
@methodsubindex{(setf structure-type)}@c
The structure type@comma{} either LIST or VECTOR.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨432❩, , @t{type}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {system} (object)
@anchor{❨439❩}@c
@genericsubindex{system}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {system} ((system-definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨440❩}@c
@methodsubindex{system}@c
automatically generated reader method
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Target Slot
@ref{❨147❩, , @t{object}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {tagline} (object)
@anchor{❨454❩}@c
@genericsubindex{tagline}@c
@deffnx {Generic Writer} {(setf tagline)} (object)
@anchor{❨456❩}@c
@genericsubindex{(setf tagline)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {tagline} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨455❩}@c
@methodsubindex{tagline}@c
@deffnx {Writer Method} {(setf tagline)} ((report @ref{❨275❩, , @t{report}}))
@anchor{❨457❩}@c
@methodsubindex{(setf tagline)}@c
The reference manual's tagline.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Target Slot
@ref{❨277❩, , @t{tagline}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {target-slot} (object)
@anchor{❨247❩}@c
@genericsubindex{target-slot}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {target-slot} ((accessor-mixin @ref{❨229❩, , @t{accessor-mixin}}))
@anchor{❨248❩}@c
@methodsubindex{target-slot}@c
The target slot definition for this definition's accessor.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨230❩, , @t{target-slot}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {uid} (object)
@anchor{❨172❩}@c
@genericsubindex{uid}@c
@deffnx {Generic Writer} {(setf uid)} (object)
@anchor{❨174❩}@c
@genericsubindex{(setf uid)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {uid} ((definition @ref{❨385❩, , @t{definition}}))
@anchor{❨173❩}@c
@methodsubindex{uid}@c
@deffnx {Writer Method} {(setf uid)} ((definition @ref{❨385❩, , @t{definition}}))
@anchor{❨175❩}@c
@methodsubindex{(setf uid)}@c
This definition's UID.
@table @strong
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Target Slot
@ref{❨387❩, , @t{uid}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {use-list} (object)
@anchor{❨361❩}@c
@genericsubindex{use-list}@c
@deffnx {Generic Writer} {(setf use-list)} (object)
@anchor{❨363❩}@c
@genericsubindex{(setf use-list)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {use-list} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨362❩}@c
@methodsubindex{use-list}@c
@deffnx {Writer Method} {(setf use-list)} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨364❩}@c
@methodsubindex{(setf use-list)}@c
The definitions use-list for this definition's package.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@item Target Slot
@ref{❨212❩, , @t{use-list}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {used-by-list} (object)
@anchor{❨308❩}@c
@genericsubindex{used-by-list}@c
@deffnx {Generic Writer} {(setf used-by-list)} (object)
@anchor{❨310❩}@c
@genericsubindex{(setf used-by-list)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {used-by-list} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨309❩}@c
@methodsubindex{used-by-list}@c
@deffnx {Writer Method} {(setf used-by-list)} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨311❩}@c
@methodsubindex{(setf used-by-list)}@c
The definitions used-by-list for this definition's package.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@item Target Slot
@ref{❨213❩, , @t{used-by-list}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {value-type} (definition)
@anchor{❨334❩}@c
@genericsubindex{value-type}@c
Return slot DEFINITION's value type.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Methods
@deffn {Method} {value-type} ((definition @ref{❨127❩, , @t{typed-structure-slot-definition}}))
@anchor{❨335❩}@c
@methodsubindex{value-type}@c
Return typed structure slot DEFINITION's value type.
@table @strong
@end table
@end deffn
@deffn {Method} {value-type} ((definition @ref{❨128❩, , @t{clos-slot-definition}}))
@anchor{❨336❩}@c
@methodsubindex{value-type}@c
Return CLOS slot DEFINITION's value type.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {writers} (object)
@anchor{❨445❩}@c
@genericsubindex{writers}@c
@deffnx {Generic Writer} {(setf writers)} (object)
@anchor{❨447❩}@c
@genericsubindex{(setf writers)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {writers} ((slot-definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨446❩}@c
@methodsubindex{writers}@c
@deffnx {Writer Method} {(setf writers)} ((slot-definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨448❩}@c
@methodsubindex{(setf writers)}@c
The list of definitions for this definition's slot writers.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Target Slot
@ref{❨163❩, , @t{writers}}.
@end table
@end deffn
@end table
@end deffn

@node Public standalone methods, Public classes, Public generic functions, Public Interface
@subsection Standalone methods
@deffn {Method} {initialize-instance} :before ((definition @ref{❨84❩, , @t{system-file-definition}}) &key system)
@anchor{❨839❩}@c
@methodsubindex{initialize-instance}@c
Create and store a fake ASDF comoponent representing the system file.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((definition @ref{❨130❩, , @t{component-definition}}) &key)
@anchor{❨840❩}@c
@methodsubindex{initialize-instance}@c
Compute component DEFINITION's location.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((definition @ref{❨146❩, , @t{system-definition}}) &key)
@anchor{❨841❩}@c
@methodsubindex{initialize-instance}@c
Extract author and maintainer contacts.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((definition @ref{❨177❩, , @t{clos-classoid-mixin}}) &key packages pathnames)
@anchor{❨843❩}@c
@methodsubindex{initialize-instance}@c
Compute CLOS classoid DEFINITION's slot definitions.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((definition @ref{❨208❩, , @t{package-definition}}) &key)
@anchor{❨844❩}@c
@methodsubindex{initialize-instance}@c
Compute DEFINITION's package lists of external and internal symbols.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((definition @ref{❨337❩, , @t{classoid-definition}}) &key packages pathnames)
@anchor{❨846❩}@c
@methodsubindex{initialize-instance}@c
Compute classoid DEFINITION's foreign status.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {initialize-instance} :after ((definition @ref{❨431❩, , @t{typed-structure-definition}}) &key packages pathnames)
@anchor{❨850❩}@c
@methodsubindex{initialize-instance}@c
Compute typed structure DEFINITION's type@comma{} element type@comma{} and slots.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {make-instance} ((class @ref{❨600❩, , @t{abstract-class}}) &rest initargs)
@anchor{❨855❩}@c
@methodsubindex{make-instance}@c
@table @strong
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((report @ref{❨275❩, , @t{report}}) stream)
@anchor{❨845❩}@c
@methodsubindex{print-object}@c
Show REPORT's library name.
@table @strong
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((definition @ref{❨385❩, , @t{definition}}) stream)
@anchor{❨847❩}@c
@methodsubindex{print-object}@c
Show DEFINITION's name.
@table @strong
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@end table
@end deffn
@deffn {Method} {validate-superclass} ((class @t{standard-class}) (superclass @ref{❨600❩, , @t{abstract-class}}))
@anchor{❨853❩}@c
@methodsubindex{validate-superclass}@c
@table @strong
@item Package
@t{sb-mop}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {validate-superclass} ((class @ref{❨600❩, , @t{abstract-class}}) (superclass @t{standard-class}))
@anchor{❨854❩}@c
@methodsubindex{validate-superclass}@c
@table @strong
@item Package
@t{sb-mop}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deffn

@node Public classes, Public types, Public standalone methods, Public Interface
@subsection Classes
@deftp {Class} {abstract-class}
@anchor{❨600❩}@c
@classsubindex{abstract-class}@c
The Abstract Class meta-class.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@item Direct superclasses
@t{standard-class}.
@item Direct methods
@itemize @bullet
@item
@ref{❨855❩, , @t{make-instance}}.
@item
@ref{❨853❩, , @t{validate-superclass}}.
@item
@ref{❨854❩, , @t{validate-superclass}}.
@end itemize
@end table
@end deftp
@deftp {Class} {accessor-method-definition}
@anchor{❨135❩}@c
@classsubindex{accessor-method-definition}@c
Abstract root class for accessor methods.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨229❩, , @t{accessor-mixin}}.
@item
@ref{❨85❩, , @t{method-definition}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{❨97❩, , @t{reader-method-definition}}.
@item
@ref{❨268❩, , @t{writer-method-definition}}.
@end itemize
@end table
@end deftp
@deftp {Class} {accessor-mixin}
@anchor{❨229❩}@c
@classsubindex{accessor-mixin}@c
Mixin class for accessor definitions.@*
An accessor is a funcoid which reads or writes a target slot in a classoid.
More specifically@comma{} these are ordinary functions for structure slots@comma{}
and methods for classes or conditions slots.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨135❩, , @t{accessor-method-definition}}.
@item
@ref{❨265❩, , @t{ordinary-accessor-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨816❩, , @t{document}}.
@item
@ref{❨248❩, , @t{target-slot}}.
@end itemize
@item Direct slots
@defvr {Slot} {target-slot}
@anchor{❨230❩}@c
@slotsubindex{target-slot}@c
The target slot definition for this definition's accessor.
@table @strong
@item Initargs
@t{:target-slot}
@item Readers
@ref{❨248❩, , @t{target-slot}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {alias-definition}
@anchor{❨215❩}@c
@classsubindex{alias-definition}@c
Abstract root class for alias definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨218❩, , @t{symbol-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨95❩, , @t{compiler-macro-alias-definition}}.
@item
@ref{❨263❩, , @t{function-alias-definition}}.
@item
@ref{❨416❩, , @t{macro-alias-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨651❩, , @t{category-name}}.
@item
@ref{❨793❩, , @t{document}}.
@item
@ref{❨728❩, , @t{index-command-name}}.
@item
@ref{❨467❩, , @t{lambda-list}}.
@item
@ref{❨260❩, , @t{name}}.
@item
@ref{❨333❩, , @t{(setf referee)}}.
@item
@ref{❨331❩, , @t{referee}}.
@item
@ref{❨366❩, , @t{setfp}}.
@item
@ref{❨578❩, , @t{source-pathname}}.
@end itemize
@item Direct slots
@defvr {Slot} {setf}
@anchor{❨216❩}@c
@slotsubindex{setf}@c
Whether this is a setf alias definition.
@table @strong
@item Package
@t{common-lisp}.
@item Initargs
@t{:setf}
@item Readers
@ref{❨366❩, , @t{setfp}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {referee}
@anchor{❨217❩}@c
@slotsubindex{referee}@c
The original definition this definition aliases.
@table @strong
@item Readers
@ref{❨331❩, , @t{referee}}.
@item Writers
@ref{❨333❩, , @t{(setf referee)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {c-file-definition}
@anchor{❨287❩}@c
@classsubindex{c-file-definition}@c
The class of ASDF C file definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨110❩, , @t{source-file-definition}}.
@end table
@end deftp
@deftp {Class} {cl-source-file.asd}
@anchor{❨411❩}@c
@classsubindex{cl-source-file.asd}@c
A fake ASDF Lisp file component class for system files.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@t{cl-source-file}.
@item Direct slots
@defvr {Slot} {type}
@anchor{❨412❩}@c
@slotsubindex{type}@c
@table @strong
@item Package
@t{common-lisp}.
@item Initform
@t{"asd"}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {class-definition}
@anchor{❨417❩}@c
@classsubindex{class-definition}@c
The class for class definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨337❩, , @t{classoid-definition}}.
@item
@ref{❨177❩, , @t{clos-classoid-mixin}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨653❩, , @t{category-name}}.
@item
@ref{❨486❩, , @t{definition-class}}.
@item
@ref{❨461❩, , @t{(setf direct-subclasses)}}.
@item
@ref{❨459❩, , @t{direct-subclasses}}.
@item
@ref{❨228❩, , @t{(setf direct-superclasses)}}.
@item
@ref{❨226❩, , @t{direct-superclasses}}.
@item
@ref{❨730❩, , @t{index-command-name}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨418❩}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{❨486❩, , @t{definition-class}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {direct-superclassoids}
@anchor{❨419❩}@c
@slotsubindex{direct-superclassoids}@c
@table @strong
@item Readers
@ref{❨226❩, , @t{direct-superclasses}}.
@item Writers
@ref{❨228❩, , @t{(setf direct-superclasses)}}.
@end table
@end defvr
@defvr {Slot} {direct-subclassoids}
@anchor{❨420❩}@c
@slotsubindex{direct-subclassoids}@c
@table @strong
@item Readers
@ref{❨459❩, , @t{direct-subclasses}}.
@item Writers
@ref{❨461❩, , @t{(setf direct-subclasses)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {classoid-definition}
@anchor{❨337❩}@c
@classsubindex{classoid-definition}@c
Abstract root class for classoid definitions.
These are conditions@comma{} structures@comma{} and classes.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨218❩, , @t{symbol-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨417❩, , @t{class-definition}}.
@item
@ref{❨421❩, , @t{condition-definition}}.
@item
@ref{❨285❩, , @t{structure-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨438❩, , @t{classoid}}.
@item
@ref{❨171❩, , @t{(setf direct-slots)}}.
@item
@ref{❨169❩, , @t{direct-slots}}.
@item
@ref{❨799❩, , @t{document}}.
@item
@ref{❨800❩, , @t{document}}.
@item
@ref{❨801❩, , @t{document}}.
@item
@ref{❨846❩, , @t{initialize-instance}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨338❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:classoid}
@item Readers
@ref{❨438❩, , @t{classoid}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {direct-slots}
@anchor{❨339❩}@c
@slotsubindex{direct-slots}@c
The list of direct slot definitions for this definition's classoid.
@table @strong
@item Readers
@ref{❨169❩, , @t{direct-slots}}.
@item Writers
@ref{❨171❩, , @t{(setf direct-slots)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {clos-classoid-mixin}
@anchor{❨177❩}@c
@classsubindex{clos-classoid-mixin}@c
Mixin for CLOS-based classoids.@*
These are conditions@comma{} ordinary structures@comma{} and classes.@*
All CLOS classoid mixin definitions respond to the following public protocols@comma{}
which see:@*
- `direct-default-initargs'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨417❩, , @t{class-definition}}.
@item
@ref{❨221❩, , @t{clos-structure-definition}}.
@item
@ref{❨421❩, , @t{condition-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨42❩, , @t{(setf direct-methods)}}.
@item
@ref{❨40❩, , @t{direct-methods}}.
@item
@ref{❨61❩, , @t{(setf direct-subclassoids)}}.
@item
@ref{❨59❩, , @t{direct-subclassoids}}.
@item
@ref{❨345❩, , @t{(setf direct-superclassoids)}}.
@item
@ref{❨343❩, , @t{direct-superclassoids}}.
@item
@ref{❨798❩, , @t{document}}.
@item
@ref{❨843❩, , @t{initialize-instance}}.
@item
@ref{❨556❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {direct-superclassoids}
@anchor{❨178❩}@c
@slotsubindex{direct-superclassoids}@c
The list of direct superclassoid definitions for this definition's classoid.
@table @strong
@item Readers
@ref{❨343❩, , @t{direct-superclassoids}}.
@item Writers
@ref{❨345❩, , @t{(setf direct-superclassoids)}}.
@end table
@end defvr
@defvr {Slot} {direct-subclassoids}
@anchor{❨179❩}@c
@slotsubindex{direct-subclassoids}@c
The list of direct subclassoid definitions for this definition's classoid.
@table @strong
@item Readers
@ref{❨59❩, , @t{direct-subclassoids}}.
@item Writers
@ref{❨61❩, , @t{(setf direct-subclassoids)}}.
@end table
@end defvr
@defvr {Slot} {direct-methods}
@anchor{❨180❩}@c
@slotsubindex{direct-methods}@c
The list of direct method definitions for this definition's classoid.
@table @strong
@item Readers
@ref{❨40❩, , @t{direct-methods}}.
@item Writers
@ref{❨42❩, , @t{(setf direct-methods)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {clos-slot-definition}
@anchor{❨128❩}@c
@classsubindex{clos-slot-definition}@c
The class of CLOS slot definitions.@*
All CLOS slot definitions respond to the following public protocols@comma{} which
see:@*
- `allocation'@comma{}@*
- `initform'@comma{}@*
- `initargs'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨159❩, , @t{slot-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨399❩, , @t{docstring}}.
@item
@ref{❨795❩, , @t{document}}.
@item
@ref{❨555❩, , @t{stabilize}}.
@item
@ref{❨336❩, , @t{value-type}}.
@end itemize
@end table
@end deftp
@deftp {Class} {clos-structure-definition}
@anchor{❨221❩}@c
@classsubindex{clos-structure-definition}@c
The class of CLOS structure definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨177❩, , @t{clos-classoid-mixin}}.
@item
@ref{❨285❩, , @t{structure-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨252❩, , @t{(setf direct-substructures)}}.
@item
@ref{❨250❩, , @t{direct-substructures}}.
@item
@ref{❨120❩, , @t{(setf direct-superstructures)}}.
@item
@ref{❨118❩, , @t{direct-superstructures}}.
@end itemize
@item Direct slots
@defvr {Slot} {direct-superclassoids}
@anchor{❨222❩}@c
@slotsubindex{direct-superclassoids}@c
@table @strong
@item Readers
@ref{❨118❩, , @t{direct-superstructures}}.
@item Writers
@ref{❨120❩, , @t{(setf direct-superstructures)}}.
@end table
@end defvr
@defvr {Slot} {direct-subclassoids}
@anchor{❨223❩}@c
@slotsubindex{direct-subclassoids}@c
@table @strong
@item Readers
@ref{❨250❩, , @t{direct-substructures}}.
@item Writers
@ref{❨252❩, , @t{(setf direct-substructures)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {combination-definition}
@anchor{❨203❩}@c
@classsubindex{combination-definition}@c
Root class for method combination definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{funcoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨429❩, , @t{long-combination-definition}}.
@item
@ref{❨231❩, , @t{short-combination-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨659❩, , @t{category-name}}.
@item
@ref{❨202❩, , @t{(setf clients)}}.
@item
@ref{❨200❩, , @t{clients}}.
@item
@ref{❨73❩, , @t{combination}}.
@item
@ref{❨401❩, , @t{docstring}}.
@item
@ref{❨804❩, , @t{document}}.
@item
@ref{❨734❩, , @t{index-command-name}}.
@item
@ref{❨469❩, , @t{lambda-list}}.
@item
@ref{❨580❩, , @t{source-pathname}}.
@item
@ref{❨559❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨204❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:combination}
@item Readers
@ref{❨73❩, , @t{combination}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {clients}
@anchor{❨205❩}@c
@slotsubindex{clients}@c
The list of client definitions for this definition's method combnination.
These are generic functions using this combination.
@table @strong
@item Readers
@ref{❨200❩, , @t{clients}}.
@item Writers
@ref{❨202❩, , @t{(setf clients)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {compiler-macro-alias-definition}
@anchor{❨95❩}@c
@classsubindex{compiler-macro-alias-definition}@c
The class of compiler macro alias definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨215❩, , @t{alias-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨396❩, , @t{docstring}}.
@item
@ref{❨552❩, , @t{stabilize}}.
@end itemize
@end table
@end deftp
@deftp {Class} {compiler-macro-definition}
@anchor{❨390❩}@c
@classsubindex{compiler-macro-definition}@c
The class of compiler macro definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{funcoid-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨668❩, , @t{category-name}}.
@item
@ref{❨435❩, , @t{definition-compiler-macro}}.
@item
@ref{❨739❩, , @t{index-command-name}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨391❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:compiler-macro}
@item Readers
@ref{❨435❩, , @t{definition-compiler-macro}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {component-definition}
@anchor{❨130❩}@c
@classsubindex{component-definition}@c
Abstract root class for ASDF components.@*
All component definitions respond to the following public protocols@comma{} which
see:@*
- `description'@*
- `long-description'@*
- `definition-version'@*
- `if-feature'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨385❩, , @t{definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨347❩, , @t{file-definition}}.
@item
@ref{❨98❩, , @t{module-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨428❩, , @t{component}}.
@item
@ref{❨327❩, , @t{(setf dependencies)}}.
@item
@ref{❨325❩, , @t{dependencies}}.
@item
@ref{❨394❩, , @t{docstring}}.
@item
@ref{❨790❩, , @t{document}}.
@item
@ref{❨791❩, , @t{document}}.
@item
@ref{❨840❩, , @t{initialize-instance}}.
@item
@ref{❨167❩, , @t{(setf location)}}.
@item
@ref{❨165❩, , @t{location}}.
@item
@ref{❨258❩, , @t{name}}.
@item
@ref{❨155❩, , @t{(setf parent)}}.
@item
@ref{❨153❩, , @t{parent}}.
@item
@ref{❨778❩, , @t{safe-name}}.
@item
@ref{❨577❩, , @t{source-pathname}}.
@item
@ref{❨549❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨131❩}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{❨428❩, , @t{component}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {location}
@anchor{❨132❩}@c
@slotsubindex{location}@c
The component's location (a namestring).
@table @strong
@item Readers
@ref{❨165❩, , @t{location}}.
@item Writers
@ref{❨167❩, , @t{(setf location)}}.
@end table
@end defvr
@defvr {Slot} {parent}
@anchor{❨133❩}@c
@slotsubindex{parent}@c
The parent definition for this definition's component.
@table @strong
@item Readers
@ref{❨153❩, , @t{parent}}.
@item Writers
@ref{❨155❩, , @t{(setf parent)}}.
@end table
@end defvr
@defvr {Slot} {dependencies}
@anchor{❨134❩}@c
@slotsubindex{dependencies}@c
The list of dependency definitions for this definition's component.
@table @strong
@item Readers
@ref{❨325❩, , @t{dependencies}}.
@item Writers
@ref{❨327❩, , @t{(setf dependencies)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {condition-definition}
@anchor{❨421❩}@c
@classsubindex{condition-definition}@c
The class of condition definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨337❩, , @t{classoid-definition}}.
@item
@ref{❨177❩, , @t{clos-classoid-mixin}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨654❩, , @t{category-name}}.
@item
@ref{❨488❩, , @t{definition-condition}}.
@item
@ref{❨108❩, , @t{(setf direct-subconditions)}}.
@item
@ref{❨106❩, , @t{direct-subconditions}}.
@item
@ref{❨306❩, , @t{(setf direct-superconditions)}}.
@item
@ref{❨304❩, , @t{direct-superconditions}}.
@item
@ref{❨731❩, , @t{index-command-name}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨422❩}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{❨488❩, , @t{definition-condition}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {direct-superclassoids}
@anchor{❨423❩}@c
@slotsubindex{direct-superclassoids}@c
@table @strong
@item Readers
@ref{❨304❩, , @t{direct-superconditions}}.
@item Writers
@ref{❨306❩, , @t{(setf direct-superconditions)}}.
@end table
@end defvr
@defvr {Slot} {direct-subclassoids}
@anchor{❨424❩}@c
@slotsubindex{direct-subclassoids}@c
@table @strong
@item Readers
@ref{❨106❩, , @t{direct-subconditions}}.
@item Writers
@ref{❨108❩, , @t{(setf direct-subconditions)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {constant-definition}
@anchor{❨392❩}@c
@classsubindex{constant-definition}@c
The class of constant definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨129❩, , @t{variable-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨672❩, , @t{category-name}}.
@item
@ref{❨743❩, , @t{index-command-name}}.
@item
@ref{❨585❩, , @t{source-pathname}}.
@end itemize
@end table
@end deftp
@deftp {Class} {definition}
@anchor{❨385❩}@c
@classsubindex{definition}@c
Abstract root class for all definitions.@*
All definitions respond to the following public protocols@comma{} which see:
- `name'@comma{}@*
- `docstring'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨130❩, , @t{component-definition}}.
@item
@ref{❨208❩, , @t{package-definition}}.
@item
@ref{❨218❩, , @t{symbol-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨243❩, , @t{(setf foreignp)}}.
@item
@ref{❨241❩, , @t{foreignp}}.
@item
@ref{❨321❩, , @t{object}}.
@item
@ref{❨847❩, , @t{print-object}}.
@item
@ref{❨782❩, , @t{safe-name}}.
@item
@ref{❨452❩, , @t{(setf source-file)}}.
@item
@ref{❨450❩, , @t{source-file}}.
@item
@ref{❨565❩, , @t{stabilize}}.
@item
@ref{❨175❩, , @t{(setf uid)}}.
@item
@ref{❨173❩, , @t{uid}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨386❩}@c
@slotsubindex{object}@c
The corresponding Lisp object@comma{} or NIL.@*
Only constants@comma{} special variables@comma{} symbol macros@comma{} and aliases lack such an
object.
@table @strong
@item Initargs
@t{:object}
@item Readers
@ref{❨321❩, , @t{object}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {uid}
@anchor{❨387❩}@c
@slotsubindex{uid}@c
This definition's UID.
@table @strong
@item Readers
@ref{❨173❩, , @t{uid}}.
@item Writers
@ref{❨175❩, , @t{(setf uid)}}.
@end table
@end defvr
@defvr {Slot} {source-file}
@anchor{❨388❩}@c
@slotsubindex{source-file}@c
The source file definition for this definition's object.
@table @strong
@item Readers
@ref{❨450❩, , @t{source-file}}.
@item Writers
@ref{❨452❩, , @t{(setf source-file)}}.
@end table
@end defvr
@defvr {Slot} {foreign}
@anchor{❨389❩}@c
@slotsubindex{foreign}@c
Whether this definition is foreign.
@table @strong
@item Initargs
@t{:foreign}
@item Readers
@ref{❨241❩, , @t{foreignp}}.
@item Writers
@ref{❨243❩, , @t{(setf foreignp)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {doc-file-definition}
@anchor{❨295❩}@c
@classsubindex{doc-file-definition}@c
The class of ASDF doc file definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨156❩, , @t{static-file-definition}}.
@item Direct subclasses
@ref{❨224❩, , @t{html-file-definition}}.
@end table
@end deftp
@deftp {Class} {expander-definition}
@anchor{❨123❩}@c
@classsubindex{expander-definition}@c
Abstract root class for setf expander definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{funcoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨43❩, , @t{long-expander-definition}}.
@item
@ref{❨479❩, , @t{short-expander-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨666❩, , @t{category-name}}.
@item
@ref{❨402❩, , @t{docstring}}.
@item
@ref{❨812❩, , @t{document}}.
@item
@ref{❨245❩, , @t{expander}}.
@item
@ref{❨737❩, , @t{index-command-name}}.
@item
@ref{❨581❩, , @t{source-pathname}}.
@item
@ref{❨562❩, , @t{stabilize}}.
@item
@ref{❨360❩, , @t{(setf standalone-reader)}}.
@item
@ref{❨358❩, , @t{standalone-reader}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨124❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:expander}
@item Readers
@ref{❨245❩, , @t{expander}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {setf}
@anchor{❨125❩}@c
@slotsubindex{setf}@c
@table @strong
@item Package
@t{common-lisp}.
@item Initform
@t{t}
@end table
@end defvr
@defvr {Slot} {standalone-reader}
@anchor{❨126❩}@c
@slotsubindex{standalone-reader}@c
A standalone reader definition for this definition's expander@comma{} or NIL.@*
If it exists@comma{} it's a definition for a function or macro with the same
signature as that of the expander's access-fn. Note that the Common Lisp
standard does not impose any actual relation between the setf expander and its
access-fn. In fact@comma{} the access-fn may not even exist at all. However@comma{} if it
does@comma{} it is very likely that it is a reader for the place updated by this setf
expander.
@table @strong
@item Readers
@ref{❨358❩, , @t{standalone-reader}}.
@item Writers
@ref{❨360❩, , @t{(setf standalone-reader)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {file-definition}
@anchor{❨347❩}@c
@classsubindex{file-definition}@c
The class of ASDF file definitions.@*
All file definitions respond to the following public protocols@comma{} which see:
- `extension'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨130❩, , @t{component-definition}}.
@item Direct subclasses
@ref{❨110❩, , @t{source-file-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨649❩, , @t{category-name}}.
@item
@ref{❨415❩, , @t{file}}.
@item
@ref{❨726❩, , @t{index-command-name}}.
@item
@ref{❨777❩, , @t{safe-name}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨348❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:file}
@item Readers
@ref{❨415❩, , @t{file}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {funcoid-definition}
@anchor{❨291❩}@c
@classsubindex{funcoid-definition}@c
Abstract root class for functional definitions.@*
These are (compiler) macros@comma{} (generic) functions@comma{} methods@comma{} setf expanders@comma{}
method combinations@comma{} and types.@*
All funcoid definitions respond to the following public protocols@comma{} which see:
- `lambda-list'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨218❩, , @t{symbol-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨203❩, , @t{combination-definition}}.
@item
@ref{❨390❩, , @t{compiler-macro-definition}}.
@item
@ref{❨123❩, , @t{expander-definition}}.
@item
@ref{❨85❩, , @t{method-definition}}.
@item
@ref{❨237❩, , @t{setfable-funcoid-definition}}.
@item
@ref{❨322❩, , @t{type-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨820❩, , @t{document}}.
@item
@ref{❨821❩, , @t{document}}.
@item
@ref{❨478❩, , @t{funcoid}}.
@item
@ref{❨473❩, , @t{lambda-list}}.
@item
@ref{❨474❩, , @t{lambda-list}}.
@item
@ref{❨261❩, , @t{name}}.
@item
@ref{❨367❩, , @t{setfp}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨292❩}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{❨478❩, , @t{funcoid}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {setf}
@anchor{❨293❩}@c
@slotsubindex{setf}@c
Whether this is a setf definition.
@table @strong
@item Package
@t{common-lisp}.
@item Initargs
@t{:setf}
@item Readers
@ref{❨367❩, , @t{setfp}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {function-alias-definition}
@anchor{❨263❩}@c
@classsubindex{function-alias-definition}@c
The class of non-setf function alias definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨215❩, , @t{alias-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨395❩, , @t{docstring}}.
@item
@ref{❨551❩, , @t{stabilize}}.
@end itemize
@end table
@end deftp
@deftp {Class} {function-definition}
@anchor{❨270❩}@c
@classsubindex{function-definition}@c
Abstract root class for functions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨237❩, , @t{setfable-funcoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨45❩, , @t{generic-function-definition}}.
@item
@ref{❨436❩, , @t{ordinary-function-definition}}.
@end itemize
@item Direct methods
@ref{❨290❩, , @t{definition-function}}.
@item Direct slots
@defvr {Slot} {object}
@anchor{❨271❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:function}
@item Readers
@ref{❨290❩, , @t{definition-function}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {generic-accessor-definition}
@anchor{❨274❩}@c
@classsubindex{generic-accessor-definition}@c
Abstract root class for generic accessor functions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨45❩, , @t{generic-function-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨56❩, , @t{generic-reader-definition}}.
@item
@ref{❨346❩, , @t{generic-writer-definition}}.
@end itemize
@end table
@end deftp
@deftp {Class} {generic-function-definition}
@anchor{❨45❩}@c
@classsubindex{generic-function-definition}@c
The class of generic function definitions.@*
All generic function definitions respond to the following public protocols@comma{}
which see:@*
- `combination-options'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨270❩, , @t{function-definition}}.
@item Direct subclasses
@ref{❨274❩, , @t{generic-accessor-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨662❩, , @t{category-name}}.
@item
@ref{❨76❩, , @t{(setf combination)}}.
@item
@ref{❨74❩, , @t{combination}}.
@item
@ref{❨807❩, , @t{document}}.
@item
@ref{❨808❩, , @t{document}}.
@item
@ref{❨329❩, , @t{generic}}.
@item
@ref{❨735❩, , @t{index-command-name}}.
@item
@ref{❨83❩, , @t{(setf methods)}}.
@item
@ref{❨81❩, , @t{methods}}.
@item
@ref{❨560❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨46❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:generic}
@item Readers
@ref{❨329❩, , @t{generic}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {methods}
@anchor{❨47❩}@c
@slotsubindex{methods}@c
The list of method definitions for this definition's generic function.
@table @strong
@item Readers
@ref{❨81❩, , @t{methods}}.
@item Writers
@ref{❨83❩, , @t{(setf methods)}}.
@end table
@end defvr
@defvr {Slot} {combination}
@anchor{❨48❩}@c
@slotsubindex{combination}@c
The method combination definition for this definition's generic function.
@table @strong
@item Readers
@ref{❨74❩, , @t{combination}}.
@item Writers
@ref{❨76❩, , @t{(setf combination)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {generic-reader-definition}
@anchor{❨56❩}@c
@classsubindex{generic-reader-definition}@c
The class of generic reader function definitions.@*
A generic function is considered to be a reader function when all its mehtods
are reader methods.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨274❩, , @t{generic-accessor-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨661❩, , @t{category-name}}.
@item
@ref{❨806❩, , @t{document}}.
@end itemize
@end table
@end deftp
@deftp {Class} {generic-writer-definition}
@anchor{❨346❩}@c
@classsubindex{generic-writer-definition}@c
The class of generic writer function definitions.@*
A generic function is considered to be a writer function when all its mehtods
are writer methods.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨274❩, , @t{generic-accessor-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨660❩, , @t{category-name}}.
@item
@ref{❨805❩, , @t{document}}.
@end itemize
@end table
@end deftp
@deftp {Class} {html-file-definition}
@anchor{❨224❩}@c
@classsubindex{html-file-definition}@c
The class of ASDF HTML file definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨295❩, , @t{doc-file-definition}}.
@end table
@end deftp
@deftp {Class} {java-file-definition}
@anchor{❨93❩}@c
@classsubindex{java-file-definition}@c
The class of ASDF Java file definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨110❩, , @t{source-file-definition}}.
@end table
@end deftp
@deftp {Class} {lisp-file-definition}
@anchor{❨272❩}@c
@classsubindex{lisp-file-definition}@c
The class of ASDF Lisp file definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨110❩, , @t{source-file-definition}}.
@item Direct subclasses
@ref{❨84❩, , @t{system-file-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨355❩, , @t{(setf definitions)}}.
@item
@ref{❨351❩, , @t{definitions}}.
@item
@ref{❨789❩, , @t{document}}.
@item
@ref{❨548❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {definitions}
@anchor{❨273❩}@c
@slotsubindex{definitions}@c
The list of definitions for this definition's file.
@table @strong
@item Readers
@ref{❨351❩, , @t{definitions}}.
@item Writers
@ref{❨355❩, , @t{(setf definitions)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {long-combination-definition}
@anchor{❨429❩}@c
@classsubindex{long-combination-definition}@c
Class for long method combination definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨203❩, , @t{combination-definition}}.
@end table
@end deftp
@deftp {Class} {long-expander-definition}
@anchor{❨43❩}@c
@classsubindex{long-expander-definition}@c
The class of long form setf expanders definitions.@*
This class is shared by expanders created with either the long form of
DEFSETF@comma{} or DEFINE-SETF-EXPANDER.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨123❩, , @t{expander-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨813❩, , @t{document}}.
@item
@ref{❨470❩, , @t{lambda-list}}.
@end itemize
@end table
@end deftp
@deftp {Class} {macro-alias-definition}
@anchor{❨416❩}@c
@classsubindex{macro-alias-definition}@c
The class of macro alias definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨215❩, , @t{alias-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨397❩, , @t{docstring}}.
@item
@ref{❨553❩, , @t{stabilize}}.
@end itemize
@end table
@end deftp
@deftp {Class} {macro-definition}
@anchor{❨266❩}@c
@classsubindex{macro-definition}@c
The class of macro definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨237❩, , @t{setfable-funcoid-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨669❩, , @t{category-name}}.
@item
@ref{❨740❩, , @t{index-command-name}}.
@item
@ref{❨341❩, , @t{macro}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨267❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:macro}
@item Readers
@ref{❨341❩, , @t{macro}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {method-definition}
@anchor{❨85❩}@c
@classsubindex{method-definition}@c
Abstract root class for method definitions.@*
All method definitions respond to the following public protocols@comma{} which see:
- `qualifiers'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{funcoid-definition}}.
@item Direct subclasses
@ref{❨135❩, , @t{accessor-method-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨658❩, , @t{category-name}}.
@item
@ref{❨51❩, , @t{definition-method}}.
@item
@ref{❨802❩, , @t{document}}.
@item
@ref{❨733❩, , @t{index-command-name}}.
@item
@ref{❨468❩, , @t{lambda-list}}.
@item
@ref{❨381❩, , @t{(setf owner)}}.
@item
@ref{❨378❩, , @t{owner}}.
@item
@ref{❨780❩, , @t{safe-name}}.
@item
@ref{❨184❩, , @t{(setf specializers)}}.
@item
@ref{❨182❩, , @t{specializers}}.
@item
@ref{❨557❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨86❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:method}
@item Readers
@ref{❨51❩, , @t{definition-method}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {owner}
@anchor{❨87❩}@c
@slotsubindex{owner}@c
The generic function definition for this definition's method.
@table @strong
@item Readers
@ref{❨378❩, , @t{owner}}.
@item Writers
@ref{❨381❩, , @t{(setf owner)}}.
@end table
@end defvr
@defvr {Slot} {specializers}
@anchor{❨88❩}@c
@slotsubindex{specializers}@c
The specializers of this definition's method.@*
This is a list of either class definitions (for regular specializers)@comma{}
or raw EQL specializers.
@table @strong
@item Readers
@ref{❨182❩, , @t{specializers}}.
@item Writers
@ref{❨184❩, , @t{(setf specializers)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {module-definition}
@anchor{❨98❩}@c
@classsubindex{module-definition}@c
The class of ASDF module definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨130❩, , @t{component-definition}}.
@item Direct subclasses
@ref{❨146❩, , @t{system-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨648❩, , @t{category-name}}.
@item
@ref{❨484❩, , @t{(setf children)}}.
@item
@ref{❨482❩, , @t{children}}.
@item
@ref{❨788❩, , @t{document}}.
@item
@ref{❨725❩, , @t{index-command-name}}.
@item
@ref{❨158❩, , @t{module}}.
@item
@ref{❨547❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨99❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:module}
@item Readers
@ref{❨158❩, , @t{module}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {children}
@anchor{❨100❩}@c
@slotsubindex{children}@c
The list of child definitions for this definition's module.
@table @strong
@item Readers
@ref{❨482❩, , @t{children}}.
@item Writers
@ref{❨484❩, , @t{(setf children)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {ordinary-accessor-definition}
@anchor{❨265❩}@c
@classsubindex{ordinary-accessor-definition}@c
Abstract root class for ordinary accessor functions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨229❩, , @t{accessor-mixin}}.
@item
@ref{❨436❩, , @t{ordinary-function-definition}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{❨186❩, , @t{ordinary-reader-definition}}.
@item
@ref{❨193❩, , @t{ordinary-writer-definition}}.
@end itemize
@end table
@end deftp
@deftp {Class} {ordinary-function-definition}
@anchor{❨436❩}@c
@classsubindex{ordinary-function-definition}@c
The class of ordinary functions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨270❩, , @t{function-definition}}.
@item Direct subclasses
@ref{❨265❩, , @t{ordinary-accessor-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨665❩, , @t{category-name}}.
@item
@ref{❨736❩, , @t{index-command-name}}.
@end itemize
@end table
@end deftp
@deftp {Class} {ordinary-reader-definition}
@anchor{❨186❩}@c
@classsubindex{ordinary-reader-definition}@c
The class of ordinary reader definitions.@*
An ordinary reader is an ordinary function that reads a slot in a
structure.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨265❩, , @t{ordinary-accessor-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨664❩, , @t{category-name}}.
@item
@ref{❨810❩, , @t{document}}.
@end itemize
@end table
@end deftp
@deftp {Class} {ordinary-writer-definition}
@anchor{❨193❩}@c
@classsubindex{ordinary-writer-definition}@c
The class of ordinary writer definitions.@*
An ordinary writer is an ordinary function that writes a slot in a
structure.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨265❩, , @t{ordinary-accessor-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨663❩, , @t{category-name}}.
@item
@ref{❨809❩, , @t{document}}.
@end itemize
@item Direct slots
@defvr {Slot} {setf}
@anchor{❨194❩}@c
@slotsubindex{setf}@c
@table @strong
@item Package
@t{common-lisp}.
@item Initform
@t{t}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {package-definition}
@anchor{❨208❩}@c
@classsubindex{package-definition}@c
The class of package definitions.@*
All package definitions respond to the following public protocols@comma{} which
see:@*
- `nicknames'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@item Direct superclasses
@ref{❨385❩, , @t{definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨650❩, , @t{category-name}}.
@item
@ref{❨188❩, , @t{definition-package}}.
@item
@ref{❨356❩, , @t{(setf definitions)}}.
@item
@ref{❨352❩, , @t{definitions}}.
@item
@ref{❨792❩, , @t{document}}.
@item
@ref{❨498❩, , @t{(setf external-symbols)}}.
@item
@ref{❨496❩, , @t{external-symbols}}.
@item
@ref{❨727❩, , @t{index-command-name}}.
@item
@ref{❨844❩, , @t{initialize-instance}}.
@item
@ref{❨537❩, , @t{(setf internal-symbols)}}.
@item
@ref{❨535❩, , @t{internal-symbols}}.
@item
@ref{❨259❩, , @t{name}}.
@item
@ref{❨383❩, , @t{private-definitions}}.
@item
@ref{❨297❩, , @t{public-definitions}}.
@item
@ref{❨550❩, , @t{stabilize}}.
@item
@ref{❨364❩, , @t{(setf use-list)}}.
@item
@ref{❨362❩, , @t{use-list}}.
@item
@ref{❨311❩, , @t{(setf used-by-list)}}.
@item
@ref{❨309❩, , @t{used-by-list}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨209❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:package}
@item Readers
@ref{❨188❩, , @t{definition-package}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {external-symbols}
@anchor{❨210❩}@c
@slotsubindex{external-symbols}@c
The list of corresponding external symbols.
@table @strong
@item Readers
@ref{❨496❩, , @t{external-symbols}}.
@item Writers
@ref{❨498❩, , @t{(setf external-symbols)}}.
@end table
@end defvr
@defvr {Slot} {internal-symbols}
@anchor{❨211❩}@c
@slotsubindex{internal-symbols}@c
The list of corresponding internal symbols.
@table @strong
@item Readers
@ref{❨535❩, , @t{internal-symbols}}.
@item Writers
@ref{❨537❩, , @t{(setf internal-symbols)}}.
@end table
@end defvr
@defvr {Slot} {use-list}
@anchor{❨212❩}@c
@slotsubindex{use-list}@c
The definitions use-list for this definition's package.
@table @strong
@item Readers
@ref{❨362❩, , @t{use-list}}.
@item Writers
@ref{❨364❩, , @t{(setf use-list)}}.
@end table
@end defvr
@defvr {Slot} {used-by-list}
@anchor{❨213❩}@c
@slotsubindex{used-by-list}@c
The definitions used-by-list for this definition's package.
@table @strong
@item Readers
@ref{❨309❩, , @t{used-by-list}}.
@item Writers
@ref{❨311❩, , @t{(setf used-by-list)}}.
@end table
@end defvr
@defvr {Slot} {definitions}
@anchor{❨214❩}@c
@slotsubindex{definitions}@c
The list of corresponding definitions.
@table @strong
@item Readers
@ref{❨352❩, , @t{definitions}}.
@item Writers
@ref{❨356❩, , @t{(setf definitions)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {reader-method-definition}
@anchor{❨97❩}@c
@classsubindex{reader-method-definition}@c
The class of reader method definitions.@*
A reader method is a method that reads a slot in a class or condition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨135❩, , @t{accessor-method-definition}}.
@item Direct methods
@ref{❨657❩, , @t{category-name}}.
@end table
@end deftp
@deftp {Class} {report}
@anchor{❨275❩}@c
@classsubindex{report}@c
The Report class.@*
This is the class holding all extracted documentation information.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨256❩, , @t{(setf conclusion)}}.
@item
@ref{❨254❩, , @t{conclusion}}.
@item
@ref{❨69❩, , @t{(setf contacts)}}.
@item
@ref{❨67❩, , @t{contacts}}.
@item
@ref{❨318❩, , @t{(setf copyright-years)}}.
@item
@ref{❨316❩, , @t{copyright-years}}.
@item
@ref{❨354❩, , @t{(setf definitions)}}.
@item
@ref{❨350❩, , @t{definitions}}.
@item
@ref{❨139❩, , @t{(setf introduction)}}.
@item
@ref{❨137❩, , @t{introduction}}.
@item
@ref{❨410❩, , @t{(setf library-name)}}.
@item
@ref{❨408❩, , @t{library-name}}.
@item
@ref{❨371❩, , @t{(setf library-version)}}.
@item
@ref{❨369❩, , @t{library-version}}.
@item
@ref{❨375❩, , @t{(setf license)}}.
@item
@ref{❨373❩, , @t{license}}.
@item
@ref{❨845❩, , @t{print-object}}.
@item
@ref{❨457❩, , @t{(setf tagline)}}.
@item
@ref{❨455❩, , @t{tagline}}.
@end itemize
@item Direct slots
@defvr {Slot} {library-name}
@anchor{❨276❩}@c
@slotsubindex{library-name}@c
The library's name.
@table @strong
@item Readers
@ref{❨408❩, , @t{library-name}}.
@item Writers
@ref{❨410❩, , @t{(setf library-name)}}.
@end table
@end defvr
@defvr {Slot} {tagline}
@anchor{❨277❩}@c
@slotsubindex{tagline}@c
The reference manual's tagline.
@table @strong
@item Readers
@ref{❨455❩, , @t{tagline}}.
@item Writers
@ref{❨457❩, , @t{(setf tagline)}}.
@end table
@end defvr
@defvr {Slot} {library-version}
@anchor{❨278❩}@c
@slotsubindex{library-version}@c
The library's version.
@table @strong
@item Readers
@ref{❨369❩, , @t{library-version}}.
@item Writers
@ref{❨371❩, , @t{(setf library-version)}}.
@end table
@end defvr
@defvr {Slot} {contacts}
@anchor{❨279❩}@c
@slotsubindex{contacts}@c
The list of contacts for the library.@*
Each element is of the form (NAME . EMAIL) where both NAME and EMAIL are
strings or NIL@comma{} and cannot be null at the same time.
@table @strong
@item Readers
@ref{❨67❩, , @t{contacts}}.
@item Writers
@ref{❨69❩, , @t{(setf contacts)}}.
@end table
@end defvr
@defvr {Slot} {copyright-years}
@anchor{❨280❩}@c
@slotsubindex{copyright-years}@c
A copyright years string.
@table @strong
@item Readers
@ref{❨316❩, , @t{copyright-years}}.
@item Writers
@ref{❨318❩, , @t{(setf copyright-years)}}.
@end table
@end defvr
@defvr {Slot} {license}
@anchor{❨281❩}@c
@slotsubindex{license}@c
The library's license.
@table @strong
@item Readers
@ref{❨373❩, , @t{license}}.
@item Writers
@ref{❨375❩, , @t{(setf license)}}.
@end table
@end defvr
@defvr {Slot} {introduction}
@anchor{❨282❩}@c
@slotsubindex{introduction}@c
Contents for an introduction chapter.
@table @strong
@item Readers
@ref{❨137❩, , @t{introduction}}.
@item Writers
@ref{❨139❩, , @t{(setf introduction)}}.
@end table
@end defvr
@defvr {Slot} {conclusion}
@anchor{❨283❩}@c
@slotsubindex{conclusion}@c
Contents for a conclusion chapter.
@table @strong
@item Readers
@ref{❨254❩, , @t{conclusion}}.
@item Writers
@ref{❨256❩, , @t{(setf conclusion)}}.
@end table
@end defvr
@defvr {Slot} {definitions}
@anchor{❨284❩}@c
@slotsubindex{definitions}@c
The list of definitions.
@table @strong
@item Readers
@ref{❨350❩, , @t{definitions}}.
@item Writers
@ref{❨354❩, , @t{(setf definitions)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {setfable-funcoid-definition}
@anchor{❨237❩}@c
@classsubindex{setfable-funcoid-definition}@c
Abstract root class for setfable funcoids.@*
These are (generic) functions and macros. A funcoid is setfable when it may be
related to one or more setf expanders. There are two kinds of relation to a
setf expander: 1. the funcoid' signature is the same as that of an expander's
access-fn@comma{} and 2. a short form setf expander expands to it (i.e.@comma{} it has this
funcoid as its update-fn).
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{funcoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨270❩, , @t{function-definition}}.
@item
@ref{❨266❩, , @t{macro-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨817❩, , @t{document}}.
@item
@ref{❨818❩, , @t{document}}.
@item
@ref{❨819❩, , @t{document}}.
@item
@ref{❨444❩, , @t{(setf expander-for)}}.
@item
@ref{❨442❩, , @t{expander-for}}.
@item
@ref{❨465❩, , @t{(setf expanders-to)}}.
@item
@ref{❨463❩, , @t{expanders-to}}.
@item
@ref{❨563❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {expander-for}
@anchor{❨238❩}@c
@slotsubindex{expander-for}@c
A setf expander definition for this funcoid@comma{} or NIL.@*
This is the definition of a setf expander that expands forms identical to this
funcoid's signature. There can be only one. Note that the Common Lisp standard
does not impose any actual relation between the setf expander and its
access-fn. In fact@comma{} the access-fn may not even exist at all. However@comma{} if it
does@comma{} it is very likely that it is a reader for the place updated by this setf
expander.
@table @strong
@item Readers
@ref{❨442❩, , @t{expander-for}}.
@item Writers
@ref{❨444❩, , @t{(setf expander-for)}}.
@end table
@end defvr
@defvr {Slot} {expanders-to}
@anchor{❨239❩}@c
@slotsubindex{expanders-to}@c
The list of setf expander definitions to this funcoid.@*
This is a list of definitions for short form setf expanders that have this
funcoid as their update-fn. There might be more than one.
@table @strong
@item Readers
@ref{❨463❩, , @t{expanders-to}}.
@item Writers
@ref{❨465❩, , @t{(setf expanders-to)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {short-combination-definition}
@anchor{❨231❩}@c
@classsubindex{short-combination-definition}@c
The class of short method combination definitions.@*
All short method combination definitions respond to the following public
protocols@comma{} which see:@*
- `identity-with-one-argument'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨203❩, , @t{combination-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨803❩, , @t{document}}.
@item
@ref{❨558❩, , @t{stabilize}}.
@item
@ref{❨192❩, , @t{(setf standalone-combinator)}}.
@item
@ref{❨190❩, , @t{standalone-combinator}}.
@end itemize
@item Direct slots
@defvr {Slot} {standalone-combinator}
@anchor{❨232❩}@c
@slotsubindex{standalone-combinator}@c
The corresponding standalone combinator definition@comma{} or NIL.@*
This is a function or macro definition. Note that if this definition
is unavailable@comma{} it means that the method combination itself cannot be used
(yet).
@table @strong
@item Readers
@ref{❨190❩, , @t{standalone-combinator}}.
@item Writers
@ref{❨192❩, , @t{(setf standalone-combinator)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {short-expander-definition}
@anchor{❨479❩}@c
@classsubindex{short-expander-definition}@c
The class of short form setf expanders definitions.@*
Short form setf expanders simply expand to a globally defined function or
macro.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨123❩, , @t{expander-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨811❩, , @t{document}}.
@item
@ref{❨471❩, , @t{lambda-list}}.
@item
@ref{❨561❩, , @t{stabilize}}.
@item
@ref{❨65❩, , @t{(setf standalone-writer)}}.
@item
@ref{❨63❩, , @t{standalone-writer}}.
@end itemize
@item Direct slots
@defvr {Slot} {standalone-writer}
@anchor{❨480❩}@c
@slotsubindex{standalone-writer}@c
A standalone writer definition for this definition's expander@comma{} or NIL.
This is a function or macro definition. Note that if this definition
is unavailable@comma{} it means that the expander itself cannot be used (yet).
@table @strong
@item Readers
@ref{❨63❩, , @t{standalone-writer}}.
@item Writers
@ref{❨65❩, , @t{(setf standalone-writer)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {slot-definition}
@anchor{❨159❩}@c
@classsubindex{slot-definition}@c
Abstract root class for slots.@*
All slot definitions respond to the following public protocols@comma{} which see:
- `value-type'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨44❩, , @t{varoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨128❩, , @t{clos-slot-definition}}.
@item
@ref{❨127❩, , @t{typed-structure-slot-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨652❩, , @t{category-name}}.
@item
@ref{❨796❩, , @t{document}}.
@item
@ref{❨729❩, , @t{index-command-name}}.
@item
@ref{❨380❩, , @t{(setf owner)}}.
@item
@ref{❨377❩, , @t{owner}}.
@item
@ref{❨236❩, , @t{(setf readers)}}.
@item
@ref{❨234❩, , @t{readers}}.
@item
@ref{❨779❩, , @t{safe-name}}.
@item
@ref{❨78❩, , @t{slot}}.
@item
@ref{❨579❩, , @t{source-pathname}}.
@item
@ref{❨448❩, , @t{(setf writers)}}.
@item
@ref{❨446❩, , @t{writers}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨160❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:slot}
@item Readers
@ref{❨78❩, , @t{slot}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {owner}
@anchor{❨161❩}@c
@slotsubindex{owner}@c
The definition for the owner of this definition's slot.
@table @strong
@item Readers
@ref{❨377❩, , @t{owner}}.
@item Writers
@ref{❨380❩, , @t{(setf owner)}}.
@end table
@end defvr
@defvr {Slot} {readers}
@anchor{❨162❩}@c
@slotsubindex{readers}@c
The list of definitions for this definition's slot readers.
@table @strong
@item Readers
@ref{❨234❩, , @t{readers}}.
@item Writers
@ref{❨236❩, , @t{(setf readers)}}.
@end table
@end defvr
@defvr {Slot} {writers}
@anchor{❨163❩}@c
@slotsubindex{writers}@c
The list of definitions for this definition's slot writers.
@table @strong
@item Readers
@ref{❨446❩, , @t{writers}}.
@item Writers
@ref{❨448❩, , @t{(setf writers)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {source-file-definition}
@anchor{❨110❩}@c
@classsubindex{source-file-definition}@c
The class of ASDF source file definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨347❩, , @t{file-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨287❩, , @t{c-file-definition}}.
@item
@ref{❨93❩, , @t{java-file-definition}}.
@item
@ref{❨272❩, , @t{lisp-file-definition}}.
@item
@ref{❨156❩, , @t{static-file-definition}}.
@end itemize
@end table
@end deftp
@deftp {Class} {special-definition}
@anchor{❨94❩}@c
@classsubindex{special-definition}@c
The class of special variable definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨129❩, , @t{variable-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨671❩, , @t{category-name}}.
@item
@ref{❨742❩, , @t{index-command-name}}.
@item
@ref{❨584❩, , @t{source-pathname}}.
@end itemize
@end table
@end deftp
@deftp {Class} {static-file-definition}
@anchor{❨156❩}@c
@classsubindex{static-file-definition}@c
The class of ASDF static file definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨110❩, , @t{source-file-definition}}.
@item Direct subclasses
@ref{❨295❩, , @t{doc-file-definition}}.
@end table
@end deftp
@deftp {Class} {structure-definition}
@anchor{❨285❩}@c
@classsubindex{structure-definition}@c
Abstract root class for structures.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨337❩, , @t{classoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨221❩, , @t{clos-structure-definition}}.
@item
@ref{❨431❩, , @t{typed-structure-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨655❩, , @t{category-name}}.
@item
@ref{❨313❩, , @t{definition-structure}}.
@item
@ref{❨732❩, , @t{index-command-name}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨286❩}@c
@slotsubindex{object}@c
@table @strong
@item Readers
@ref{❨313❩, , @t{definition-structure}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {symbol-definition}
@anchor{❨218❩}@c
@classsubindex{symbol-definition}@c
Abstract root class for definitions named by symbols.@*
All symbol definitions respond to the following public protocols@comma{} which see:
- `publicp'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨385❩, , @t{definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨215❩, , @t{alias-definition}}.
@item
@ref{❨337❩, , @t{classoid-definition}}.
@item
@ref{❨291❩, , @t{funcoid-definition}}.
@item
@ref{❨44❩, , @t{varoid-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨426❩, , @t{definition-symbol}}.
@item
@ref{❨198❩, , @t{(setf home-package)}}.
@item
@ref{❨196❩, , @t{home-package}}.
@item
@ref{❨262❩, , @t{name}}.
@item
@ref{❨781❩, , @t{safe-name}}.
@item
@ref{❨564❩, , @t{stabilize}}.
@end itemize
@item Direct slots
@defvr {Slot} {symbol}
@anchor{❨219❩}@c
@slotsubindex{symbol}@c
The symbol naming this definition.
@table @strong
@item Package
@t{common-lisp}.
@item Initargs
@t{:symbol}
@item Readers
@ref{❨426❩, , @t{definition-symbol}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {home-package}
@anchor{❨220❩}@c
@slotsubindex{home-package}@c
The home package definition for this definition's symbol.@*
Every definition gets a home package@comma{} even foreign ones. A home package can
only be null when the definition's symbol is uninterned.
@table @strong
@item Readers
@ref{❨196❩, , @t{home-package}}.
@item Writers
@ref{❨198❩, , @t{(setf home-package)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {symbol-macro-definition}
@anchor{❨145❩}@c
@classsubindex{symbol-macro-definition}@c
The class of symbol macro definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨44❩, , @t{varoid-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨670❩, , @t{category-name}}.
@item
@ref{❨404❩, , @t{docstring}}.
@item
@ref{❨741❩, , @t{index-command-name}}.
@item
@ref{❨583❩, , @t{source-pathname}}.
@end itemize
@end table
@end deftp
@deftp {Class} {system-definition}
@anchor{❨146❩}@c
@classsubindex{system-definition}@c
The class of ASDF system definitions.@*
All system definitions respond to the following public protocols@comma{} which see:
- `long-name'@comma{}@*
- `mailto'@comma{}@*
- `homepage'@comma{}@*
- `source-control'@comma{}@*
- `bug-tracker'@comma{}@*
- `license-name'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨98❩, , @t{module-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨114❩, , @t{(setf authors)}}.
@item
@ref{❨112❩, , @t{authors}}.
@item
@ref{❨647❩, , @t{category-name}}.
@item
@ref{❨302❩, , @t{(setf defsystem-dependencies)}}.
@item
@ref{❨300❩, , @t{defsystem-dependencies}}.
@item
@ref{❨787❩, , @t{document}}.
@item
@ref{❨724❩, , @t{index-command-name}}.
@item
@ref{❨841❩, , @t{initialize-instance}}.
@item
@ref{❨104❩, , @t{(setf maintainers)}}.
@item
@ref{❨102❩, , @t{maintainers}}.
@item
@ref{❨546❩, , @t{stabilize}}.
@item
@ref{❨440❩, , @t{system}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨147❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:system}
@item Readers
@ref{❨440❩, , @t{system}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {parent}
@anchor{❨148❩}@c
@slotsubindex{parent}@c
@table @strong
@end table
@end defvr
@defvr {Slot} {maintainers}
@anchor{❨149❩}@c
@slotsubindex{maintainers}@c
The list of parsed maintainer contacts.@*
See `parse-contact-string' for more information.
@table @strong
@item Readers
@ref{❨102❩, , @t{maintainers}}.
@item Writers
@ref{❨104❩, , @t{(setf maintainers)}}.
@end table
@end defvr
@defvr {Slot} {authors}
@anchor{❨150❩}@c
@slotsubindex{authors}@c
The list of parsed author contacts.@*
See `parse-contact-string' for more information.
@table @strong
@item Readers
@ref{❨112❩, , @t{authors}}.
@item Writers
@ref{❨114❩, , @t{(setf authors)}}.
@end table
@end defvr
@defvr {Slot} {defsystem-dependencies}
@anchor{❨151❩}@c
@slotsubindex{defsystem-dependencies}@c
The list of defsystem dependency definitions.
@table @strong
@item Readers
@ref{❨300❩, , @t{defsystem-dependencies}}.
@item Writers
@ref{❨302❩, , @t{(setf defsystem-dependencies)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {system-file-definition}
@anchor{❨84❩}@c
@classsubindex{system-file-definition}@c
The class of ASDF system file definitions.@*
This class represents ASDF system files as Lisp files. Because system files
are not components@comma{} we use an ad-hoc fake component class for them@comma{}
`cl-source-file.asd'@comma{} which see.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@item Direct superclasses
@ref{❨272❩, , @t{lisp-file-definition}}.
@item Direct methods
@ref{❨839❩, , @t{initialize-instance}}.
@end table
@end deftp
@deftp {Class} {type-definition}
@anchor{❨322❩}@c
@classsubindex{type-definition}@c
The class of type definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{funcoid-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨667❩, , @t{category-name}}.
@item
@ref{❨403❩, , @t{docstring}}.
@item
@ref{❨814❩, , @t{document}}.
@item
@ref{❨815❩, , @t{document}}.
@item
@ref{❨246❩, , @t{expander}}.
@item
@ref{❨738❩, , @t{index-command-name}}.
@item
@ref{❨472❩, , @t{lambda-list}}.
@item
@ref{❨582❩, , @t{source-pathname}}.
@end itemize
@item Direct slots
@defvr {Slot} {object}
@anchor{❨323❩}@c
@slotsubindex{object}@c
@table @strong
@item Initargs
@t{:expander}
@item Readers
@ref{❨246❩, , @t{expander}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {typed-structure-definition}
@anchor{❨431❩}@c
@classsubindex{typed-structure-definition}@c
The class of typed structure definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨285❩, , @t{structure-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨400❩, , @t{docstring}}.
@item
@ref{❨797❩, , @t{document}}.
@item
@ref{❨55❩, , @t{(setf element-type)}}.
@item
@ref{❨53❩, , @t{element-type}}.
@item
@ref{❨850❩, , @t{initialize-instance}}.
@item
@ref{❨143❩, , @t{(setf structure-type)}}.
@item
@ref{❨141❩, , @t{structure-type}}.
@end itemize
@item Direct slots
@defvr {Slot} {type}
@anchor{❨432❩}@c
@slotsubindex{type}@c
The structure type@comma{} either LIST or VECTOR.
@table @strong
@item Package
@t{common-lisp}.
@item Initargs
@t{:type}
@item Readers
@ref{❨141❩, , @t{structure-type}}.
@item Writers
@ref{❨143❩, , @t{(setf structure-type)}}.
@end table
@end defvr
@defvr {Slot} {element-type}
@anchor{❨433❩}@c
@slotsubindex{element-type}@c
The structure's element type.@*
It is T for list structures@comma{} but may be something else for vector ones.
@table @strong
@item Initargs
@t{:element-type}
@item Readers
@ref{❨53❩, , @t{element-type}}.
@item Writers
@ref{❨55❩, , @t{(setf element-type)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {typed-structure-slot-definition}
@anchor{❨127❩}@c
@classsubindex{typed-structure-slot-definition}@c
The class of typed structure slot definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨159❩, , @t{slot-definition}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨398❩, , @t{docstring}}.
@item
@ref{❨794❩, , @t{document}}.
@item
@ref{❨554❩, , @t{stabilize}}.
@item
@ref{❨335❩, , @t{value-type}}.
@end itemize
@end table
@end deftp
@deftp {Class} {variable-definition}
@anchor{❨129❩}@c
@classsubindex{variable-definition}@c
Abstract root class for constant and special variables.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨44❩, , @t{varoid-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨392❩, , @t{constant-definition}}.
@item
@ref{❨94❩, , @t{special-definition}}.
@end itemize
@item Direct methods
@ref{❨405❩, , @t{docstring}}.
@end table
@end deftp
@deftp {Class} {varoid-definition}
@anchor{❨44❩}@c
@classsubindex{varoid-definition}@c
Abstract root class for simply valued symbol definitions.
These are constants@comma{} special variables@comma{} and symbol macros.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨218❩, , @t{symbol-definition}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨159❩, , @t{slot-definition}}.
@item
@ref{❨145❩, , @t{symbol-macro-definition}}.
@item
@ref{❨129❩, , @t{variable-definition}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨822❩, , @t{document}}.
@item
@ref{❨823❩, , @t{document}}.
@item
@ref{❨824❩, , @t{document}}.
@end itemize
@end table
@end deftp
@deftp {Class} {writer-method-definition}
@anchor{❨268❩}@c
@classsubindex{writer-method-definition}@c
The class of writer method definitions.@*
A writer method is a method that writes a slot in a class or condition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@item Direct superclasses
@ref{❨135❩, , @t{accessor-method-definition}}.
@item Direct methods
@ref{❨656❩, , @t{category-name}}.
@end table
@end deftp

@node Public types, , Public classes, Public Interface
@subsection Types
@deftp {Type} {non-empty-string} ()
@anchor{❨601❩}@c
@typesubindex{non-empty-string}@c
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨18❩, , @t{util.lisp}}.
@end table
@end deftp


@c ---------
@c Internals
@c ---------
@node Internals, , Public Interface, Definitions
@section Internals
@menu
* Private special variables::
* Private macros::
* Private ordinary functions::
* Private generic functions::
* Private method combinations::
* Private structures::
* Private classes::
@end menu

@node Private special variables, Private macros, Internals, Internals
@subsection Special variables
@defvr {Special Variable} {*blanks*}
@anchor{❨767❩}@c
@specialsubindex{*blanks*}@c
A list of blank characters and their associated revealed representation.
Each element in this list is of the form (@hashchar{}BLANK . @hashchar{}REPLACEMENT).
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*categories*}
@anchor{❨674❩}@c
@specialsubindex{*categories*}@c
The list of definition categories.@*
Each category is of the form (TITLE FILTER).@*
- TITLE (a string) serves as the section title.@*
- FILTER can be either a definition type (symbol)@comma{} in which case definitions
  of that type a retained@comma{} or a predicate function of one (definition)
  argument@comma{} which should return T if the definition is to be retained.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*configuration*}
@anchor{❨616❩}@c
@specialsubindex{*configuration*}@c
The Declt configuration settings.@*
This variable contains a property list of configuration options.
Current options are:@*
- :swank-eval-in-emacs (Boolean)@*

See Section 4.1 of the user manual for more information.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*fragile-characters*}
@anchor{❨638❩}@c
@specialsubindex{*fragile-characters*}@c
An association list of Texinfo fragile (anchor) characters.
Elements are the form (CHAR . ALT) where CHAR is the fragile (anchor)
character and ALT is an alternative Unicode character.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*licenses*}
@anchor{❨508❩}@c
@specialsubindex{*licenses*}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨30❩, , @t{license.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*section-names*}
@anchor{❨746❩}@c
@specialsubindex{*section-names*}@c
The numbered@comma{} unumbered and appendix section names sorted by level.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*special-characters*}
@anchor{❨720❩}@c
@specialsubindex{*special-characters*}@c
An association list of Texinfo special characters.@*
Elements are the form (CHAR . COMMAND) where CHAR is the special character and
COMMAND is the name of the corresponding Texinfo alphabetic command.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*stabilized*}
@anchor{❨517❩}@c
@specialsubindex{*stabilized*}@c
Whether the stabilization process is over.@*
This variable is set to NIL whenever new definitions are created during the
process. Stabilization is run over and over again until nothing moves
anymore.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end defvr

@node Private macros, Private ordinary functions, Private special variables, Internals
@subsection Macros
@deffn {Macro} {deffn} ((category name lambda-list &optional qualifiers) &body body)
@anchor{❨783❩}@c
@macrosubindex{deffn}@c
Execute BODY as part of a @atchar{}deffn @lbracechar{}CATEGORY@rbracechar{} @lbracechar{}NAME@rbracechar{} [QUALIFIERS] LAMBDA-LIST.
CATEGORY@comma{} NAME@comma{} QUALIFIERS@comma{} and LAMBDA-LIST are escaped for Texinfo prior to
rendering. LAMBDA-LIST should be provided by `safe-lambda-list' or
`safe-specializers'@comma{} which see. BODY should render on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {defindent} (symbol indent)
@anchor{❨614❩}@c
@macrosubindex{defindent}@c
Wrapper around `clindent' to avoid quoting SYMBOL and INDENT.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Macro} {deftp} ((category name &optional lambda-list) &body body)
@anchor{❨719❩}@c
@macrosubindex{deftp}@c
Execute BODY as part of a @atchar{}deftp @lbracechar{}CATEGORY@rbracechar{} @lbracechar{}NAME@rbracechar{} [LAMBDA-LIST] environment.
CATEGORY@comma{} NAME@comma{} and LAMBDA-LIST are escaped for Texinfo prior to rendering.
LAMBDA-LIST should be provided by `safe-lambda-list'@comma{} which see.@*
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {defvr} (category name &body body)
@anchor{❨636❩}@c
@macrosubindex{defvr}@c
Execute BODY as part of a @atchar{}defvr @lbracechar{}CATEGORY@rbracechar{} @lbracechar{}NAME@rbracechar{} environment.
CATEGORY and NAME are escaped for Texinfo prior to rendering.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {destabilize} (definitions expression)
@anchor{❨587❩}@c
@macrosubindex{destabilize}@c
Invalidate the stabilization process by adding a new definition.
EXPRESSION should evaluate to a new definition. ENDPUSH that definition to
DEFINITIONS (a symbol)@comma{} mark the stabilization process as dirty@comma{} and return
that definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Macro} {item} ((&optional title) &body body)
@anchor{❨763❩}@c
@macrosubindex{item}@c
Execute BODY as part of an @atchar{}item [TITLE].
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {itemize} ((&optional kind) &body body)
@anchor{❨829❩}@c
@macrosubindex{itemize}@c
Execute BODY as part of an @atchar{}itemize KIND environment.
KIND should be a string designator. It defaults to @atchar{}bullet.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {multitable} ((&rest fractions) &body body)
@anchor{❨637❩}@c
@macrosubindex{multitable}@c
Execute BODY as part of a @atchar{}multitable @atchar{}columnFRACTIONS environment.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {render-to-string} (&body body)
@anchor{❨640❩}@c
@macrosubindex{render-to-string}@c
Execute BODY with *standard-output* redirected to a string.
Return that string.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Macro} {table} ((&optional kind) &body body)
@anchor{❨691❩}@c
@macrosubindex{table}@c
Execute BODY as part of a @atchar{}table KIND environment.@*
KIND should be a string designator. It defaults to @atchar{}strong.
BODY should render on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn

@node Private ordinary functions, Private generic functions, Private macros, Internals
@subsection Ordinary functions
@deffn {Function} {%deffn} (x category name lambda-list &optional qualifiers)
@anchor{❨642❩}@c
@functionsubindex{%deffn}@c
Render a @atchar{}deffn[x] @lbracechar{}CATEGORY@rbracechar{} @lbracechar{}NAME@rbracechar{} [QUALIFIERS] LAMBDA-LIST line.
Rendering is done on *standard-output*. CATEGORY@comma{} NAME@comma{} QUALIFIERS@comma{} and
LAMBDA-LIST are escaped for Texinfo prior to rendering. LAMBDA-LIST should be
provided by `safe-lambda-list' or `safe-specializers'@comma{} which see.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {%version} (type major minor status level name)
@anchor{❨615❩}@c
@functionsubindex{%version}@c
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}anchor} (anchor)
@anchor{❨712❩}@c
@functionsubindex{@atchar{}anchor}@c
Render ANCHOR as an @atchar{}anchor on a standalone line.
ANCHOR is escaped for Texinfo prior to rendering.
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}deffn} (category name lambda-list &optional qualifiers)
@anchor{❨673❩}@c
@functionsubindex{@atchar{}deffn}@c
Render a @atchar{}deffn @lbracechar{}CATEGORY@rbracechar{} @lbracechar{}NAME@rbracechar{} [QUALIFIERS] LAMBDA-LIST line.
Rendering is done on *standard-output*. CATEGORY@comma{} NAME@comma{} QUALIFIERS@comma{} and
LAMBDA-LIST are escaped for Texinfo prior to rendering. LAMBDA-LIST should be
provided by `safe-lambda-list' or `safe-specializers'@comma{} which see.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}deffnx} (category name lambda-list &optional qualifiers)
@anchor{❨639❩}@c
@functionsubindex{@atchar{}deffnx}@c
Render a @atchar{}deffnx @lbracechar{}CATEGORY@rbracechar{} @lbracechar{}NAME@rbracechar{} [QUALIFIERS] LAMBDA-LIST line.
Rendering is done on *standard-output*. CATEGORY@comma{} NAME@comma{} QUALIFIERS@comma{} and
LAMBDA-LIST are escaped for Texinfo prior to rendering. LAMBDA-LIST should be
provided by `safe-lambda-list' or `safe-specializers'@comma{} which see.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}deftp} (category name &optional lambda-list)
@anchor{❨830❩}@c
@functionsubindex{@atchar{}deftp}@c
Render a @atchar{}deftp @lbracechar{}CATEGORY@rbracechar{} @lbracechar{}NAME@rbracechar{} [LAMBDA-LIST] line on *standard-output*.
CATEGORY@comma{} NAME@comma{} and LAMBDA-LIST are escaped for Texinfo prior to rendering.
LAMBDA-LIST should be provided by `safe-lambda-list'@comma{} which see.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}defvr} (category name)
@anchor{❨688❩}@c
@functionsubindex{@atchar{}defvr}@c
Render a @atchar{}defvr @lbracechar{}CATEGORY@rbracechar{} @lbracechar{}NAME@rbracechar{} line on *standard-output*.
CATEGORY and NAME are escaped for Texinfo prior to rendering.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}end} (environment)
@anchor{❨759❩}@c
@functionsubindex{@atchar{}end}@c
Render and @atchar{}end ENVIRONMENT line on *standard-output*.
ENVIRONMENT should be a string designator.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}item} (&optional title)
@anchor{❨714❩}@c
@functionsubindex{@atchar{}item}@c
Render an @atchar{}item [TITLE] line on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}itemize} (&optional kind)
@anchor{❨692❩}@c
@functionsubindex{@atchar{}itemize}@c
Render an @atchar{}itemize KIND line on *standard-output*.@*
KIND should be a string designator. It defaults to @atchar{}bullet.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}multitable} (&rest fractions)
@anchor{❨689❩}@c
@functionsubindex{@atchar{}multitable}@c
Render a @atchar{}multitable @atchar{}columnFRACTIONS line on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}ref} (anchor label)
@anchor{❨717❩}@c
@functionsubindex{@atchar{}ref}@c
Render ANCHOR as an @atchar{}ref with online and printed LABEL.@*
Both ANCHOR and LABEL are escaped for Texinfo prior to rendering.
LABEL is rendered in teletype.@*
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {@atchar{}table} (&optional kind)
@anchor{❨827❩}@c
@functionsubindex{@atchar{}table}@c
Render a @atchar{}table KIND line on *standard-output*.@*
KIND should be a string designator. It defaults to @atchar{}strong.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {add-categories-node} (parent context status definitions)
@anchor{❨832❩}@c
@functionsubindex{add-categories-node}@c
Add the STATUS DEFINITIONS categories nodes to PARENT in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {add-category-node} (parent context status category definitions)
@anchor{❨676❩}@c
@functionsubindex{add-category-node}@c
Add the STATUS CATEGORY node to PARENT for DEFINITIONS in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {add-child} (parent child)
@anchor{❨762❩}@c
@functionsubindex{add-child}@c
Add CHILD node to PARENT node and return CHILD.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {add-definitions-node} (parent report context)
@anchor{❨632❩}@c
@functionsubindex{add-definitions-node}@c
Add REPORT's definitions node to PARENT in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {add-files-node} (parent report context)
@anchor{❨635❩}@c
@functionsubindex{add-files-node}@c
Add REPORT's files node to PARENT in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {add-modules-node} (parent report context)
@anchor{❨718❩}@c
@functionsubindex{add-modules-node}@c
Add REPORT's modules node to PARENT in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {add-packages-node} (parent report context)
@anchor{❨675❩}@c
@functionsubindex{add-packages-node}@c
Add REPORT's packages node to PARENT in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨24❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {add-systems-node} (parent report context)
@anchor{❨641❩}@c
@functionsubindex{add-systems-node}@c
Add REPORT's systems node to PARENT in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {anchor} (definition)
@anchor{❨833❩}@c
@functionsubindex{anchor}@c
Render DEFINITION's anchoring command on *STANDARD-OUTPUT*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {anchor-and-index} (definition)
@anchor{❨695❩}@c
@functionsubindex{anchor-and-index}@c
Render DEFINITION's anchoring and indexing commands on *STANDARD-OUTPUT*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {anchor-name} (definition)
@anchor{❨772❩}@c
@functionsubindex{anchor-name}@c
Return DEFINITION's anchor name@comma{} that is@comma{} "(<UID>)".
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {clindent} (symbol indent)
@anchor{❨618❩}@c
@functionsubindex{clindent}@c
Send SYMBOL's INDENTation information to Emacs.@*
Emacs will set the 'common-lisp-indent-function property.@*
If INDENT is a symbol@comma{} use its indentation definition. Otherwise@comma{} INDENT is
considered as an indentation definition.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Function} {components} (module type)
@anchor{❨574❩}@c
@functionsubindex{components}@c
Return the list of all (sub)TYPE components found in MODULE's tree.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-node} (instance)
@anchor{❨754❩}@c
@functionsubindex{copy-node}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {current-time-string} ()
@anchor{❨631❩}@c
@functionsubindex{current-time-string}@c
Return the current time as a string.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨20❩, , @t{misc.lisp}}.
@end table
@end deffn
@deffn {Function} {declt-1} (report &rest keys &key locations default-values foreign-definitions declt-notice output-directory file-name info-name info-category)
@anchor{❨766❩}@c
@functionsubindex{declt-1}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨26❩, , @t{declt.lisp}}.
@end table
@end deffn
@deffn {Function} {definition-source-by-name} (definition type)
@anchor{❨571❩}@c
@functionsubindex{definition-source-by-name}@c
Return DEFINITION's source for TYPE.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {domesticp} (symbol pathname packages pathnames)
@anchor{❨524❩}@c
@functionsubindex{domesticp}@c
Return T if a definition for SYMBOL originating in PATHNAME is domestic.@*
A definition is considered domestic under the following conditions:@*
- its originating PATHNAME is known (non NIL) and one of domestic PATHNAMES@comma{}
- its originating PATHNAME is unknown@comma{} but the SYMBOL's home package is one of
  domestic PACKAGES.@*
Note that a definition for a domestic symbol@comma{} but originating in a foreign
source file is considered foreign.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@end table
@end deffn
@deffn {Function} {escape} (string)
@anchor{❨629❩}@c
@functionsubindex{escape}@c
When STRING@comma{} escape it for Texinfo.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {escape-anchor} (string)
@anchor{❨693❩}@c
@functionsubindex{escape-anchor}@c
Escape STRING for use as a Texinfo anchor name.@*
In addition to regular escaping@comma{} periods@comma{} commas@comma{} colons@comma{} and parenthesis are
replaced with alternative Unicode characters.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {escape-label} (string)
@anchor{❨643❩}@c
@functionsubindex{escape-label}@c
Escape STRING for use as a Texinfo anchor label.@*
In addition to regular escaping@comma{} colons are replaced with alternative Unicode
characters.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {escape-lambda-list} (lambda-list)
@anchor{❨630❩}@c
@functionsubindex{escape-lambda-list}@c
Escape safe LAMBDA-LIST for Texinfo.@*
This function expects a value from `safe-lambda-list'@comma{} which see. It returns a
string properly escaped for Texinfo@comma{} apart from @ampchar{}-constructs which retain
their original form@comma{} and @atchar{}ref's and @atchar{}t's which are already properly set.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {file-components} (module)
@anchor{❨526❩}@c
@functionsubindex{file-components}@c
Return the list of all file components found in MODULE's tree.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {file-node} (definition context)
@anchor{❨644❩}@c
@functionsubindex{file-node}@c
Create and return a file DEFINITION node in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {finalize} (definitions packages pathnames)
@anchor{❨572❩}@c
@functionsubindex{finalize}@c
Finalize DEFINITIONS in domestic PACKAGES and PATHNAMES.
For more information@comma{} see `stabilize' and `freeze'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {find-definition} (object definitions)
@anchor{❨515❩}@c
@functionsubindex{find-definition}@c
Find a definition for OBJECT in DEFINITIONS.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@end table
@end deffn
@deffn {Function} {first-word-length} (string)
@anchor{❨771❩}@c
@functionsubindex{first-word-length}@c
Return the length of the first word in STRING.
Initial whitespace characters are skipped.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {freeze} (definitions)
@anchor{❨514❩}@c
@functionsubindex{freeze}@c
Freeze DEFINITIONS.@*
Currently@comma{} this means:@*
- computing the definitions UIDs@comma{}@*
- potentially upgrading generic definitions to reader or writer definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {funcoid-name} (funcoid)
@anchor{❨538❩}@c
@functionsubindex{funcoid-name}@c
Return FUNCOID's name@comma{} or NIL.@*
FUNCOID may be a function@comma{} a macro function@comma{} or a compiler macro function.
Lambda expression are not considered as proper names@comma{} so NIL is returned.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {i-reader} (stream subchar arg)
@anchor{❨619❩}@c
@functionsubindex{i-reader}@c
Construct a call to `defindent' by reading an argument list from STREAM.
This dispatch macro character function is installed on @hashchar{}i in the
NET.DIDIERVERNA.DECLT named readtable.
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Function} {index} (definition)
@anchor{❨686❩}@c
@functionsubindex{index}@c
Render DEFINITION's indexing command on *STANDARD-OUTPUT*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {itemize-list} (list &key renderer kind format key)
@anchor{❨760❩}@c
@functionsubindex{itemize-list}@c
Render a LIST of items as part of an @atchar{}itemize KIND environment.@*
KIND should be a string designator. It defaults to @atchar{}bullet.@*
If RENDERER is non-nil@comma{} it must be a function of one argument (every LIST
element) that performs the rendering on *standard-output* directly.@*

Otherwise@comma{} the rendering is done by calling format@comma{} as explained below.
- FORMAT is the format string to use for every LIST element. It defaults to
  "~A".@*
- KEY is a function of one argument (every LIST element) used to provide
  the necessary arguments to the FORMAT string. If multiple arguments are
  needed@comma{} they should be returned by KEY as multiple values.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {load-system} (system-name)
@anchor{❨510❩}@c
@functionsubindex{load-system}@c
Load ASDF SYSTEM-NAME in a manner suitable to extract documentation.
Return the corresponding ASDF system.@*
SYSTEM-NAME is an ASDF system designator.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {long-title} (definition)
@anchor{❨751❩}@c
@functionsubindex{long-title}@c
Return a long title for DEFINITION.@*
It is of the form "The <qualified safe name> <type name>".
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-file-definitions} (definitions)
@anchor{❨490❩}@c
@functionsubindex{make-all-file-definitions}@c
Return a list of all file definitions for system DEFINITIONS.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-module-definitions} (definitions)
@anchor{❨588❩}@c
@functionsubindex{make-all-module-definitions}@c
Return a list of all module definitions for system DEFINITIONS.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-package-definitions} (file-definitions system-definitions)
@anchor{❨544❩}@c
@functionsubindex{make-all-package-definitions}@c
Return a list of all package definitions for FILE- and SYSTEM-DEFINITIONS.
This list contains definitions for packages defined in the corresponding
files@comma{} or for which the source is not found@comma{} but the name is of the form
SYSTEM/... (case insensitive) for one of the corresponding systems.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-symbol-definitions} (packages pathnames all-symbols-p)
@anchor{❨520❩}@c
@functionsubindex{make-all-symbol-definitions}@c
Return a list of all domestic symbol definitions.@*
If ALL-SYMBOLS-P@comma{} introspect all accessible symbols in the current Lisp
environment. Otherwise (the default)@comma{} limit introspection to the symbols from
domestic PACKAGES.@*
Domesticity is defined in relation to domestic PACKAGES and PATHNAMES; see
`domesticp'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {make-all-system-definitions} (system)
@anchor{❨529❩}@c
@functionsubindex{make-all-system-definitions}@c
Return a list of all system definitions for SYSTEM.@*
The only guarantee is that the definition for SYSTEM comes first.
The other considered systems are those found recursively in SYSTEM's
dependencies@comma{} and located under SYSTEM's directory.@*
See `subsystems' for more information.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {make-classoid-definition} (symbol classoid packages pathnames)
@anchor{❨521❩}@c
@functionsubindex{make-classoid-definition}@c
Make a new CLASSOID definition for SYMBOL.@*
Also create all slots definitions. The foreign status of the new classoid and
its slots is computed from domestic PACKAGES and PATHNAMES.@*
The concrete class of the new definition (structure@comma{} class@comma{} or condition)
depends on the kind of CLASSOID.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-clos-slot-definition} (slot &optional foreign)
@anchor{❨507❩}@c
@functionsubindex{make-clos-slot-definition}@c
Make a new CLOS SLOT definition@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-combination-definition} (symbol combination &optional foreign)
@anchor{❨590❩}@c
@functionsubindex{make-combination-definition}@c
Make a new method COMBINATION definition for SYMBOL@comma{} possibly FOREIGN.
The concrete class of the new definition depends on the COMBINATION type.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-compiler-macro-alias-definition} (symbol &optional setf)
@anchor{❨528❩}@c
@functionsubindex{make-compiler-macro-alias-definition}@c
Make a new compiler macro alias definition for (possibly SETF) SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-compiler-macro-definition} (symbol compiler-macro &rest keys &key setf foreign)
@anchor{❨541❩}@c
@functionsubindex{make-compiler-macro-definition}@c
Make a new COMPILER-MACRO definition for SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-constant-definition} (symbol)
@anchor{❨502❩}@c
@functionsubindex{make-constant-definition}@c
Make a new constant definition for SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-context} (&rest keys &key locations default-values foreign-definitions declt-notice)
@anchor{❨747❩}@c
@functionsubindex{make-context}@c
Make a new rendering context.@*
The following keys are available.@*
- LOCATIONS: whether to hyperlink definitions to their locations.
  Currently supported values are NIL (the default)@comma{} and :file-system.
- DEFAULT-VALUES: whether to render default / standard values.
  Defaults to NIL.@*
- FOREIGN-DEFINITIONS: whether to render foreign definitions.
  Defaults to NIL.@*
- DECLT-NOTICE: whether to add a small credit paragraph to Declt.
Possible values are NIL@comma{} :short@comma{} or :long (the default).
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {make-expander-definition} (symbol expander &optional foreign)
@anchor{❨540❩}@c
@functionsubindex{make-expander-definition}@c
Make a new setf EXPANDER definition for SYMBOL@comma{} possibly foreign.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-file-definition} (file &optional foreign)
@anchor{❨525❩}@c
@functionsubindex{make-file-definition}@c
Make a new FILE definition.@*
The concrete class of the new definition depends on the kind of FILE.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-function-alias-definition} (symbol &optional setf)
@anchor{❨568❩}@c
@functionsubindex{make-function-alias-definition}@c
make a new function alias definition for (possibly SETF) SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-generic-function-definition} (symbol generic &rest keys &key setf foreign)
@anchor{❨491❩}@c
@functionsubindex{make-generic-function-definition}@c
Make a new GENERIC function definition for (SETF) SYMBOL@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-macro-alias-definition} (symbol)
@anchor{❨532❩}@c
@functionsubindex{make-macro-alias-definition}@c
Make a new macro alias definition for SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-macro-definition} (symbol macro &optional foreign)
@anchor{❨516❩}@c
@functionsubindex{make-macro-definition}@c
Make a new MACRO definition for SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-method-definition} (method &optional foreign)
@anchor{❨592❩}@c
@functionsubindex{make-method-definition}@c
Make a new METHOD definition@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-module-definition} (module &optional foreign)
@anchor{❨575❩}@c
@functionsubindex{make-module-definition}@c
Make a new MODULE definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-node} (&key name synopsis section-type section-name next previous up children before-menu-contents after-menu-contents)
@anchor{❨745❩}@c
@functionsubindex{make-node}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {make-ordinary-function-definition} (symbol function &rest keys &key setf foreign)
@anchor{❨499❩}@c
@functionsubindex{make-ordinary-function-definition}@c
Make a new ordinary FUNCTION definition for (SETF) SYMBOL@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-package-definition} (package &optional foreign)
@anchor{❨518❩}@c
@functionsubindex{make-package-definition}@c
Make a new PACKAGE definition@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {make-report} ()
@anchor{❨513❩}@c
@functionsubindex{make-report}@c
Make a new report.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {make-special-definition} (symbol)
@anchor{❨523❩}@c
@functionsubindex{make-special-definition}@c
Make a new special variable definition for SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-symbol-definitions} (symbol packages pathnames)
@anchor{❨573❩}@c
@functionsubindex{make-symbol-definitions}@c
Make and return a list of all existing domestic definitions for SYMBOL.
Domesticity is defined in relation to domestic PACKAGES and PATHNAMES; see
`domesticp'.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {make-symbol-macro-definition} (symbol)
@anchor{❨589❩}@c
@functionsubindex{make-symbol-macro-definition}@c
Make a new symbol macro definition for SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-system-definition} (system &optional foreign)
@anchor{❨519❩}@c
@functionsubindex{make-system-definition}@c
Make a new SYSTEM definition.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-system-file-definition} (system)
@anchor{❨539❩}@c
@functionsubindex{make-system-file-definition}@c
Make a new system file definition for SYSTEM.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-system-file-definitions} (systems)
@anchor{❨591❩}@c
@functionsubindex{make-system-file-definitions}@c
Make a list of system file definitions for SYSTEMS.@*
Multiple systems may be defined in the same file. There is however only one
definition for each file.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {make-type-definition} (symbol expander)
@anchor{❨500❩}@c
@functionsubindex{make-type-definition}@c
Make a new type definition for SYMBOL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {make-typed-structure-slot-definition} (slot &optional foreign)
@anchor{❨493❩}@c
@functionsubindex{make-typed-structure-slot-definition}@c
Make a new typed structure SLOT definition@comma{} possibly FOREIGN.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {merge-expander-p} (definition expander)
@anchor{❨627❩}@c
@functionsubindex{merge-expander-p}@c
Return T if function DEFINITION and setf EXPANDER can be documented jointly.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {merge-generic-writer} (reader writer)
@anchor{❨764❩}@c
@functionsubindex{merge-generic-writer}@c
Check if WRITER generic definition can be documented jointly with READER.
If so@comma{} return the generalized Boolean value of `merge-methods'@comma{} which see.

Merging is only attempted on generic functions defined exclusively via slot
:accessor keywords. For merging to actually occur@comma{} there must not exist any
property specific to only one definition@comma{} or different between the two (no
related expander information@comma{} same method combination@comma{} same docstring@comma{} etc.).
The only exception is their lambda lists.@*

The same conditions apply to methods@comma{} which definitions are also merged. Only
unqualified methods must exist. Standalone reader and writer methods are still
permitted.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {merge-methods} (reader writer)
@anchor{❨628❩}@c
@functionsubindex{merge-methods}@c
Attempt to merge READER and WRITER generic definitions methods. See
`merge-generic-writer' for the exact conditions under which merging may
occur. If merging is possible@comma{} return a list of three values:@*
1. a list of the form ((READER-METHOD . WRITER-METHOD) ...) for associated
   reader and writer methods@comma{}@*
2. a list of standalone readers@comma{}@*
3. a list of standalone writers@comma{}@*
Otherwise@comma{} return NIL.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {merge-ordinary-writer} (reader writer)
@anchor{❨710❩}@c
@functionsubindex{merge-ordinary-writer}@c
Return WRITER if it can be documented jointly with READER.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {method-name} (method)
@anchor{❨543❩}@c
@functionsubindex{method-name}@c
Return METHOD's canonical name.@*
Return a second value of T if METHOD is in fact a SETF one.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {module-components} (module)
@anchor{❨503❩}@c
@functionsubindex{module-components}@c
Return the list of all module components found in MODULE's tree.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {new-funcoid-definition} (name packages pathnames)
@anchor{❨530❩}@c
@functionsubindex{new-funcoid-definition}@c
Return a new macro or function definition for NAME@comma{} or NIL.
PACKAGES and PATHNAMES are used to determine domesticity.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {new-generic-definition} (generic packages pathnames)
@anchor{❨567❩}@c
@functionsubindex{new-generic-definition}@c
Make a new foreign GENERIC function definition.
PACKAGES and PATHNAMES are used to determine domesticity.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Reader} {node-after-menu-contents} (instance)
@anchor{❨623❩}@c
@functionsubindex{node-after-menu-contents}@c
@deffnx {Writer} {(setf node-after-menu-contents)} (instance)
@anchor{❨624❩}@c
@functionsubindex{(setf node-after-menu-contents)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨706❩, , @t{after-menu-contents}}.
@end table
@end deffn
@deffn {Reader} {node-before-menu-contents} (instance)
@anchor{❨757❩}@c
@functionsubindex{node-before-menu-contents}@c
@deffnx {Writer} {(setf node-before-menu-contents)} (instance)
@anchor{❨758❩}@c
@functionsubindex{(setf node-before-menu-contents)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨705❩, , @t{before-menu-contents}}.
@end table
@end deffn
@deffn {Reader} {node-children} (instance)
@anchor{❨774❩}@c
@functionsubindex{node-children}@c
@deffnx {Writer} {(setf node-children)} (instance)
@anchor{❨775❩}@c
@functionsubindex{(setf node-children)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨704❩, , @t{children}}.
@end table
@end deffn
@deffn {Reader} {node-name} (instance)
@anchor{❨755❩}@c
@functionsubindex{node-name}@c
@deffnx {Writer} {(setf node-name)} (instance)
@anchor{❨756❩}@c
@functionsubindex{(setf node-name)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨697❩, , @t{name}}.
@end table
@end deffn
@deffn {Reader} {node-next} (instance)
@anchor{❨752❩}@c
@functionsubindex{node-next}@c
@deffnx {Writer} {(setf node-next)} (instance)
@anchor{❨753❩}@c
@functionsubindex{(setf node-next)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨701❩, , @t{next}}.
@end table
@end deffn
@deffn {Function} {node-p} (object)
@anchor{❨709❩}@c
@functionsubindex{node-p}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Reader} {node-previous} (instance)
@anchor{❨625❩}@c
@functionsubindex{node-previous}@c
@deffnx {Writer} {(setf node-previous)} (instance)
@anchor{❨626❩}@c
@functionsubindex{(setf node-previous)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨702❩, , @t{previous}}.
@end table
@end deffn
@deffn {Reader} {node-section-name} (instance)
@anchor{❨707❩}@c
@functionsubindex{node-section-name}@c
@deffnx {Writer} {(setf node-section-name)} (instance)
@anchor{❨708❩}@c
@functionsubindex{(setf node-section-name)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨700❩, , @t{section-name}}.
@end table
@end deffn
@deffn {Reader} {node-section-type} (instance)
@anchor{❨721❩}@c
@functionsubindex{node-section-type}@c
@deffnx {Writer} {(setf node-section-type)} (instance)
@anchor{❨722❩}@c
@functionsubindex{(setf node-section-type)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨699❩, , @t{section-type}}.
@end table
@end deffn
@deffn {Reader} {node-synopsis} (instance)
@anchor{❨684❩}@c
@functionsubindex{node-synopsis}@c
@deffnx {Writer} {(setf node-synopsis)} (instance)
@anchor{❨685❩}@c
@functionsubindex{(setf node-synopsis)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨698❩, , @t{synopsis}}.
@end table
@end deffn
@deffn {Reader} {node-up} (instance)
@anchor{❨768❩}@c
@functionsubindex{node-up}@c
@deffnx {Writer} {(setf node-up)} (instance)
@anchor{❨769❩}@c
@functionsubindex{(setf node-up)}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Target Slot
@ref{❨703❩, , @t{up}}.
@end table
@end deffn
@deffn {Function} {one-liner-p} (string)
@anchor{❨566❩}@c
@functionsubindex{one-liner-p}@c
Return T if STRING is non empty and does not span multiple lines.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨28❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {package-external-symbols} (package)
@anchor{❨527❩}@c
@functionsubindex{package-external-symbols}@c
Return the list of PACKAGE's external symbols.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {package-internal-symbols} (package)
@anchor{❨511❩}@c
@functionsubindex{package-internal-symbols}@c
Return the lists of PACKAGE's internal and external symbols as two values.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {package-symbols} (package)
@anchor{❨504❩}@c
@functionsubindex{package-symbols}@c
Return the list of symbols from home PACKAGE.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {parse-contact(s)} (contact(s))
@anchor{❨569❩}@c
@functionsubindex{parse-contact(s)}@c
Parse CONTACT(S) as either a contact string@comma{} or a list of such.
Return a list of parsed contacts. See `parse-contact-string' for more
information.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨28❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {parse-contact-string} (string)
@anchor{❨501❩}@c
@functionsubindex{parse-contact-string}@c
Parse STRING of the form "My Name <my@atchar{}address>".@*
Both name and address are optional. If only an address is provided@comma{} the angle
brackets may be omitted.@*
If neither a name nor an address can be extracted@comma{} return NIL. Otherwise@comma{}
return the list ("My Name" . "my@atchar{}address"). In such a case@comma{} either the CAR
or the CDR may be null@comma{} but not both.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨28❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {read-next-line} (stream)
@anchor{❨773❩}@c
@functionsubindex{read-next-line}@c
Read one line from STREAM.@*
Return a list of two values:@*
- the line itself@comma{} or STREAM@comma{}@*
- whether a newline character is missing at the end of the line.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {reference} (definition context &optional short punctuation)
@anchor{❨748❩}@c
@functionsubindex{reference}@c
Render a possibly SHORT DEFINITION's reference in CONTEXT.@*
Rendering is done on *STANDARD-OUTPUT*.@*
When DEFINITION is foreign and CONTEXT disables their rendering@comma{} the produced
reference is just text. Otherwise@comma{} an actual link is created.@*
Unless SHORT@comma{} the DEFINITION type is advertised after the reference
itself. When SHORT@comma{} the reference is followed by a PUNCTUATION character (a
dot by default) or NIL.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {release-status-number} (release-status)
@anchor{❨617❩}@c
@functionsubindex{release-status-number}@c
@table @strong
@item Package
@ref{❨37❩, , @t{net.didierverna.declt.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {render-definition-core} (definition context)
@anchor{❨765❩}@c
@functionsubindex{render-definition-core}@c
Render DEFINITION's documentation core in CONTEXT.@*
More specifically@comma{} render DEFINITION's package and source file references.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {render-dependencies} (dependencies context &optional prefix)
@anchor{❨690❩}@c
@functionsubindex{render-dependencies}@c
Render COMPONENT's DEPENDENCIES in CONTEXT@comma{} optionally PREFIXing the title.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {render-dependency} (dependency context)
@anchor{❨687❩}@c
@functionsubindex{render-dependency}@c
Render a resolved DEPENDENCY specification in CONTEXT.
See `resolve-dependency-specification' for more information.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Function} {render-docstring} (item)
@anchor{❨744❩}@c
@functionsubindex{render-docstring}@c
Render ITEM's documentation string.
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {render-header} (report file-name info-name info-category declt-notice current-time-string)
@anchor{❨828❩}@c
@functionsubindex{render-header}@c
Render the header of the Texinfo file.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨26❩, , @t{declt.lisp}}.
@end table
@end deffn
@deffn {Function} {render-headline} (definition)
@anchor{❨716❩}@c
@functionsubindex{render-headline}@c
Render a headline for DEFINITION. Also anchor and index it.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {render-node} (node level)
@anchor{❨694❩}@c
@functionsubindex{render-node}@c
Render NODE at LEVEL and all its children at LEVEL+1.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {render-package-reference} (definition context &optional force)
@anchor{❨622❩}@c
@functionsubindex{render-package-reference}@c
Render a reference to DEFINITION's home package definition in CONTEXT.
When FORCE@comma{} render a reference to the Common Lisp package@comma{} even if CONTEXT
says otherwise.@*
Possibly render an "uninterned" mention instead of an actual reference@comma{}
when there is no home package to reference.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {render-references} (title definitions context &optional short)
@anchor{❨715❩}@c
@functionsubindex{render-references}@c
Render an enTITLEd list of [SHORT] references to DEFINITIONS in CONTEXT.
See `reference' for the meaning of SHORT. The list is rendered in an itemized
table item@comma{} unless there is only one definition in which case it appears
directly as the table item's contents.@*
Rendering is done on *standard-output*.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {render-text} (text)
@anchor{❨711❩}@c
@functionsubindex{render-text}@c
Render TEXT for Texinfo.@*
Rendering is done on *standard-output*.@*
The rendering takes care of escaping the text for Texinfo@comma{} and attempts to
embellish the output by detecting potential paragraphs from standalone lines.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {render-top-node} (node)
@anchor{❨831❩}@c
@functionsubindex{render-top-node}@c
Render the whole nodes hierarchy starting at toplevel NODE.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@end table
@end deffn
@deffn {Function} {reorder-dependency-def} (dependency-def)
@anchor{❨509❩}@c
@functionsubindex{reorder-dependency-def}@c
Reorder information in DEPENDENCY-DEF so that the system is always first.
More specifically:@*
- simple component names are returned as-is@comma{}@*
- :version expressions are returned as (system :version version-specifier)@comma{}
- :feature expressions are returned as (... :feature feature-expression)@comma{}
- :require expressions are returned as (system :require).@*

Note that because a feature expression is defined recursively@comma{} the first
element in the reordered list may be another reordered sub-list rather than a
simple component name directly. In any case@comma{} the system name will always be
in the deepest first position.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨28❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {reordered-dependency-def-system} (reordered-dependency-def)
@anchor{❨533❩}@c
@functionsubindex{reordered-dependency-def-system}@c
Extract the system name from REORDERED-DEPENDENCY-DEF.
See `reorder-dependency-def' for more information.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨28❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {resolve-dependency-specification} (specification component definitions foreign)
@anchor{❨505❩}@c
@functionsubindex{resolve-dependency-specification}@c
Resolve dependency SPECIFICATION for (FOREIGN) COMPONENT in DEFINITIONS.
SPECIFICATION must already be reordered (see `reorder-dependency-def' for more
information). The specification's component name is replaced with its
corresponding definition. A foreign definition may be created in the process.

If such a definition is neither found@comma{} nor created@comma{} return NIL. Otherwise@comma{}
return a list of the updated specification (suitable to MAPCAN).
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {reveal} (string)
@anchor{❨761❩}@c
@functionsubindex{reveal}@c
Return a copy of STRING with blanks revealed.@*
If STRING is empty or null@comma{} use the empty set symbol. Otherwise@comma{} each blank
character is replaced with a visible Unicode representation. See `*blanks*'
for more information.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@end table
@end deffn
@deffn {Function} {safe-lambda-list} (lambda-list &optional safe-specializers)
@anchor{❨770❩}@c
@functionsubindex{safe-lambda-list}@c
Return a safe LAMBDA-LIST@comma{} suitable to pass to Texinfo.@*
The original lambda-list's structure is preserved@comma{} but all symbols are
converted to revealed strings@comma{} and initform / supplied-p data is removed.
@ampchar{}whole@comma{} @ampchar{}environment@comma{} and @ampchar{}aux parts are removed as they don't provide any
information on the funcoid's usage. SAFE-SPECIALIZERS is provided for method
LAMBDA-LISTs. See `safe-specializers' for more information. Mandatory
arguments associated with a non-nil safe specializer are listed together.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {safe-specializers} (definition context)
@anchor{❨645❩}@c
@functionsubindex{safe-specializers}@c
Return a list of safe specializers for method DEFINITION in CONTEXT.@*
A safe specializer is the printed form of either a reference to a class
definition@comma{} or an EQL specializer's type name.@*

Unless the CONTEXT specifies otherwise@comma{} T specializers are replaced by NIL to
indicate that they are not to be advertized.@*

For setf and writer definitions@comma{} only the specializers rest is used@comma{} as these
methods get the new value as their first argument.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Function} {select-keys} (keys &rest selected)
@anchor{❨713❩}@c
@functionsubindex{select-keys}@c
Return a new property list from KEYS with only SELECTED ones.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨26❩, , @t{declt.lisp}}.
@end table
@end deffn
@deffn {Function} {source-by-name} (name type)
@anchor{❨492❩}@c
@functionsubindex{source-by-name}@c
Return source pathname for NAMEd object of TYPE.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨28❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {source-by-object} (object)
@anchor{❨512❩}@c
@functionsubindex{source-by-object}@c
Return OBJECT's source pathname.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨28❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {stabilize-clos-classoid-slot} (definition definitions packages pathnames)
@anchor{❨531❩}@c
@functionsubindex{stabilize-clos-classoid-slot}@c
Compute CLOS classoid slot DEFINITION's reader and writer definitions.
This function is used for regular class and condition slots.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {stabilize-clos-structure-slot} (definition definitions packages pathnames)
@anchor{❨494❩}@c
@functionsubindex{stabilize-clos-structure-slot}@c
Compute CLOS structure slot DEFINITION's reader and writer definitions.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@end table
@end deffn
@deffn {Function} {sub-component-p} (component directory)
@anchor{❨542❩}@c
@functionsubindex{sub-component-p}@c
Return T if COMPONENT can be found under DIRECTORY.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {subsystem} (name system directory)
@anchor{❨570❩}@c
@functionsubindex{subsystem}@c
Return NAME'd SYSTEM dependency if found under DIRECTORY@comma{} or nil.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {subsystems} (system directory)
@anchor{❨522❩}@c
@functionsubindex{subsystems}@c
Return the list of SYSTEM and all its dependencies found under DIRECTORY.
All dependencies are descended recursively. Both :defsystem-depends-on and
:depends-on are included. Potential duplicates are removed.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {system-dependencies} (system)
@anchor{❨489❩}@c
@functionsubindex{system-dependencies}@c
Return all system names from SYSTEM dependencies.
This includes both :defsystem-depends-on and :depends-on.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨35❩, , @t{assess.lisp}}.
@end table
@end deffn
@deffn {Function} {validate-email} (string)
@anchor{❨506❩}@c
@functionsubindex{validate-email}@c
Check that STRING is of the form nonblank@atchar{}nonblank@comma{} after trimming.
Return that string@comma{} or issue a warning and return NIL.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨28❩, , @t{util.lisp}}.
@end table
@end deffn

@node Private generic functions, Private method combinations, Private ordinary functions, Internals
@subsection Generic functions
@deffn {Generic Function} {category-name} (definition)
@anchor{❨646❩}@c
@genericsubindex{category-name}@c
Return DEFINITION's category name.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Methods
@deffn {Method} {category-name} ((definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨647❩}@c
@methodsubindex{category-name}@c
Return "system"
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨98❩, , @t{module-definition}}))
@anchor{❨648❩}@c
@methodsubindex{category-name}@c
Return "module"
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨347❩, , @t{file-definition}}))
@anchor{❨649❩}@c
@methodsubindex{category-name}@c
Return "file"
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨650❩}@c
@methodsubindex{category-name}@c
Return "package".
@table @strong
@item Source
@ref{❨24❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨215❩, , @t{alias-definition}}))
@anchor{❨651❩}@c
@methodsubindex{category-name}@c
Return the category name of alias DEFINITION's referee.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨652❩}@c
@methodsubindex{category-name}@c
Return "slot".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨417❩, , @t{class-definition}}))
@anchor{❨653❩}@c
@methodsubindex{category-name}@c
Return "class".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨421❩, , @t{condition-definition}}))
@anchor{❨654❩}@c
@methodsubindex{category-name}@c
Return "condition".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨285❩, , @t{structure-definition}}))
@anchor{❨655❩}@c
@methodsubindex{category-name}@c
Return "structure".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨268❩, , @t{writer-method-definition}}))
@anchor{❨656❩}@c
@methodsubindex{category-name}@c
Return "writer method".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨97❩, , @t{reader-method-definition}}))
@anchor{❨657❩}@c
@methodsubindex{category-name}@c
Return "reader method".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨85❩, , @t{method-definition}}))
@anchor{❨658❩}@c
@methodsubindex{category-name}@c
Return "method".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨203❩, , @t{combination-definition}}))
@anchor{❨659❩}@c
@methodsubindex{category-name}@c
Return "method combination".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨346❩, , @t{generic-writer-definition}}))
@anchor{❨660❩}@c
@methodsubindex{category-name}@c
Return "generic writer".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨56❩, , @t{generic-reader-definition}}))
@anchor{❨661❩}@c
@methodsubindex{category-name}@c
Return "generic reader".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨45❩, , @t{generic-function-definition}}))
@anchor{❨662❩}@c
@methodsubindex{category-name}@c
Return "generic function".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨193❩, , @t{ordinary-writer-definition}}))
@anchor{❨663❩}@c
@methodsubindex{category-name}@c
Return "writer".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨186❩, , @t{ordinary-reader-definition}}))
@anchor{❨664❩}@c
@methodsubindex{category-name}@c
Return "reader".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨436❩, , @t{ordinary-function-definition}}))
@anchor{❨665❩}@c
@methodsubindex{category-name}@c
Return "function".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((expander @ref{❨123❩, , @t{expander-definition}}))
@anchor{❨666❩}@c
@methodsubindex{category-name}@c
Return "setf expander".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨322❩, , @t{type-definition}}))
@anchor{❨667❩}@c
@methodsubindex{category-name}@c
Return "type".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨390❩, , @t{compiler-macro-definition}}))
@anchor{❨668❩}@c
@methodsubindex{category-name}@c
Return "compiler macro".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨266❩, , @t{macro-definition}}))
@anchor{❨669❩}@c
@methodsubindex{category-name}@c
Return "macro".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨145❩, , @t{symbol-macro-definition}}))
@anchor{❨670❩}@c
@methodsubindex{category-name}@c
Return "symbol macro".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨94❩, , @t{special-definition}}))
@anchor{❨671❩}@c
@methodsubindex{category-name}@c
Return "special variable".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {category-name} ((definition @ref{❨392❩, , @t{constant-definition}}))
@anchor{❨672❩}@c
@methodsubindex{category-name}@c
Return "constant".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {declt-notice} (object)
@anchor{❨749❩}@c
@genericsubindex{declt-notice}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Methods
@deffn {Reader Method} {declt-notice} ((context @ref{❨679❩, , @t{context}}))
@anchor{❨750❩}@c
@methodsubindex{declt-notice}@c
whether to add a small credit paragraph about Declt.
Possible values are NIL@comma{} :short@comma{} or :long (the default).
@table @strong
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Target Slot
@ref{❨683❩, , @t{declt-notice}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {default-values} (object)
@anchor{❨633❩}@c
@genericsubindex{default-values}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Methods
@deffn {Reader Method} {default-values} ((context @ref{❨679❩, , @t{context}}))
@anchor{❨634❩}@c
@methodsubindex{default-values}@c
Whether to render default / standard values.
@table @strong
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Target Slot
@ref{❨681❩, , @t{default-values}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {document} (definition context &key inline writer merged-methods merge-expander &allow-other-keys)
@anchor{❨786❩}@c
@genericsubindex{document}@c
Render DEFINITION's documentation in CONTEXT.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Method Combination
@ref{❨826❩, , @t{document}}.
@item Methods
@deffn {Method} {document} :open ((definition @ref{❨146❩, , @t{system-definition}}) context &key)
@anchor{❨787❩}@c
@methodsubindex{document}@c
Render DEFINITION's system-specific bits in CONTEXT.
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :close ((definition @ref{❨98❩, , @t{module-definition}}) context &key)
@anchor{❨788❩}@c
@methodsubindex{document}@c
Render module DEFINITION's references in CONTEXT.
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :close ((definition @ref{❨272❩, , @t{lisp-file-definition}}) context &key)
@anchor{❨789❩}@c
@methodsubindex{document}@c
Render lisp file DEFINITION's references in CONTEXT.
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨130❩, , @t{component-definition}}) context &key)
@anchor{❨790❩}@c
@methodsubindex{document}@c
Render ASDF component DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around ((definition @ref{❨130❩, , @t{component-definition}}) context &key)
@anchor{❨791❩}@c
@methodsubindex{document}@c
Anchor@comma{} index and document component DEFINITION in CONTEXT.
Documentation is done in a @atchar{}table environment.
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨208❩, , @t{package-definition}}) context &key)
@anchor{❨792❩}@c
@methodsubindex{document}@c
Render package DEFINITION's documentation in context.
@table @strong
@item Source
@ref{❨24❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨215❩, , @t{alias-definition}}) context &key)
@anchor{❨793❩}@c
@methodsubindex{document}@c
Render alias DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨127❩, , @t{typed-structure-slot-definition}}) context &key)
@anchor{❨794❩}@c
@methodsubindex{document}@c
Render typed structure slot DEFINITION's documentation in CONTEXT.
More specifically@comma{} render DEFINITION's reader and writer references.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨128❩, , @t{clos-slot-definition}}) context &key)
@anchor{❨795❩}@c
@methodsubindex{document}@c
Render CLOS slot DEFINITION's documentation in CONTEXT.@*
More specifically@comma{} render DEFINITION's reader and writer references.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨159❩, , @t{slot-definition}}) context &key)
@anchor{❨796❩}@c
@methodsubindex{document}@c
Render slot DEFINITION's documentation in context.@*
More specifically@comma{} render DEFINITION's value type@comma{} and for CLOS slots render
allocation@comma{} initform@comma{} and initargs.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨431❩, , @t{typed-structure-definition}}) context &key)
@anchor{❨797❩}@c
@methodsubindex{document}@c
Render typed structure DEFINITION's type documentation in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨177❩, , @t{clos-classoid-mixin}}) context &key)
@anchor{❨798❩}@c
@methodsubindex{document}@c
Render CLOS classoid mixin DEFINITION's documentation in CONTEXT.
More specifically@comma{} render DEFINITION's direct superclasses@comma{} subclasses@comma{}
methods@comma{} and initargs references.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :close ((definition @ref{❨337❩, , @t{classoid-definition}}) context &key)
@anchor{❨799❩}@c
@methodsubindex{document}@c
Close classoid DEFINITION's documentation environment in CONTEXT.
More specifically:@*
- close the @atchar{}table environment@comma{}@*
- close the @atchar{}deftp environment.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨337❩, , @t{classoid-definition}}) context &key)
@anchor{❨800❩}@c
@methodsubindex{document}@c
Render classoid DEFINITION's direct slots references in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :open ((definition @ref{❨337❩, , @t{classoid-definition}}) context &key)
@anchor{❨801❩}@c
@methodsubindex{document}@c
Open classoid DEFINITION's documentation environment in CONTEXT.
More specifically:@*
- open a @atchar{}deftp environment@comma{}@*
- anchor and index DEFINITION@comma{}@*
- render DEFINITION's docstring@comma{}@*
- open a @atchar{}table environment@comma{}@*
- render DEFINITIONS's core documentation.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :open ((definition @ref{❨85❩, , @t{method-definition}}) context &key inline writer)
@anchor{❨802❩}@c
@methodsubindex{document}@c
Open method DEFINITION's documentation in CONTEXT.@*
More specifically:@*
- open a @atchar{}deffn environment@comma{} possibly merging a WRITER method@comma{}@*
- anchor and index DEFINITION@comma{}@*
- render DEFINITION's docstring@comma{}@*
- open a @atchar{}table environment@comma{}@*
- render DEFINITION's source file.@*
When INLINE@comma{} the method definition is documented within its owner's
documentation. In such a case@comma{} the package reference is not rendered (as it is
the same as the owner's)@comma{} and the source file is only referenced if different
from that of the owner's.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨231❩, , @t{short-combination-definition}}) context &key)
@anchor{❨803❩}@c
@methodsubindex{document}@c
Render short method combination DEFINITION's documentation in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨203❩, , @t{combination-definition}}) context &key)
@anchor{❨804❩}@c
@methodsubindex{document}@c
Render method combination DEFINITION's client references in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around ((definition @ref{❨346❩, , @t{generic-writer-definition}}) context &key)
@anchor{❨805❩}@c
@methodsubindex{document}@c
Prevent generic writer DEFINITION from being documented when merging.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around ((definition @ref{❨56❩, , @t{generic-reader-definition}}) context &rest args &key)
@anchor{❨806❩}@c
@methodsubindex{document}@c
Check for potential writer merging with generic reader DEFINITION.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :close ((definition @ref{❨45❩, , @t{generic-function-definition}}) context &key merged-methods)
@anchor{❨807❩}@c
@methodsubindex{document}@c
Close generic function DEFINITION's documentation.@*
More specifically:@*
- render DEFINITION's method references@comma{} possibly merging readers and writers@comma{}
- close the @atchar{}table environment@comma{}@*
- close the @atchar{}deffn environment.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨45❩, , @t{generic-function-definition}}) context &key)
@anchor{❨808❩}@c
@methodsubindex{document}@c
Render generic function DEFINITION's combination reference in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around ((definition @ref{❨193❩, , @t{ordinary-writer-definition}}) context &key)
@anchor{❨809❩}@c
@methodsubindex{document}@c
Prevent ordinary writer DEFINITION from being documented when merging.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around ((definition @ref{❨186❩, , @t{ordinary-reader-definition}}) context &rest args &key)
@anchor{❨810❩}@c
@methodsubindex{document}@c
Check for potential writer merging with ordinary reader DEFINITION.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨479❩, , @t{short-expander-definition}}) context &key)
@anchor{❨811❩}@c
@methodsubindex{document}@c
Render short expander DEFINITION's standalone writer reference in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨123❩, , @t{expander-definition}}) context &key)
@anchor{❨812❩}@c
@methodsubindex{document}@c
Render setf expander DEFINITION's standalone reader reference in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around ((definition @ref{❨43❩, , @t{long-expander-definition}}) context &key)
@anchor{❨813❩}@c
@methodsubindex{document}@c
Prevent long expander DEFINITION from being documented when merging.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :close ((definition @ref{❨322❩, , @t{type-definition}}) context &key)
@anchor{❨814❩}@c
@methodsubindex{document}@c
Close type DEFINITION's documentation environment in CONTEXT.
More specifically:@*
- close the @atchar{}table environment@comma{}@*
- close the @atchar{}deftp environment.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :open ((definition @ref{❨322❩, , @t{type-definition}}) context &key)
@anchor{❨815❩}@c
@methodsubindex{document}@c
Open type DEFINITION's documentation environment in CONTEXT.
More specifically:@*
- open a @atchar{}deftp environment@comma{}@*
- anchor and index DEFINITION@comma{}@*
- render DEFINITION's docstring@comma{}@*
- open a @atchar{}table environment@comma{}@*
- render DEFINITION's core.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨229❩, , @t{accessor-mixin}}) context &key)
@anchor{❨816❩}@c
@methodsubindex{document}@c
Render accessor mixin DEFINITION's target slot reference in CONTEXT.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨237❩, , @t{setfable-funcoid-definition}}) context &key merge-expander)
@anchor{❨817❩}@c
@methodsubindex{document}@c
Render setfable funcoid DEFINITION's expanders information in CONTEXT.
More specifically:@*
- render a reference to a set expander for DEFINITION@comma{} unless the definitions
  are merged@comma{}@*
- render references to all setf expanders expanding to DEFINITION.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :open ((definition @ref{❨237❩, , @t{setfable-funcoid-definition}}) context &key merge-expander writer)
@anchor{❨818❩}@c
@methodsubindex{document}@c
Open setfable funcoid DEFINITION's documentation environment in CONTEXT.
More specifically:@*
- open a @atchar{}deffn environment@comma{} possibly merging a related setf expander or
  writer@comma{}@*
- anchor and index DEFINITION@comma{}@*
- render DEFINITION's docstring@comma{}@*
- open a @atchar{}table environment@comma{}@*
- render DEFINITION's core documentation.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around ((definition @ref{❨237❩, , @t{setfable-funcoid-definition}}) context &rest args &key)
@anchor{❨819❩}@c
@methodsubindex{document}@c
Check for potential expander merging of setfable funcoid DEFINITION.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :close ((definition @ref{❨291❩, , @t{funcoid-definition}}) context &key)
@anchor{❨820❩}@c
@methodsubindex{document}@c
Close funcoid DEFINITION's documentation environment in CONTEXT.
More specifically:@*
- close the @atchar{}table environment@comma{}@*
- close the @atchar{}deffn environment.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :open ((definition @ref{❨291❩, , @t{funcoid-definition}}) context &key)
@anchor{❨821❩}@c
@methodsubindex{document}@c
Open funcoid DEFINITION's documentation environment in CONTEXT.
More specifically:@*
- open a @atchar{}deffn environment@comma{}@*
- anchor and index DEFINITION@comma{}@*
- render DEFINITION's docstring@comma{}@*
- open a @atchar{}table environment@comma{}@*
- render DEFINITION's core documentation.@*
This is the default method.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :close ((definition @ref{❨44❩, , @t{varoid-definition}}) context &key)
@anchor{❨822❩}@c
@methodsubindex{document}@c
Close varoid DEFINITION's documentation environment in CONTEXT.
More specifically:@*
- close the @atchar{}table environment@comma{}@*
- close the @atchar{}defvr environment.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} ((definition @ref{❨44❩, , @t{varoid-definition}}) context &key)
@anchor{❨823❩}@c
@methodsubindex{document}@c
Render varoid DEFINITION's documentation in CONTEXT.@*
More specifically@comma{} render DEFINITION's package and source file references.
As a special exception@comma{} slots don't reference their package@comma{} unless it differs
from the slot's owner package@comma{} and never reference their source file@comma{} which is
the same as their owner.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :open ((definition @ref{❨44❩, , @t{varoid-definition}}) context &key)
@anchor{❨824❩}@c
@methodsubindex{document}@c
Open varoid DEFINITIONS's documentation environment in CONTEXT.
More specifically:@*
- open a @atchar{}defvr environment@comma{}@*
- anchor and index DEFINITION@comma{}@*
- render DEFINITION's docstring@comma{}@*
- open a @atchar{}table environment.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {document} :around (definition context &key)
@anchor{❨825❩}@c
@methodsubindex{document}@c
Check whether to render foreign DEFINITIONs.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {external-symbols} (object)
@anchor{❨495❩}@c
@genericsubindex{external-symbols}@c
@deffnx {Generic Writer} {(setf external-symbols)} (object)
@anchor{❨497❩}@c
@genericsubindex{(setf external-symbols)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {external-symbols} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨496❩}@c
@methodsubindex{external-symbols}@c
@deffnx {Writer Method} {(setf external-symbols)} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨498❩}@c
@methodsubindex{(setf external-symbols)}@c
The list of corresponding external symbols.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@item Target Slot
@ref{❨210❩, , @t{external-symbols}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {foreign-definitions} (object)
@anchor{❨677❩}@c
@genericsubindex{foreign-definitions}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Methods
@deffn {Reader Method} {foreign-definitions} ((context @ref{❨679❩, , @t{context}}))
@anchor{❨678❩}@c
@methodsubindex{foreign-definitions}@c
Whether to render foreign definitions.
@table @strong
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Target Slot
@ref{❨682❩, , @t{foreign-definitions}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {index-command-name} (definition)
@anchor{❨723❩}@c
@genericsubindex{index-command-name}@c
Return DEFINITION's index command name.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Methods
@deffn {Method} {index-command-name} ((definition @ref{❨146❩, , @t{system-definition}}))
@anchor{❨724❩}@c
@methodsubindex{index-command-name}@c
Return "systemindex"
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨98❩, , @t{module-definition}}))
@anchor{❨725❩}@c
@methodsubindex{index-command-name}@c
Return "moduleindex"
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨347❩, , @t{file-definition}}))
@anchor{❨726❩}@c
@methodsubindex{index-command-name}@c
Return "fileindex"
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨727❩}@c
@methodsubindex{index-command-name}@c
Return "packageindex".
@table @strong
@item Source
@ref{❨24❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨215❩, , @t{alias-definition}}))
@anchor{❨728❩}@c
@methodsubindex{index-command-name}@c
Return the index command name of alias DEFINITION's referee.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨729❩}@c
@methodsubindex{index-command-name}@c
Return "slotsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨417❩, , @t{class-definition}}))
@anchor{❨730❩}@c
@methodsubindex{index-command-name}@c
Return "classsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨421❩, , @t{condition-definition}}))
@anchor{❨731❩}@c
@methodsubindex{index-command-name}@c
Return "conditionsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨285❩, , @t{structure-definition}}))
@anchor{❨732❩}@c
@methodsubindex{index-command-name}@c
Return "structuresubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨85❩, , @t{method-definition}}))
@anchor{❨733❩}@c
@methodsubindex{index-command-name}@c
Return "methodsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨203❩, , @t{combination-definition}}))
@anchor{❨734❩}@c
@methodsubindex{index-command-name}@c
Return "combinationsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨45❩, , @t{generic-function-definition}}))
@anchor{❨735❩}@c
@methodsubindex{index-command-name}@c
Return "genericsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨436❩, , @t{ordinary-function-definition}}))
@anchor{❨736❩}@c
@methodsubindex{index-command-name}@c
Return "functionsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((expander @ref{❨123❩, , @t{expander-definition}}))
@anchor{❨737❩}@c
@methodsubindex{index-command-name}@c
Return "expandersubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨322❩, , @t{type-definition}}))
@anchor{❨738❩}@c
@methodsubindex{index-command-name}@c
Return "typesubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨390❩, , @t{compiler-macro-definition}}))
@anchor{❨739❩}@c
@methodsubindex{index-command-name}@c
Return "compilermacrosubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨266❩, , @t{macro-definition}}))
@anchor{❨740❩}@c
@methodsubindex{index-command-name}@c
Return "macrosubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨145❩, , @t{symbol-macro-definition}}))
@anchor{❨741❩}@c
@methodsubindex{index-command-name}@c
Return "symbolmacrosubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨94❩, , @t{special-definition}}))
@anchor{❨742❩}@c
@methodsubindex{index-command-name}@c
Return "specialsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {index-command-name} ((definition @ref{❨392❩, , @t{constant-definition}}))
@anchor{❨743❩}@c
@methodsubindex{index-command-name}@c
Return "constantsubindex".
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {internal-symbols} (object)
@anchor{❨534❩}@c
@genericsubindex{internal-symbols}@c
@deffnx {Generic Writer} {(setf internal-symbols)} (object)
@anchor{❨536❩}@c
@genericsubindex{(setf internal-symbols)}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Methods
@deffn {Reader Method} {internal-symbols} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨535❩}@c
@methodsubindex{internal-symbols}@c
@deffnx {Writer Method} {(setf internal-symbols)} ((package-definition @ref{❨208❩, , @t{package-definition}}))
@anchor{❨537❩}@c
@methodsubindex{(setf internal-symbols)}@c
The list of corresponding internal symbols.
@table @strong
@item Source
@ref{❨32❩, , @t{package.lisp}}.
@item Target Slot
@ref{❨211❩, , @t{internal-symbols}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {locations} (object)
@anchor{❨784❩}@c
@genericsubindex{locations}@c
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Methods
@deffn {Reader Method} {locations} ((context @ref{❨679❩, , @t{context}}))
@anchor{❨785❩}@c
@methodsubindex{locations}@c
Whether to hyperlink definitions to their locations.@*
Currently supported values are NIL (the default)@comma{} and :file-system.
@table @strong
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Target Slot
@ref{❨680❩, , @t{locations}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {safe-name} (definition &optional qualified)
@anchor{❨776❩}@c
@genericsubindex{safe-name}@c
Return DEFINITION's safe name@comma{} possibly QUALIFIED.@*
Safe names have blank characters replaced with visible Unicode symbols.
See `reveal' for more information.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Methods
@deffn {Method} {safe-name} :around ((definition @ref{❨347❩, , @t{file-definition}}) &optional qualify)
@anchor{❨777❩}@c
@methodsubindex{safe-name}@c
Append DEFINITION's file extension at the end@comma{} when applicable.
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} ((definition @ref{❨130❩, , @t{component-definition}}) &optional qualified)
@anchor{❨778❩}@c
@methodsubindex{safe-name}@c
Reveal component DEFINITION's name@comma{} possibly QUALIFIED.@*
A QUALIFIED component's name is of the form "path/to/component"@comma{} each
element being the name of a component's parent.
@table @strong
@item Source
@ref{❨25❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} :around ((definition @ref{❨159❩, , @t{slot-definition}}) &optional qualified)
@anchor{❨779❩}@c
@methodsubindex{safe-name}@c
When QUALIFIED@comma{} prepend slot DEFINITION's classoid safe name.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} :around ((definition @ref{❨85❩, , @t{method-definition}}) &optional qualified)
@anchor{❨780❩}@c
@methodsubindex{safe-name}@c
When QUALIFIED@comma{} append method DEFINITION's qualifiers and specializers.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} ((definition @ref{❨218❩, , @t{symbol-definition}}) &optional qualified)
@anchor{❨781❩}@c
@methodsubindex{safe-name}@c
Reveal symbol DEFINITION's name@comma{} possibly QUALIFIED.@*
A QUALIFIED name is of the form "package:[:]symbol"@comma{} maybe in a setf list.
Uninterned symbols are denoted by the ∅ package.
@table @strong
@item Source
@ref{❨23❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {safe-name} ((definition @ref{❨385❩, , @t{definition}}) &optional qualified)
@anchor{❨782❩}@c
@methodsubindex{safe-name}@c
Reveal unqualifiable DEFINITION's name. This is the default method.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {source-pathname} (definition)
@anchor{❨576❩}@c
@genericsubindex{source-pathname}@c
Return DEFINITION's source pathname.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨29❩, , @t{definition.lisp}}.
@item Methods
@deffn {Method} {source-pathname} ((definition @ref{❨130❩, , @t{component-definition}}))
@anchor{❨577❩}@c
@methodsubindex{source-pathname}@c
Return component DEFINITION's source pathname.@*
This actually is the corresponding system's source file.
@table @strong
@item Source
@ref{❨33❩, , @t{asdf.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} ((definition @ref{❨215❩, , @t{alias-definition}}))
@anchor{❨578❩}@c
@methodsubindex{source-pathname}@c
Return NIL.@*
Aliases are defined dynamically so it's impossible to locate the code
being executed.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} ((definition @ref{❨159❩, , @t{slot-definition}}))
@anchor{❨579❩}@c
@methodsubindex{source-pathname}@c
Return slot DEFINITION's owner source pathname.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} ((definition @ref{❨203❩, , @t{combination-definition}}))
@anchor{❨580❩}@c
@methodsubindex{source-pathname}@c
Return method combination DEFINITION's source pathname.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} ((definition @ref{❨123❩, , @t{expander-definition}}))
@anchor{❨581❩}@c
@methodsubindex{source-pathname}@c
Return setf expander DEFINITION's source pathname.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} ((definition @ref{❨322❩, , @t{type-definition}}))
@anchor{❨582❩}@c
@methodsubindex{source-pathname}@c
Return type DEFINITION's source pathname.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} ((definition @ref{❨145❩, , @t{symbol-macro-definition}}))
@anchor{❨583❩}@c
@methodsubindex{source-pathname}@c
Return symbol macro DEFINITION's source pathname.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} ((definition @ref{❨94❩, , @t{special-definition}}))
@anchor{❨584❩}@c
@methodsubindex{source-pathname}@c
Return special DEFINITION's source pathname.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} ((definition @ref{❨392❩, , @t{constant-definition}}))
@anchor{❨585❩}@c
@methodsubindex{source-pathname}@c
Return constant DEFINITION's source pathname.
@table @strong
@item Source
@ref{❨31❩, , @t{symbol.lisp}}.
@end table
@end deffn
@deffn {Method} {source-pathname} (definition)
@anchor{❨586❩}@c
@methodsubindex{source-pathname}@c
Return DEFINITION's object source pathname (this is the default method).
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {stabilize} (definition definitions packages pathnames)
@anchor{❨545❩}@c
@genericsubindex{stabilize}@c
Stabilize DEFINITION in DEFINITIONS and domestic PACKAGES and PATHNAMES.
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Source
@ref{❨34❩, , @t{finalize.lisp}}.
@item Method Combination
@t{progn}.
@table @strong
@item Options
@t{:most-specific-first}
@end table
@item Methods
@deffn {Method} {stabilize} progn ((definition @ref{❨146❩, , @t{system-definition}}) definitions packages pathnames)
@anchor{❨546❩}@c
@methodsubindex{stabilize}@c
Compute system DEFINITION's defsystem dependency definitions.
Those definitions are guaranteed to be in the original system's order.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨98❩, , @t{module-definition}}) definitions packages pathnames)
@anchor{❨547❩}@c
@methodsubindex{stabilize}@c
Compute module DEFINITION's child definitions.@*
Those definitions are guaranteed to be in the module's original order.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨272❩, , @t{lisp-file-definition}}) definitions packages pathnames)
@anchor{❨548❩}@c
@methodsubindex{stabilize}@c
Compute Lisp file DEFINITION's definitions list.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨130❩, , @t{component-definition}}) definitions packages pathnames)
@anchor{❨549❩}@c
@methodsubindex{stabilize}@c
Compute component DEFINITION's parent and dependency definitions.
Those definitions are guaranteed to be in the original component's order.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨208❩, , @t{package-definition}}) definitions packages pathnames)
@anchor{❨550❩}@c
@methodsubindex{stabilize}@c
Compute package DEFINITION's use@comma{} used-by@comma{} and definitions lists.
New foreign package definitions may be created and added at the end of
DEFINITIONS in the process.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨263❩, , @t{function-alias-definition}}) definitions packages pathnames)
@anchor{❨551❩}@c
@methodsubindex{stabilize}@c
Compute simple function alias DEFINITION's referee.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨95❩, , @t{compiler-macro-alias-definition}}) definitions packages pathnames)
@anchor{❨552❩}@c
@methodsubindex{stabilize}@c
Compute compiler macro alias DEFINITION's referee.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨416❩, , @t{macro-alias-definition}}) definitions packages pathnames)
@anchor{❨553❩}@c
@methodsubindex{stabilize}@c
Compute macro alias DEFINITION's referee.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨127❩, , @t{typed-structure-slot-definition}}) definitions packages pathnames)
@anchor{❨554❩}@c
@methodsubindex{stabilize}@c
Compute typed structure slot DEFINITION's reader and writer definitions.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨128❩, , @t{clos-slot-definition}}) definitions packages pathnames)
@anchor{❨555❩}@c
@methodsubindex{stabilize}@c
Compute CLOS slot DEFINITION's reader and writer definitions.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨177❩, , @t{clos-classoid-mixin}}) definitions packages pathnames)
@anchor{❨556❩}@c
@methodsubindex{stabilize}@c
Compute classoid DEFINITION's super/sub classoids@comma{} and method definitions.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨85❩, , @t{method-definition}}) definitions packages pathnames)
@anchor{❨557❩}@c
@methodsubindex{stabilize}@c
Compute method DEFINITION's owner@comma{} and specializer references.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨231❩, , @t{short-combination-definition}}) definitions packages pathnames)
@anchor{❨558❩}@c
@methodsubindex{stabilize}@c
Compute short combination DEFINITION's standalone combinator definition.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨203❩, , @t{combination-definition}}) definitions packages pathnames)
@anchor{❨559❩}@c
@methodsubindex{stabilize}@c
Compute method combination DEFINITION's users.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨45❩, , @t{generic-function-definition}}) definitions packages pathnames)
@anchor{❨560❩}@c
@methodsubindex{stabilize}@c
Compute generic function DEFINITION's methods@comma{} and combination definition.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨479❩, , @t{short-expander-definition}}) definitions packages pathnames)
@anchor{❨561❩}@c
@methodsubindex{stabilize}@c
Compute short setf expander DEFINITION's standalone writer definition.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨123❩, , @t{expander-definition}}) definitions packages pathnames)
@anchor{❨562❩}@c
@methodsubindex{stabilize}@c
Compute setf expander DEFINTIION's standalone reader definition.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨237❩, , @t{setfable-funcoid-definition}}) definitions packages pathnames)
@anchor{❨563❩}@c
@methodsubindex{stabilize}@c
Compute DEFINITION's expander-for and expanders-to references.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨218❩, , @t{symbol-definition}}) definitions packages pathnames)
@anchor{❨564❩}@c
@methodsubindex{stabilize}@c
Compute symbol DEFINITION's home package definition.@*
New foreign package definitions may be created and added at the end of
DEFINITIONS in the process.
@table @strong
@end table
@end deffn
@deffn {Method} {stabilize} progn ((definition @ref{❨385❩, , @t{definition}}) definitions packages pathnames)
@anchor{❨565❩}@c
@methodsubindex{stabilize}@c
Compute DEFINITION's source file definition.
@table @strong
@end table
@end deffn
@end table
@end deffn

@node Private method combinations, Private structures, Private generic functions, Internals
@subsection Method combinations
@deffn {Method Combination} {document} ()
@anchor{❨826❩}@c
@combinationsubindex{document}@c
The documentation protocol's method combination.@*
This method combination provides the following four method groups:@*
- around methods (optional@comma{} :around qualifier)@comma{}@*
- opening methods (optional@comma{} :open qualifier)@comma{}@*
- body methods (no qualifier)@comma{}@*
- closing methods (optional@comma{} :close qualifier).@*

Around methods behave like those of the standard method combination@comma{} except
that they are ordered most specific last. They can be used to conditionalize
the actual rendering of documentation@comma{} for example in order to filter out
definitions that are merged with others.@*

The main methods block behaves as follows.@*
- The most specific opening method@comma{} if any@comma{} is executed.@*
- All body methods (if any) are executed sequentially in most specific last
  order.@*
- Finally@comma{} the most specific closing method@comma{} if any@comma{} is executed.@*

No method group requires the existence of an applicable method@comma{} but for each
generic call@comma{} there must of course be at least one applicable method@comma{}
regardless of the group.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Client Functions
@ref{❨786❩, , @t{document}}.
@end table
@end deffn

@node Private structures, Private classes, Private method combinations, Internals
@subsection Structures
@deftp {Structure} {node}
@anchor{❨696❩}@c
@structuresubindex{node}@c
The NODE structure.@*
This structure holds Texinfo nodes.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨21❩, , @t{texi.lisp}}.
@item Direct superclasses
@t{structure-object}.
@item Direct slots
@defvr {Slot} {name}
@anchor{❨697❩}@c
@slotsubindex{name}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Readers
@ref{❨755❩, , @t{node-name}}.
@item Writers
@ref{❨756❩, , @t{(setf node-name)}}.
@end table
@end defvr
@defvr {Slot} {synopsis}
@anchor{❨698❩}@c
@slotsubindex{synopsis}@c
@table @strong
@item Readers
@ref{❨684❩, , @t{node-synopsis}}.
@item Writers
@ref{❨685❩, , @t{(setf node-synopsis)}}.
@end table
@end defvr
@defvr {Slot} {section-type}
@anchor{❨699❩}@c
@slotsubindex{section-type}@c
@table @strong
@item Initform
@t{:numbered}
@item Readers
@ref{❨721❩, , @t{node-section-type}}.
@item Writers
@ref{❨722❩, , @t{(setf node-section-type)}}.
@end table
@end defvr
@defvr {Slot} {section-name}
@anchor{❨700❩}@c
@slotsubindex{section-name}@c
@table @strong
@item Readers
@ref{❨707❩, , @t{node-section-name}}.
@item Writers
@ref{❨708❩, , @t{(setf node-section-name)}}.
@end table
@end defvr
@defvr {Slot} {next}
@anchor{❨701❩}@c
@slotsubindex{next}@c
@table @strong
@item Readers
@ref{❨752❩, , @t{node-next}}.
@item Writers
@ref{❨753❩, , @t{(setf node-next)}}.
@end table
@end defvr
@defvr {Slot} {previous}
@anchor{❨702❩}@c
@slotsubindex{previous}@c
@table @strong
@item Readers
@ref{❨625❩, , @t{node-previous}}.
@item Writers
@ref{❨626❩, , @t{(setf node-previous)}}.
@end table
@end defvr
@defvr {Slot} {up}
@anchor{❨703❩}@c
@slotsubindex{up}@c
@table @strong
@item Readers
@ref{❨768❩, , @t{node-up}}.
@item Writers
@ref{❨769❩, , @t{(setf node-up)}}.
@end table
@end defvr
@defvr {Slot} {children}
@anchor{❨704❩}@c
@slotsubindex{children}@c
@table @strong
@item Package
@ref{❨36❩, , @t{net.didierverna.declt.assess}}.
@item Readers
@ref{❨774❩, , @t{node-children}}.
@item Writers
@ref{❨775❩, , @t{(setf node-children)}}.
@end table
@end defvr
@defvr {Slot} {before-menu-contents}
@anchor{❨705❩}@c
@slotsubindex{before-menu-contents}@c
@table @strong
@item Readers
@ref{❨757❩, , @t{node-before-menu-contents}}.
@item Writers
@ref{❨758❩, , @t{(setf node-before-menu-contents)}}.
@end table
@end defvr
@defvr {Slot} {after-menu-contents}
@anchor{❨706❩}@c
@slotsubindex{after-menu-contents}@c
@table @strong
@item Readers
@ref{❨623❩, , @t{node-after-menu-contents}}.
@item Writers
@ref{❨624❩, , @t{(setf node-after-menu-contents)}}.
@end table
@end defvr
@end table
@end deftp

@node Private classes, , Private structures, Internals
@subsection Classes
@deftp {Class} {context}
@anchor{❨679❩}@c
@classsubindex{context}@c
The class of rendering contexts.
@table @strong
@item Package
@ref{❨38❩, , @t{net.didierverna.declt}}.
@item Source
@ref{❨22❩, , @t{doc.lisp}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨750❩, , @t{declt-notice}}.
@item
@ref{❨634❩, , @t{default-values}}.
@item
@ref{❨678❩, , @t{foreign-definitions}}.
@item
@ref{❨785❩, , @t{locations}}.
@end itemize
@item Direct slots
@defvr {Slot} {locations}
@anchor{❨680❩}@c
@slotsubindex{locations}@c
Whether to hyperlink definitions to their locations.@*
Currently supported values are NIL (the default)@comma{} and :file-system.
@table @strong
@item Initargs
@t{:locations}
@item Readers
@ref{❨785❩, , @t{locations}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {default-values}
@anchor{❨681❩}@c
@slotsubindex{default-values}@c
Whether to render default / standard values.
@table @strong
@item Initargs
@t{:default-values}
@item Readers
@ref{❨634❩, , @t{default-values}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {foreign-definitions}
@anchor{❨682❩}@c
@slotsubindex{foreign-definitions}@c
Whether to render foreign definitions.
@table @strong
@item Initargs
@t{:foreign-definitions}
@item Readers
@ref{❨678❩, , @t{foreign-definitions}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {declt-notice}
@anchor{❨683❩}@c
@slotsubindex{declt-notice}@c
whether to add a small credit paragraph about Declt.
Possible values are NIL@comma{} :short@comma{} or :long (the default).
@table @strong
@item Initform
@t{:long}
@item Initargs
@t{:declt-notice}
@item Readers
@ref{❨750❩, , @t{declt-notice}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c reference.texi ends here
